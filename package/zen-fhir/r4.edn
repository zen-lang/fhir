{ns zen-fhir.r4,
 import #{zen-fhir},
 base64Binary
 {:zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/primitive-type
    zen-fhir/base},
  :fhir/type "base64Binary",
  :type zen/string,
  :zen/desc
  "Base StructureDefinition for base64Binary Type: A stream of bytes",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/base64Binary"},
 boolean
 {:zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/primitive-type
    zen-fhir/base},
  :fhir/type "boolean",
  :type zen/boolean,
  :zen/desc
  "Base StructureDefinition for boolean Type: Value of \"true\" or \"false\"",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/boolean"},
 canonical
 {:confirms #{uri},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/primitive-type
    zen-fhir/base},
  :fhir/type "canonical",
  :type zen/string,
  :zen/desc
  "Base StructureDefinition for canonical type: A URI that is a reference to a canonical URL on a FHIR resource",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/canonical"},
 code
 {:confirms #{string},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/primitive-type
    zen-fhir/base},
  :fhir/type "code",
  :type zen/string,
  :zen/desc
  "Base StructureDefinition for code type: A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents",
  :aidbox/data-format :aidbox,
  :fhir/definition-url "http://hl7.org/fhir/StructureDefinition/code"},
 date
 {:zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/primitive-type
    zen-fhir/base},
  :fhir/type "date",
  :type zen/date,
  :zen/desc
  "Base StructureDefinition for date Type: A date or partial date (e.g. just year or year + month). There is no time zone. The format is a union of the schema types gYear, gYearMonth and date.  Dates SHALL be valid dates.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url "http://hl7.org/fhir/StructureDefinition/date"},
 dateTime
 {:zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/primitive-type
    zen-fhir/base},
  :fhir/type "dateTime",
  :type zen/datetime,
  :zen/desc
  "Base StructureDefinition for dateTime Type: A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/dateTime"},
 decimal
 {:zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/primitive-type
    zen-fhir/base},
  :fhir/type "decimal",
  :type zen/number,
  :zen/desc
  "Base StructureDefinition for decimal Type: A rational number with implicit precision",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/decimal"},
 id
 {:confirms #{string},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/primitive-type
    zen-fhir/base},
  :fhir/type "id",
  :type zen/string,
  :zen/desc
  "Base StructureDefinition for id type: Any combination of letters, numerals, \"-\" and \".\", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url "http://hl7.org/fhir/StructureDefinition/id"},
 instant
 {:zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/primitive-type
    zen-fhir/base},
  :fhir/type "instant",
  :type zen/string,
  :zen/desc
  "Base StructureDefinition for instant Type: An instant in time - known at least to the second",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/instant"},
 integer
 {:zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/primitive-type
    zen-fhir/base},
  :fhir/type "integer",
  :type zen/integer,
  :zen/desc
  "Base StructureDefinition for integer Type: A whole number",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/integer"},
 markdown
 {:confirms #{string},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/primitive-type
    zen-fhir/base},
  :fhir/type "markdown",
  :type zen/string,
  :zen/desc
  "Base StructureDefinition for markdown type: A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/markdown"},
 oid
 {:confirms #{uri},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/primitive-type
    zen-fhir/base},
  :fhir/type "oid",
  :type zen/string,
  :zen/desc
  "Base StructureDefinition for oid type: An OID represented as a URI",
  :aidbox/data-format :aidbox,
  :fhir/definition-url "http://hl7.org/fhir/StructureDefinition/oid"},
 positiveInt
 {:confirms #{integer},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/primitive-type
    zen-fhir/base},
  :fhir/type "positiveInt",
  :type zen/integer,
  :zen/desc
  "Base StructureDefinition for positiveInt type: An integer with a value that is positive (e.g. >0)",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/positiveInt"},
 string
 {:zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/primitive-type
    zen-fhir/base},
  :fhir/type "string",
  :type zen/string,
  :zen/desc
  "Base StructureDefinition for string Type: A sequence of Unicode characters",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/string"},
 time
 {:zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/primitive-type
    zen-fhir/base},
  :fhir/type "time",
  :type zen/string,
  :zen/desc
  "Base StructureDefinition for time Type: A time during the day, with no date specified",
  :aidbox/data-format :aidbox,
  :fhir/definition-url "http://hl7.org/fhir/StructureDefinition/time"},
 unsignedInt
 {:confirms #{integer},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/primitive-type
    zen-fhir/base},
  :fhir/type "unsignedInt",
  :type zen/integer,
  :zen/desc
  "Base StructureDefinition for unsignedInt type: An integer with a value that is not negative (e.g. >= 0)",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/unsignedInt"},
 uri
 {:zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/primitive-type
    zen-fhir/base},
  :fhir/type "uri",
  :type zen/string,
  :zen/desc
  "Base StructureDefinition for uri Type: String of characters used to identify a name or a resource",
  :aidbox/data-format :aidbox,
  :fhir/definition-url "http://hl7.org/fhir/StructureDefinition/uri"},
 url
 {:confirms #{uri},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/primitive-type
    zen-fhir/base},
  :fhir/type "url",
  :type zen/string,
  :zen/desc
  "Base StructureDefinition for url type: A URI that is a literal reference",
  :aidbox/data-format :aidbox,
  :fhir/definition-url "http://hl7.org/fhir/StructureDefinition/url"},
 uuid
 {:confirms #{uri},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/primitive-type
    zen-fhir/base},
  :fhir/type "uuid",
  :type zen/string,
  :zen/desc
  "Base StructureDefinition for uuid type: A UUID, represented as a URI",
  :aidbox/data-format :aidbox,
  :fhir/definition-url "http://hl7.org/fhir/StructureDefinition/uuid"},
 xhtml
 {:zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/primitive-type
    zen-fhir/base},
  :fhir/type "xhtml",
  :type zen/map,
  :zen/desc "Base StructureDefinition for xhtml Type",
  :aidbox/data-format :aidbox,
  :fhir/definition-url "http://hl7.org/fhir/StructureDefinition/xhtml",
  :keys {:extension {:const {:value nil}}}},
 BackboneElement
 {:confirms #{Element},
  :zen/tags
  #{zen-fhir/structure-definition
    zen-fhir/abstract
    zen-fhir/complex-type
    zen/schema
    zen-fhir/base},
  :fhir/type "BackboneElement",
  :type zen/map,
  :zen/desc
  "Base StructureDefinition for BackboneElement Type: Base definition for all elements that are defined inside a resource - but not those in a data type.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/BackboneElement",
  :keys
  {:modifierExtension
   {:type zen/vector,
    :every
    {:confirms #{Extension},
     :zen/desc
     "Extensions that cannot be ignored even if unrecognized"}}}},
 Element
 {:zen/tags
  #{zen-fhir/structure-definition
    zen-fhir/abstract
    zen-fhir/complex-type
    zen/schema},
  :fhir/type "Element",
  :type zen/map,
  :zen/desc
  "Base StructureDefinition for Element Type: Base definition for all elements in a resource.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/Element",
  :keys
  {:id
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Unique id for inter-element referencing"},
   :extension
   {:type zen/vector,
    :every
    {:confirms #{Extension},
     :zen/desc "Additional content defined by implementations"},
    :slicing {:slices {}}}}},
 Address
 {:confirms #{Element},
  :zen/tags
  #{zen-fhir/structure-definition
    zen-fhir/complex-type
    zen/schema
    zen-fhir/base},
  :fhir/type "Address",
  :type zen/map,
  :zen/desc
  "Base StructureDefinition for Address Type: An address expressed using postal conventions (as opposed to GPS or other location definition formats).  This data type may be used to convey addresses for use in delivering mail as well as for visiting locations which might not be valid for mail delivery.  There are a variety of postal address formats defined around the world.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/Address",
  :keys
  {:use
   {:confirms #{code},
    :type zen/string,
    :zen/desc
    "home | work | temp | old | billing - purpose of this address"},
   :city
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name of city, town etc."},
   :type
   {:confirms #{code},
    :type zen/string,
    :zen/desc "postal | physical | both"},
   :state
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Sub-unit of country (abbreviations ok)"},
   :line
   {:type zen/vector,
    :every
    {:confirms #{string},
     :type zen/string,
     :zen/desc "Street name, number, direction & P.O. Box etc."}},
   :postalCode
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Postal code for area"},
   :period
   {:confirms #{Period},
    :zen/desc "Time period when address was/is in use"},
   :country
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Country (e.g. can be ISO 3166 2 or 3 letter code)"},
   :district
   {:confirms #{string},
    :type zen/string,
    :zen/desc "District name (aka county)"},
   :text
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Text representation of the address"}}},
 Age
 {:confirms #{Quantity},
  :zen/tags
  #{zen-fhir/structure-definition
    zen-fhir/complex-type
    zen/schema
    zen-fhir/base},
  :fhir/type "Age",
  :type zen/map,
  :zen/desc
  "Base StructureDefinition for Age Type: A duration of time during which an organism (or a process) has existed.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url "http://hl7.org/fhir/StructureDefinition/Age"},
 Annotation
 {:confirms #{Element},
  :zen/tags
  #{zen-fhir/structure-definition
    zen-fhir/complex-type
    zen/schema
    zen-fhir/base},
  :fhir/type "Annotation",
  :require #{:text},
  :type zen/map,
  :zen/desc
  "Base StructureDefinition for Annotation Type: A  text note which also  contains information about who made the statement and when.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/Annotation",
  :keys
  {:author
   {:type zen/map,
    :zen/desc "Individual responsible for the annotation",
    :keys
    {:Reference {:confirms #{Reference}},
     :string {:confirms #{string}, :type zen/string}},
    :exclusive-keys #{#{:string :Reference}}},
   :text
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc "The annotation  - text content (as markdown)"},
   :time
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "When the annotation was made"}}},
 Attachment
 {:confirms #{Element},
  :zen/tags
  #{zen-fhir/structure-definition
    zen-fhir/complex-type
    zen/schema
    zen-fhir/base},
  :fhir/type "Attachment",
  :type zen/map,
  :zen/desc
  "Base StructureDefinition for Attachment Type: For referring to data content defined in other formats.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/Attachment",
  :keys
  {:language
   {:confirms #{code},
    :type zen/string,
    :zen/desc "Human language of the content (BCP-47)"},
   :creation
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "Date attachment was first created"},
   :title
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Label to display in place of the data"},
   :url
   {:confirms #{url},
    :type zen/string,
    :zen/desc "Uri where the data can be found"},
   :contentType
   {:confirms #{code},
    :type zen/string,
    :zen/desc "Mime type of the content, with charset etc."},
   :hash
   {:confirms #{base64Binary},
    :type zen/string,
    :zen/desc "Hash of the data (sha-1, base64ed)"},
   :data
   {:confirms #{base64Binary},
    :type zen/string,
    :zen/desc "Data inline, base64ed"},
   :size
   {:confirms #{unsignedInt},
    :type zen/integer,
    :zen/desc "Number of bytes of content (if url provided)"}}},
 CodeableConcept
 {:confirms #{Element},
  :zen/tags
  #{zen-fhir/structure-definition
    zen-fhir/complex-type
    zen/schema
    zen-fhir/base},
  :fhir/type "CodeableConcept",
  :type zen/map,
  :zen/desc
  "Base StructureDefinition for CodeableConcept Type: A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/CodeableConcept",
  :keys
  {:text
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Plain text representation of the concept"},
   :coding
   {:type zen/vector,
    :every
    {:confirms #{Coding},
     :zen/desc "Code defined by a terminology system"}}}},
 Coding
 {:confirms #{Element},
  :zen/tags
  #{zen-fhir/structure-definition
    zen-fhir/complex-type
    zen/schema
    zen-fhir/base},
  :fhir/type "Coding",
  :type zen/map,
  :zen/desc
  "Base StructureDefinition for Coding Type: A reference to a code defined by a terminology system.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/Coding",
  :keys
  {:system
   {:confirms #{uri},
    :type zen/string,
    :zen/desc "Identity of the terminology system"},
   :code
   {:confirms #{code},
    :type zen/string,
    :zen/desc "Symbol in syntax defined by the system"},
   :version
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Version of the system - if relevant"},
   :display
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Representation defined by the system"},
   :userSelected
   {:confirms #{boolean},
    :type zen/boolean,
    :zen/desc "If this coding was chosen directly by the user"}}},
 ContactDetail
 {:confirms #{Element},
  :zen/tags
  #{zen-fhir/structure-definition
    zen-fhir/complex-type
    zen/schema
    zen-fhir/base},
  :fhir/type "ContactDetail",
  :type zen/map,
  :zen/desc
  "Base StructureDefinition for ContactDetail Type: Specifies contact information for a person or organization.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/ContactDetail",
  :keys
  {:telecom
   {:type zen/vector,
    :every
    {:confirms #{ContactPoint},
     :zen/desc "Contact details for individual or organization"}},
   :name
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name of an individual to contact"}}},
 ContactPoint
 {:confirms #{Element},
  :zen/tags
  #{zen-fhir/structure-definition
    zen-fhir/complex-type
    zen/schema
    zen-fhir/base},
  :fhir/type "ContactPoint",
  :type zen/map,
  :zen/desc
  "Base StructureDefinition for ContactPoint Type: Details for all kinds of technology mediated contact points for a person or organization, including telephone, email, etc.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/ContactPoint",
  :keys
  {:period
   {:confirms #{Period},
    :zen/desc "Time period when the contact point was/is in use"},
   :value
   {:confirms #{string},
    :type zen/string,
    :zen/desc "The actual contact point details"},
   :system
   {:confirms #{code},
    :type zen/string,
    :zen/desc "phone | fax | email | pager | url | sms | other"},
   :use
   {:confirms #{code},
    :type zen/string,
    :zen/desc
    "home | work | temp | old | mobile - purpose of this contact point"},
   :rank
   {:confirms #{positiveInt},
    :type zen/integer,
    :zen/desc "Specify preferred order of use (1 = highest)"}}},
 Contributor
 {:confirms #{Element},
  :zen/tags
  #{zen-fhir/structure-definition
    zen-fhir/complex-type
    zen/schema
    zen-fhir/base},
  :fhir/type "Contributor",
  :require #{:name :type},
  :type zen/map,
  :zen/desc
  "Base StructureDefinition for Contributor Type: A contributor to the content of a knowledge asset, including authors, editors, reviewers, and endorsers.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/Contributor",
  :keys
  {:name
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Who contributed the content"},
   :type
   {:confirms #{code},
    :type zen/string,
    :zen/desc "author | editor | reviewer | endorser"},
   :contact
   {:type zen/vector,
    :every
    {:confirms #{ContactDetail},
     :zen/desc "Contact details of the contributor"}}}},
 Count
 {:confirms #{Quantity},
  :zen/tags
  #{zen-fhir/structure-definition
    zen-fhir/complex-type
    zen/schema
    zen-fhir/base},
  :fhir/type "Count",
  :type zen/map,
  :zen/desc
  "Base StructureDefinition for Count Type: A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/Count"},
 DataRequirement
 {:confirms #{Element},
  :zen/tags
  #{zen-fhir/structure-definition
    zen-fhir/complex-type
    zen/schema
    zen-fhir/base},
  :fhir/type "DataRequirement",
  :require #{:type},
  :type zen/map,
  :zen/desc
  "Base StructureDefinition for DataRequirement Type: Describes a required data item for evaluation in terms of the type of data, and optional code or date-based filters of the data.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/DataRequirement",
  :keys
  {:mustSupport
   {:type zen/vector,
    :every
    {:confirms #{string},
     :type zen/string,
     :zen/desc
     "Indicates specific structure elements that are referenced by the knowledge module"}},
   :limit
   {:confirms #{positiveInt},
    :type zen/integer,
    :zen/desc "Number of results"},
   :profile
   {:type zen/vector,
    :every
    {:confirms #{canonical},
     :type zen/string,
     :zen/desc "The profile of the required data"}},
   :sort
   {:type zen/vector,
    :every
    {:confirms #{Element},
     :require #{:path :direction},
     :type zen/map,
     :zen/desc "Order of the results",
     :keys
     {:direction
      {:confirms #{code},
       :type zen/string,
       :zen/desc "ascending | descending"},
      :path
      {:confirms #{string},
       :type zen/string,
       :zen/desc "The name of the attribute to perform the sort"}}}},
   :type
   {:confirms #{code},
    :type zen/string,
    :zen/desc "The type of the required data"},
   :codeFilter
   {:type zen/vector,
    :every
    {:confirms #{Element},
     :type zen/map,
     :zen/desc "What codes are expected",
     :keys
     {:searchParam
      {:confirms #{string},
       :type zen/string,
       :zen/desc "A coded (token) parameter to search on"},
      :path
      {:confirms #{string},
       :type zen/string,
       :zen/desc "A code-valued attribute to filter on"},
      :valueSet
      {:confirms #{canonical},
       :type zen/string,
       :zen/desc "Valueset for the filter"},
      :code
      {:type zen/vector,
       :every
       {:confirms #{Coding}, :zen/desc "What code is expected"}}}}},
   :dateFilter
   {:type zen/vector,
    :every
    {:confirms #{Element},
     :type zen/map,
     :zen/desc "What dates/date ranges are expected",
     :keys
     {:value
      {:type zen/map,
       :zen/desc
       "The value of the filter, as a Period, DateTime, or Duration value",
       :keys
       {:dateTime {:confirms #{dateTime}, :type zen/datetime},
        :Period {:confirms #{Period}},
        :Duration {:confirms #{Duration}}},
       :exclusive-keys #{#{:dateTime :Period :Duration}}},
      :path
      {:confirms #{string},
       :type zen/string,
       :zen/desc "A date-valued attribute to filter on"},
      :searchParam
      {:confirms #{string},
       :type zen/string,
       :zen/desc "A date valued parameter to search on"}}}},
   :subject
   {:type zen/map,
    :zen/desc
    "E.g. Patient, Practitioner, RelatedPerson, Organization, Location, Device",
    :keys
    {:CodeableConcept {:confirms #{CodeableConcept}},
     :Reference {:confirms #{Reference}}},
    :exclusive-keys #{#{:CodeableConcept :Reference}}}}},
 Distance
 {:confirms #{Quantity},
  :zen/tags
  #{zen-fhir/structure-definition
    zen-fhir/complex-type
    zen/schema
    zen-fhir/base},
  :fhir/type "Distance",
  :type zen/map,
  :zen/desc
  "Base StructureDefinition for Distance Type: A length - a value with a unit that is a physical distance.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/Distance"},
 Dosage
 {:confirms #{BackboneElement},
  :zen/tags
  #{zen-fhir/structure-definition
    zen-fhir/complex-type
    zen/schema
    zen-fhir/base},
  :fhir/type "Dosage",
  :type zen/map,
  :zen/desc
  "Base StructureDefinition for Dosage Type: Indicates how the medication is/was taken or should be taken by the patient.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/Dosage",
  :keys
  {:site
   {:confirms #{CodeableConcept},
    :zen/desc "Body site to administer to"},
   :asNeeded
   {:type zen/map,
    :zen/desc "Take \"as needed\" (for x)",
    :keys
    {:boolean {:confirms #{boolean}, :type zen/boolean},
     :CodeableConcept {:confirms #{CodeableConcept}}},
    :exclusive-keys #{#{:CodeableConcept :boolean}}},
   :method
   {:confirms #{CodeableConcept},
    :zen/desc "Technique for administering medication"},
   :patientInstruction
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Patient or consumer oriented instructions"},
   :maxDosePerLifetime
   {:confirms #{Quantity SimpleQuantity},
    :zen/desc "Upper limit on medication per lifetime of the patient"},
   :maxDosePerAdministration
   {:confirms #{Quantity SimpleQuantity},
    :zen/desc "Upper limit on medication per administration"},
   :route
   {:confirms #{CodeableConcept},
    :zen/desc "How drug should enter body"},
   :timing
   {:confirms #{Timing},
    :zen/desc "When medication should be administered"},
   :additionalInstruction
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc
     "Supplemental instruction or warnings to the patient - e.g. \"with meals\", \"may cause drowsiness\""}},
   :sequence
   {:confirms #{integer},
    :type zen/integer,
    :zen/desc "The order of the dosage instructions"},
   :maxDosePerPeriod
   {:confirms #{Ratio},
    :zen/desc "Upper limit on medication per unit of time"},
   :doseAndRate
   {:type zen/vector,
    :every
    {:confirms #{Element},
     :type zen/map,
     :zen/desc "Amount of medication administered",
     :keys
     {:rate
      {:type zen/map,
       :zen/desc "Amount of medication per unit of time",
       :keys
       {:Ratio {:confirms #{Ratio}},
        :Range {:confirms #{Range}},
        :Quantity {:confirms #{Quantity}}},
       :exclusive-keys #{#{:Range :Ratio :Quantity}}},
      :type
      {:confirms #{CodeableConcept},
       :zen/desc "The kind of dose or rate specified"},
      :dose
      {:type zen/map,
       :zen/desc "Amount of medication per dose",
       :keys
       {:Range {:confirms #{Range}},
        :Quantity {:confirms #{Quantity}}},
       :exclusive-keys #{#{:Range :Quantity}}}}}},
   :text
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Free text dosage instructions e.g. SIG"}}},
 Duration
 {:confirms #{Quantity},
  :zen/tags
  #{zen-fhir/structure-definition
    zen-fhir/complex-type
    zen/schema
    zen-fhir/base},
  :fhir/type "Duration",
  :type zen/map,
  :zen/desc
  "Base StructureDefinition for Duration Type: A length of time.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/Duration"},
 ElementDefinition
 {:confirms #{BackboneElement},
  :zen/tags
  #{zen-fhir/structure-definition
    zen-fhir/complex-type
    zen/schema
    zen-fhir/base},
  :fhir/type "ElementDefinition",
  :require #{:path},
  :type zen/map,
  :zen/desc
  "Base StructureDefinition for ElementDefinition Type: Captures constraints on each element within the resource, profile, or extension.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/ElementDefinition",
  :keys
  {:constraint
   {:type zen/vector,
    :every
    {:confirms #{Element},
     :require #{:key :human :severity},
     :type zen/map,
     :zen/desc "Condition that must evaluate to true",
     :keys
     {:source
      {:confirms #{canonical},
       :type zen/string,
       :zen/desc "Reference to original source of constraint"},
      :requirements
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Why this constraint is necessary or appropriate"},
      :expression
      {:confirms #{string},
       :type zen/string,
       :zen/desc "FHIRPath expression of constraint"},
      :xpath
      {:confirms #{string},
       :type zen/string,
       :zen/desc "XPath expression of constraint"},
      :key
      {:confirms #{id},
       :type zen/string,
       :zen/desc "Target of 'condition' reference above"},
      :human
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Human description of constraint"},
      :severity
      {:confirms #{code},
       :type zen/string,
       :zen/desc "error | warning"}}}},
   :path
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Path of the element in the hierarchy of elements"},
   :requirements
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc "Why this resource has been created"},
   :min
   {:confirms #{unsignedInt},
    :type zen/integer,
    :zen/desc "Minimum Cardinality"},
   :definition
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc "Full formal definition as narrative text"},
   :maxValue
   {:type zen/map,
    :zen/desc "Maximum Allowed Value (for some types)",
    :keys
    {:unsignedInt {:confirms #{unsignedInt}, :type zen/integer},
     :date {:confirms #{date}, :type zen/date},
     :instant {:confirms #{instant}, :type zen/string},
     :time {:confirms #{time}, :type zen/string},
     :dateTime {:confirms #{dateTime}, :type zen/datetime},
     :integer {:confirms #{integer}, :type zen/integer},
     :decimal {:confirms #{decimal}, :type zen/number},
     :positiveInt {:confirms #{positiveInt}, :type zen/integer},
     :Quantity {:confirms #{Quantity}}},
    :exclusive-keys
    #{#{:unsignedInt
        :date
        :instant
        :time
        :dateTime
        :integer
        :decimal
        :positiveInt
        :Quantity}}},
   :isModifier
   {:confirms #{boolean},
    :type zen/boolean,
    :zen/desc "If this modifies the meaning of other elements"},
   :short
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Concise definition for space-constrained presentation"},
   :mapping
   {:type zen/vector,
    :every
    {:confirms #{Element},
     :require #{:identity :map},
     :type zen/map,
     :zen/desc "Map element to another set of definitions",
     :keys
     {:identity
      {:confirms #{id},
       :type zen/string,
       :zen/desc "Reference to mapping declaration"},
      :map
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Details of the mapping"},
      :comment
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Comments about the mapping or its use"},
      :language
      {:confirms #{code},
       :type zen/string,
       :zen/desc "Computable language of mapping"}}}},
   :contentReference
   {:confirms #{uri},
    :type zen/string,
    :zen/desc "Reference to definition of content for the element"},
   :slicing
   {:confirms #{Element},
    :require #{:rules},
    :type zen/map,
    :zen/desc "This element is sliced - slices follow",
    :keys
    {:rules
     {:confirms #{code},
      :type zen/string,
      :zen/desc "closed | open | openAtEnd"},
     :ordered
     {:confirms #{boolean},
      :type zen/boolean,
      :zen/desc "If elements must be in same order as slices"},
     :discriminator
     {:type zen/vector,
      :every
      {:confirms #{Element},
       :require #{:path :type},
       :type zen/map,
       :zen/desc
       "Element values that are used to distinguish the slices",
       :keys
       {:type
        {:confirms #{code},
         :type zen/string,
         :zen/desc "value | exists | pattern | type | profile"},
        :path
        {:confirms #{string},
         :type zen/string,
         :zen/desc "Path to element value"}}}},
     :description
     {:confirms #{string},
      :type zen/string,
      :zen/desc "Text description of how slicing works (or not)"}}},
   :type
   {:type zen/vector,
    :every
    {:confirms #{Element},
     :require #{:code},
     :type zen/map,
     :zen/desc "Data type and Profile for this element",
     :keys
     {:code
      {:confirms #{uri},
       :type zen/string,
       :zen/desc "Data type or Resource (reference to definition)"},
      :versioning
      {:confirms #{code},
       :type zen/string,
       :zen/desc "either | independent | specific"},
      :profile
      {:type zen/vector,
       :every
       {:confirms #{canonical},
        :type zen/string,
        :zen/desc
        "Profiles (StructureDefinition or IG) - one must apply"}},
      :aggregation
      {:type zen/vector,
       :every
       {:confirms #{code},
        :type zen/string,
        :zen/desc
        "contained | referenced | bundled - how aggregated"}},
      :targetProfile
      {:type zen/vector,
       :every
       {:confirms #{canonical},
        :type zen/string,
        :zen/desc
        "Profile (StructureDefinition or IG) on the Reference/canonical target - one must apply"}}}}},
   :mustSupport
   {:confirms #{boolean},
    :type zen/boolean,
    :zen/desc "If the element must be supported"},
   :minValue
   {:type zen/map,
    :zen/desc "Minimum Allowed Value (for some types)",
    :keys
    {:unsignedInt {:confirms #{unsignedInt}, :type zen/integer},
     :date {:confirms #{date}, :type zen/date},
     :instant {:confirms #{instant}, :type zen/string},
     :time {:confirms #{time}, :type zen/string},
     :dateTime {:confirms #{dateTime}, :type zen/datetime},
     :integer {:confirms #{integer}, :type zen/integer},
     :decimal {:confirms #{decimal}, :type zen/number},
     :positiveInt {:confirms #{positiveInt}, :type zen/integer},
     :Quantity {:confirms #{Quantity}}},
    :exclusive-keys
    #{#{:unsignedInt
        :date
        :instant
        :time
        :dateTime
        :integer
        :decimal
        :positiveInt
        :Quantity}}},
   :sliceName
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name for this particular element (in a set of slices)"},
   :meaningWhenMissing
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc "Implicit meaning when this element is missing"},
   :binding
   {:confirms #{Element},
    :require #{:strength},
    :type zen/map,
    :zen/desc "ValueSet details if this is coded",
    :keys
    {:valueSet
     {:confirms #{canonical},
      :type zen/string,
      :zen/desc "Source of value set"},
     :strength
     {:confirms #{code},
      :type zen/string,
      :zen/desc "required | extensible | preferred | example"},
     :description
     {:confirms #{string},
      :type zen/string,
      :zen/desc "Human explanation of the value set"}}},
   :alias
   {:type zen/vector,
    :every
    {:confirms #{string}, :type zen/string, :zen/desc "Other names"}},
   :representation
   {:type zen/vector,
    :every
    {:confirms #{code},
     :type zen/string,
     :zen/desc "xmlAttr | xmlText | typeAttr | cdaText | xhtml"}},
   :max
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Maximum Cardinality (a number or *)"},
   :label
   {:confirms #{string},
    :type zen/string,
    :zen/desc
    "Name for element to display with or prompt for element"},
   :condition
   {:type zen/vector,
    :every
    {:confirms #{id},
     :type zen/string,
     :zen/desc "Reference to invariant about presence"}},
   :comment
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc "Comments about the use of this element"},
   :code
   {:type zen/vector,
    :every
    {:confirms #{Coding},
     :zen/desc "Corresponding codes in terminologies"}},
   :maxLength
   {:confirms #{integer},
    :type zen/integer,
    :zen/desc "Max length for strings"},
   :sliceIsConstraining
   {:confirms #{boolean},
    :type zen/boolean,
    :zen/desc
    "If this slice definition constrains an inherited slice definition (or not)"},
   :example
   {:type zen/vector,
    :every
    {:confirms #{Element},
     :require #{:value :label},
     :type zen/map,
     :zen/desc "Example value (as defined for type)",
     :keys
     {:value
      {:type zen/map,
       :zen/desc "Value of Example (one of allowed types)",
       :keys
       {:unsignedInt {:confirms #{unsignedInt}, :type zen/integer},
        :Signature {:confirms #{Signature}},
        :markdown {:confirms #{markdown}, :type zen/string},
        :date {:confirms #{date}, :type zen/date},
        :Dosage {:confirms #{Dosage}},
        :ContactDetail {:confirms #{ContactDetail}},
        :RelatedArtifact {:confirms #{RelatedArtifact}},
        :instant {:confirms #{instant}, :type zen/string},
        :UsageContext {:confirms #{UsageContext}},
        :time {:confirms #{time}, :type zen/string},
        :DataRequirement {:confirms #{DataRequirement}},
        :base64Binary {:confirms #{base64Binary}, :type zen/string},
        :Meta {:confirms #{Meta}},
        :Distance {:confirms #{Distance}},
        :SampledData {:confirms #{SampledData}},
        :TriggerDefinition {:confirms #{TriggerDefinition}},
        :Identifier {:confirms #{Identifier}},
        :string {:confirms #{string}, :type zen/string},
        :Address {:confirms #{Address}},
        :Expression {:confirms #{Expression}},
        :dateTime {:confirms #{dateTime}, :type zen/datetime},
        :Range {:confirms #{Range}},
        :integer {:confirms #{integer}, :type zen/integer},
        :Ratio {:confirms #{Ratio}},
        :oid {:confirms #{oid}, :type zen/string},
        :ContactPoint {:confirms #{ContactPoint}},
        :Money {:confirms #{Money}},
        :decimal {:confirms #{decimal}, :type zen/number},
        :id {:confirms #{id}, :type zen/string},
        :Attachment {:confirms #{Attachment}},
        :Contributor {:confirms #{Contributor}},
        :Period {:confirms #{Period}},
        :canonical {:confirms #{canonical}, :type zen/string},
        :url {:confirms #{url}, :type zen/string},
        :code {:confirms #{code}, :type zen/string},
        :HumanName {:confirms #{HumanName}},
        :positiveInt {:confirms #{positiveInt}, :type zen/integer},
        :ParameterDefinition {:confirms #{ParameterDefinition}},
        :Coding {:confirms #{Coding}},
        :Timing {:confirms #{Timing}},
        :Duration {:confirms #{Duration}},
        :uri {:confirms #{uri}, :type zen/string},
        :CodeableConcept {:confirms #{CodeableConcept}},
        :uuid {:confirms #{uuid}, :type zen/string},
        :Count {:confirms #{Count}},
        :Quantity {:confirms #{Quantity}},
        :boolean {:confirms #{boolean}, :type zen/boolean},
        :Annotation {:confirms #{Annotation}},
        :Age {:confirms #{Age}},
        :Reference {:confirms #{Reference}}},
       :exclusive-keys
       #{#{:unsignedInt
           :Signature
           :markdown
           :date
           :Dosage
           :ContactDetail
           :RelatedArtifact
           :instant
           :UsageContext
           :time
           :DataRequirement
           :base64Binary
           :Meta
           :Distance
           :SampledData
           :TriggerDefinition
           :Identifier
           :string
           :Address
           :Expression
           :dateTime
           :Range
           :integer
           :Ratio
           :oid
           :ContactPoint
           :Money
           :decimal
           :id
           :Attachment
           :Contributor
           :Period
           :canonical
           :url
           :code
           :HumanName
           :positiveInt
           :ParameterDefinition
           :Coding
           :Timing
           :Duration
           :uri
           :CodeableConcept
           :uuid
           :Count
           :Quantity
           :boolean
           :Annotation
           :Age
           :Reference}}},
      :label
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Describes the purpose of this example"}}}},
   :orderMeaning
   {:confirms #{string},
    :type zen/string,
    :zen/desc "What the order of the elements means"},
   :defaultValue
   {:type zen/map,
    :zen/desc "Specified value if missing from instance",
    :keys
    {:unsignedInt {:confirms #{unsignedInt}, :type zen/integer},
     :Signature {:confirms #{Signature}},
     :markdown {:confirms #{markdown}, :type zen/string},
     :date {:confirms #{date}, :type zen/date},
     :Dosage {:confirms #{Dosage}},
     :ContactDetail {:confirms #{ContactDetail}},
     :RelatedArtifact {:confirms #{RelatedArtifact}},
     :instant {:confirms #{instant}, :type zen/string},
     :UsageContext {:confirms #{UsageContext}},
     :time {:confirms #{time}, :type zen/string},
     :DataRequirement {:confirms #{DataRequirement}},
     :base64Binary {:confirms #{base64Binary}, :type zen/string},
     :Meta {:confirms #{Meta}},
     :Distance {:confirms #{Distance}},
     :SampledData {:confirms #{SampledData}},
     :TriggerDefinition {:confirms #{TriggerDefinition}},
     :Identifier {:confirms #{Identifier}},
     :string {:confirms #{string}, :type zen/string},
     :Address {:confirms #{Address}},
     :Expression {:confirms #{Expression}},
     :dateTime {:confirms #{dateTime}, :type zen/datetime},
     :Range {:confirms #{Range}},
     :integer {:confirms #{integer}, :type zen/integer},
     :Ratio {:confirms #{Ratio}},
     :oid {:confirms #{oid}, :type zen/string},
     :ContactPoint {:confirms #{ContactPoint}},
     :Money {:confirms #{Money}},
     :decimal {:confirms #{decimal}, :type zen/number},
     :id {:confirms #{id}, :type zen/string},
     :Attachment {:confirms #{Attachment}},
     :Contributor {:confirms #{Contributor}},
     :Period {:confirms #{Period}},
     :canonical {:confirms #{canonical}, :type zen/string},
     :url {:confirms #{url}, :type zen/string},
     :code {:confirms #{code}, :type zen/string},
     :HumanName {:confirms #{HumanName}},
     :positiveInt {:confirms #{positiveInt}, :type zen/integer},
     :ParameterDefinition {:confirms #{ParameterDefinition}},
     :Coding {:confirms #{Coding}},
     :Timing {:confirms #{Timing}},
     :Duration {:confirms #{Duration}},
     :uri {:confirms #{uri}, :type zen/string},
     :CodeableConcept {:confirms #{CodeableConcept}},
     :uuid {:confirms #{uuid}, :type zen/string},
     :Count {:confirms #{Count}},
     :Quantity {:confirms #{Quantity}},
     :boolean {:confirms #{boolean}, :type zen/boolean},
     :Annotation {:confirms #{Annotation}},
     :Age {:confirms #{Age}},
     :Reference {:confirms #{Reference}}},
    :exclusive-keys
    #{#{:unsignedInt
        :Signature
        :markdown
        :date
        :Dosage
        :ContactDetail
        :RelatedArtifact
        :instant
        :UsageContext
        :time
        :DataRequirement
        :base64Binary
        :Meta
        :Distance
        :SampledData
        :TriggerDefinition
        :Identifier
        :string
        :Address
        :Expression
        :dateTime
        :Range
        :integer
        :Ratio
        :oid
        :ContactPoint
        :Money
        :decimal
        :id
        :Attachment
        :Contributor
        :Period
        :canonical
        :url
        :code
        :HumanName
        :positiveInt
        :ParameterDefinition
        :Coding
        :Timing
        :Duration
        :uri
        :CodeableConcept
        :uuid
        :Count
        :Quantity
        :boolean
        :Annotation
        :Age
        :Reference}}},
   :fixed
   {:type zen/map,
    :zen/desc "Value must be exactly this",
    :keys
    {:unsignedInt {:confirms #{unsignedInt}, :type zen/integer},
     :Signature {:confirms #{Signature}},
     :markdown {:confirms #{markdown}, :type zen/string},
     :date {:confirms #{date}, :type zen/date},
     :Dosage {:confirms #{Dosage}},
     :ContactDetail {:confirms #{ContactDetail}},
     :RelatedArtifact {:confirms #{RelatedArtifact}},
     :instant {:confirms #{instant}, :type zen/string},
     :UsageContext {:confirms #{UsageContext}},
     :time {:confirms #{time}, :type zen/string},
     :DataRequirement {:confirms #{DataRequirement}},
     :base64Binary {:confirms #{base64Binary}, :type zen/string},
     :Meta {:confirms #{Meta}},
     :Distance {:confirms #{Distance}},
     :SampledData {:confirms #{SampledData}},
     :TriggerDefinition {:confirms #{TriggerDefinition}},
     :Identifier {:confirms #{Identifier}},
     :string {:confirms #{string}, :type zen/string},
     :Address {:confirms #{Address}},
     :Expression {:confirms #{Expression}},
     :dateTime {:confirms #{dateTime}, :type zen/datetime},
     :Range {:confirms #{Range}},
     :integer {:confirms #{integer}, :type zen/integer},
     :Ratio {:confirms #{Ratio}},
     :oid {:confirms #{oid}, :type zen/string},
     :ContactPoint {:confirms #{ContactPoint}},
     :Money {:confirms #{Money}},
     :decimal {:confirms #{decimal}, :type zen/number},
     :id {:confirms #{id}, :type zen/string},
     :Attachment {:confirms #{Attachment}},
     :Contributor {:confirms #{Contributor}},
     :Period {:confirms #{Period}},
     :canonical {:confirms #{canonical}, :type zen/string},
     :url {:confirms #{url}, :type zen/string},
     :code {:confirms #{code}, :type zen/string},
     :HumanName {:confirms #{HumanName}},
     :positiveInt {:confirms #{positiveInt}, :type zen/integer},
     :ParameterDefinition {:confirms #{ParameterDefinition}},
     :Coding {:confirms #{Coding}},
     :Timing {:confirms #{Timing}},
     :Duration {:confirms #{Duration}},
     :uri {:confirms #{uri}, :type zen/string},
     :CodeableConcept {:confirms #{CodeableConcept}},
     :uuid {:confirms #{uuid}, :type zen/string},
     :Count {:confirms #{Count}},
     :Quantity {:confirms #{Quantity}},
     :boolean {:confirms #{boolean}, :type zen/boolean},
     :Annotation {:confirms #{Annotation}},
     :Age {:confirms #{Age}},
     :Reference {:confirms #{Reference}}},
    :exclusive-keys
    #{#{:unsignedInt
        :Signature
        :markdown
        :date
        :Dosage
        :ContactDetail
        :RelatedArtifact
        :instant
        :UsageContext
        :time
        :DataRequirement
        :base64Binary
        :Meta
        :Distance
        :SampledData
        :TriggerDefinition
        :Identifier
        :string
        :Address
        :Expression
        :dateTime
        :Range
        :integer
        :Ratio
        :oid
        :ContactPoint
        :Money
        :decimal
        :id
        :Attachment
        :Contributor
        :Period
        :canonical
        :url
        :code
        :HumanName
        :positiveInt
        :ParameterDefinition
        :Coding
        :Timing
        :Duration
        :uri
        :CodeableConcept
        :uuid
        :Count
        :Quantity
        :boolean
        :Annotation
        :Age
        :Reference}}},
   :base
   {:confirms #{Element},
    :require #{:path :min :max},
    :type zen/map,
    :zen/desc "Base definition information for tools",
    :keys
    {:max
     {:confirms #{string},
      :type zen/string,
      :zen/desc "Max cardinality of the base element"},
     :path
     {:confirms #{string},
      :type zen/string,
      :zen/desc "Path that identifies the base element"},
     :min
     {:confirms #{unsignedInt},
      :type zen/integer,
      :zen/desc "Min cardinality of the base element"}}},
   :isModifierReason
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Reason that this element is marked as a modifier"},
   :isSummary
   {:confirms #{boolean},
    :type zen/boolean,
    :zen/desc "Include when _summary = true?"},
   :pattern
   {:type zen/map,
    :zen/desc "Value must have at least these property values",
    :keys
    {:unsignedInt {:confirms #{unsignedInt}, :type zen/integer},
     :Signature {:confirms #{Signature}},
     :markdown {:confirms #{markdown}, :type zen/string},
     :date {:confirms #{date}, :type zen/date},
     :Dosage {:confirms #{Dosage}},
     :ContactDetail {:confirms #{ContactDetail}},
     :RelatedArtifact {:confirms #{RelatedArtifact}},
     :instant {:confirms #{instant}, :type zen/string},
     :UsageContext {:confirms #{UsageContext}},
     :time {:confirms #{time}, :type zen/string},
     :DataRequirement {:confirms #{DataRequirement}},
     :base64Binary {:confirms #{base64Binary}, :type zen/string},
     :Meta {:confirms #{Meta}},
     :Distance {:confirms #{Distance}},
     :SampledData {:confirms #{SampledData}},
     :TriggerDefinition {:confirms #{TriggerDefinition}},
     :Identifier {:confirms #{Identifier}},
     :string {:confirms #{string}, :type zen/string},
     :Address {:confirms #{Address}},
     :Expression {:confirms #{Expression}},
     :dateTime {:confirms #{dateTime}, :type zen/datetime},
     :Range {:confirms #{Range}},
     :integer {:confirms #{integer}, :type zen/integer},
     :Ratio {:confirms #{Ratio}},
     :oid {:confirms #{oid}, :type zen/string},
     :ContactPoint {:confirms #{ContactPoint}},
     :Money {:confirms #{Money}},
     :decimal {:confirms #{decimal}, :type zen/number},
     :id {:confirms #{id}, :type zen/string},
     :Attachment {:confirms #{Attachment}},
     :Contributor {:confirms #{Contributor}},
     :Period {:confirms #{Period}},
     :canonical {:confirms #{canonical}, :type zen/string},
     :url {:confirms #{url}, :type zen/string},
     :code {:confirms #{code}, :type zen/string},
     :HumanName {:confirms #{HumanName}},
     :positiveInt {:confirms #{positiveInt}, :type zen/integer},
     :ParameterDefinition {:confirms #{ParameterDefinition}},
     :Coding {:confirms #{Coding}},
     :Timing {:confirms #{Timing}},
     :Duration {:confirms #{Duration}},
     :uri {:confirms #{uri}, :type zen/string},
     :CodeableConcept {:confirms #{CodeableConcept}},
     :uuid {:confirms #{uuid}, :type zen/string},
     :Count {:confirms #{Count}},
     :Quantity {:confirms #{Quantity}},
     :boolean {:confirms #{boolean}, :type zen/boolean},
     :Annotation {:confirms #{Annotation}},
     :Age {:confirms #{Age}},
     :Reference {:confirms #{Reference}}},
    :exclusive-keys
    #{#{:unsignedInt
        :Signature
        :markdown
        :date
        :Dosage
        :ContactDetail
        :RelatedArtifact
        :instant
        :UsageContext
        :time
        :DataRequirement
        :base64Binary
        :Meta
        :Distance
        :SampledData
        :TriggerDefinition
        :Identifier
        :string
        :Address
        :Expression
        :dateTime
        :Range
        :integer
        :Ratio
        :oid
        :ContactPoint
        :Money
        :decimal
        :id
        :Attachment
        :Contributor
        :Period
        :canonical
        :url
        :code
        :HumanName
        :positiveInt
        :ParameterDefinition
        :Coding
        :Timing
        :Duration
        :uri
        :CodeableConcept
        :uuid
        :Count
        :Quantity
        :boolean
        :Annotation
        :Age
        :Reference}}}}},
 Expression
 {:confirms #{Element},
  :zen/tags
  #{zen-fhir/structure-definition
    zen-fhir/complex-type
    zen/schema
    zen-fhir/base},
  :fhir/type "Expression",
  :require #{:language},
  :type zen/map,
  :zen/desc
  "Base StructureDefinition for Expression Type: A expression that is evaluated in a specified context and returns a value. The context of use of the expression must specify the context in which the expression is evaluated, and how the result of the expression is used.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/Expression",
  :keys
  {:name
   {:confirms #{id},
    :type zen/string,
    :zen/desc "Short name assigned to expression for reuse"},
   :description
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Natural language description of the condition"},
   :reference
   {:confirms #{uri},
    :type zen/string,
    :zen/desc "Where the expression is found"},
   :language
   {:confirms #{code},
    :type zen/string,
    :zen/desc
    "text/cql | text/fhirpath | application/x-fhir-query | etc."},
   :expression
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Expression in specified language"}}},
 Extension
 {:confirms #{Element},
  :zen/tags
  #{zen-fhir/structure-definition
    zen-fhir/complex-type
    zen/schema
    zen-fhir/base},
  :fhir/type "Extension",
  :require #{:url},
  :type zen/map,
  :zen/desc
  "Base StructureDefinition for Extension Type: Optional Extension Element - found in all resources.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/Extension",
  :keys
  {:url
   {:confirms #{uri},
    :type zen/string,
    :zen/desc "identifies the meaning of the extension"},
   :value
   {:type zen/map,
    :zen/desc "Value of extension",
    :keys
    {:unsignedInt {:confirms #{unsignedInt}, :type zen/integer},
     :Signature {:confirms #{Signature}},
     :markdown {:confirms #{markdown}, :type zen/string},
     :date {:confirms #{date}, :type zen/date},
     :Dosage {:confirms #{Dosage}},
     :ContactDetail {:confirms #{ContactDetail}},
     :RelatedArtifact {:confirms #{RelatedArtifact}},
     :instant {:confirms #{instant}, :type zen/string},
     :UsageContext {:confirms #{UsageContext}},
     :time {:confirms #{time}, :type zen/string},
     :DataRequirement {:confirms #{DataRequirement}},
     :base64Binary {:confirms #{base64Binary}, :type zen/string},
     :Meta {:confirms #{Meta}},
     :Distance {:confirms #{Distance}},
     :SampledData {:confirms #{SampledData}},
     :TriggerDefinition {:confirms #{TriggerDefinition}},
     :Identifier {:confirms #{Identifier}},
     :string {:confirms #{string}, :type zen/string},
     :Address {:confirms #{Address}},
     :Expression {:confirms #{Expression}},
     :dateTime {:confirms #{dateTime}, :type zen/datetime},
     :Range {:confirms #{Range}},
     :integer {:confirms #{integer}, :type zen/integer},
     :Ratio {:confirms #{Ratio}},
     :oid {:confirms #{oid}, :type zen/string},
     :ContactPoint {:confirms #{ContactPoint}},
     :Money {:confirms #{Money}},
     :decimal {:confirms #{decimal}, :type zen/number},
     :id {:confirms #{id}, :type zen/string},
     :Attachment {:confirms #{Attachment}},
     :Contributor {:confirms #{Contributor}},
     :Period {:confirms #{Period}},
     :canonical {:confirms #{canonical}, :type zen/string},
     :url {:confirms #{url}, :type zen/string},
     :code {:confirms #{code}, :type zen/string},
     :HumanName {:confirms #{HumanName}},
     :positiveInt {:confirms #{positiveInt}, :type zen/integer},
     :ParameterDefinition {:confirms #{ParameterDefinition}},
     :Coding {:confirms #{Coding}},
     :Timing {:confirms #{Timing}},
     :Duration {:confirms #{Duration}},
     :uri {:confirms #{uri}, :type zen/string},
     :CodeableConcept {:confirms #{CodeableConcept}},
     :uuid {:confirms #{uuid}, :type zen/string},
     :Count {:confirms #{Count}},
     :Quantity {:confirms #{Quantity}},
     :boolean {:confirms #{boolean}, :type zen/boolean},
     :Annotation {:confirms #{Annotation}},
     :Age {:confirms #{Age}},
     :Reference {:confirms #{Reference}}},
    :exclusive-keys
    #{#{:unsignedInt
        :Signature
        :markdown
        :date
        :Dosage
        :ContactDetail
        :RelatedArtifact
        :instant
        :UsageContext
        :time
        :DataRequirement
        :base64Binary
        :Meta
        :Distance
        :SampledData
        :TriggerDefinition
        :Identifier
        :string
        :Address
        :Expression
        :dateTime
        :Range
        :integer
        :Ratio
        :oid
        :ContactPoint
        :Money
        :decimal
        :id
        :Attachment
        :Contributor
        :Period
        :canonical
        :url
        :code
        :HumanName
        :positiveInt
        :ParameterDefinition
        :Coding
        :Timing
        :Duration
        :uri
        :CodeableConcept
        :uuid
        :Count
        :Quantity
        :boolean
        :Annotation
        :Age
        :Reference}}}}},
 HumanName
 {:confirms #{Element},
  :zen/tags
  #{zen-fhir/structure-definition
    zen-fhir/complex-type
    zen/schema
    zen-fhir/base},
  :fhir/type "HumanName",
  :type zen/map,
  :zen/desc
  "Base StructureDefinition for HumanName Type: A human's name with the ability to identify parts and usage.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/HumanName",
  :keys
  {:period
   {:confirms #{Period},
    :zen/desc "Time period when name was/is in use"},
   :suffix
   {:type zen/vector,
    :every
    {:confirms #{string},
     :type zen/string,
     :zen/desc "Parts that come after the name"}},
   :use
   {:confirms #{code},
    :type zen/string,
    :zen/desc
    "usual | official | temp | nickname | anonymous | old | maiden"},
   :text
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Text representation of the full name"},
   :prefix
   {:type zen/vector,
    :every
    {:confirms #{string},
     :type zen/string,
     :zen/desc "Parts that come before the name"}},
   :given
   {:type zen/vector,
    :every
    {:confirms #{string},
     :type zen/string,
     :zen/desc
     "Given names (not always 'first'). Includes middle names"}},
   :family
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Family name (often called 'Surname')"}}},
 Identifier
 {:confirms #{Element},
  :zen/tags
  #{zen-fhir/structure-definition
    zen-fhir/complex-type
    zen/schema
    zen-fhir/base},
  :fhir/type "Identifier",
  :type zen/map,
  :zen/desc
  "Base StructureDefinition for Identifier Type: An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/Identifier",
  :keys
  {:use
   {:confirms #{code},
    :type zen/string,
    :zen/desc "usual | official | temp | secondary | old (If known)"},
   :type
   {:confirms #{CodeableConcept},
    :zen/desc "Description of identifier"},
   :system
   {:confirms #{uri},
    :type zen/string,
    :zen/desc "The namespace for the identifier value"},
   :value
   {:confirms #{string},
    :type zen/string,
    :zen/desc "The value that is unique"},
   :period
   {:confirms #{Period},
    :zen/desc "Time period when id is/was valid for use"},
   :assigner
   {:confirms #{Reference},
    :zen/desc "Organization that issued id (may be just text)"}}},
 MarketingStatus
 {:confirms #{BackboneElement},
  :zen/tags
  #{zen-fhir/structure-definition
    zen-fhir/complex-type
    zen/schema
    zen-fhir/base},
  :fhir/type "MarketingStatus",
  :require #{:dateRange :status :country},
  :type zen/map,
  :zen/desc
  "Base StructureDefinition for MarketingStatus Type: The marketing status describes the date when a medicinal product is actually put on the market or the date as of which it is no longer available.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/MarketingStatus",
  :keys
  {:status
   {:confirms #{CodeableConcept},
    :zen/desc
    "This attribute provides information on the status of the marketing of the medicinal product See ISO/TS 20443 for more information and examples"},
   :dateRange
   {:confirms #{Period},
    :zen/desc
    "The date when the Medicinal Product is placed on the market by the Marketing Authorisation Holder (or where applicable, the manufacturer/distributor) in a country and/or jurisdiction shall be provided A complete date consisting of day, month and year shall be specified using the ISO 8601 date format NOTE “Placed on the market” refers to the release of the Medicinal Product into the distribution chain"},
   :restoreDate
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc
    "The date when the Medicinal Product is placed on the market by the Marketing Authorisation Holder (or where applicable, the manufacturer/distributor) in a country and/or jurisdiction shall be provided A complete date consisting of day, month and year shall be specified using the ISO 8601 date format NOTE “Placed on the market” refers to the release of the Medicinal Product into the distribution chain"},
   :jurisdiction
   {:confirms #{CodeableConcept},
    :zen/desc
    "Where a Medicines Regulatory Agency has granted a marketing authorisation for which specific provisions within a jurisdiction apply, the jurisdiction can be specified using an appropriate controlled terminology The controlled term and the controlled term identifier shall be specified"},
   :country
   {:confirms #{CodeableConcept},
    :zen/desc
    "The country in which the marketing authorisation has been granted shall be specified It should be specified using the ISO 3166 ‑ 1 alpha-2 code elements"}}},
 Meta
 {:confirms #{Element},
  :zen/tags
  #{zen-fhir/structure-definition
    zen-fhir/complex-type
    zen/schema
    zen-fhir/base},
  :fhir/type "Meta",
  :type zen/map,
  :zen/desc
  "Base StructureDefinition for Meta Type: The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url "http://hl7.org/fhir/StructureDefinition/Meta",
  :keys
  {:versionId
   {:confirms #{id},
    :type zen/string,
    :zen/desc "Version specific identifier"},
   :source
   {:confirms #{uri},
    :type zen/string,
    :zen/desc "Identifies where the resource comes from"},
   :lastUpdated
   {:confirms #{instant},
    :type zen/string,
    :zen/desc "When the resource version last changed"},
   :security
   {:type zen/vector,
    :every
    {:confirms #{Coding},
     :zen/desc "Security Labels applied to this resource"}},
   :profile
   {:type zen/vector,
    :every
    {:confirms #{canonical},
     :type zen/string,
     :zen/desc "Profiles this resource claims to conform to"}},
   :tag
   {:type zen/vector,
    :every
    {:confirms #{Coding}, :zen/desc "Tags applied to this resource"}},
   :createdAt
   {:confirms #{instant},
    :type zen/string,
    :zen/desc "When the resource was created"}}},
 Money
 {:confirms #{Element},
  :zen/tags
  #{zen-fhir/structure-definition
    zen-fhir/complex-type
    zen/schema
    zen-fhir/base},
  :fhir/type "Money",
  :type zen/map,
  :zen/desc
  "Base StructureDefinition for Money Type: An amount of economic utility in some recognized currency.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url "http://hl7.org/fhir/StructureDefinition/Money",
  :keys
  {:currency
   {:confirms #{code},
    :type zen/string,
    :zen/desc "ISO 4217 Currency Code"},
   :value
   {:confirms #{decimal},
    :type zen/number,
    :zen/desc "Numerical value (with implicit precision)"}}},
 MoneyQuantity
 {:confirms #{Quantity},
  :zen/tags
  #{zen-fhir/structure-definition
    zen-fhir/complex-type
    zen/schema
    zen-fhir/profile},
  :fhir/type "Quantity",
  :type zen/map,
  :zen/desc
  "An amount of money. With regard to precision, see [Decimal Precision](datatypes.html#precision)",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/MoneyQuantity"},
 Narrative
 {:confirms #{Element},
  :zen/tags
  #{zen-fhir/structure-definition
    zen-fhir/complex-type
    zen/schema
    zen-fhir/base},
  :fhir/type "Narrative",
  :require #{:div :status},
  :type zen/map,
  :zen/desc
  "Base StructureDefinition for Narrative Type: A human-readable summary of the resource conveying the essential clinical and business information for the resource.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/Narrative",
  :keys
  {:div
   {:confirms #{xhtml},
    :type zen/string,
    :zen/desc "Limited xhtml content"},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc "generated | extensions | additional | empty"}}},
 ParameterDefinition
 {:confirms #{Element},
  :zen/tags
  #{zen-fhir/structure-definition
    zen-fhir/complex-type
    zen/schema
    zen-fhir/base},
  :fhir/type "ParameterDefinition",
  :require #{:use :type},
  :type zen/map,
  :zen/desc
  "Base StructureDefinition for ParameterDefinition Type: The parameters to the module. This collection specifies both the input and output parameters. Input parameters are provided by the caller as part of the $evaluate operation. Output parameters are included in the GuidanceResponse.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/ParameterDefinition",
  :keys
  {:use {:confirms #{code}, :type zen/string, :zen/desc "in | out"},
   :max
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Maximum cardinality (a number of *)"},
   :profile
   {:confirms #{canonical},
    :type zen/string,
    :zen/desc "What profile the value is expected to be"},
   :name
   {:confirms #{code},
    :type zen/string,
    :zen/desc "Name used to access the parameter value"},
   :type
   {:confirms #{code},
    :type zen/string,
    :zen/desc "What type of value"},
   :documentation
   {:confirms #{string},
    :type zen/string,
    :zen/desc "A brief description of the parameter"},
   :min
   {:confirms #{integer},
    :type zen/integer,
    :zen/desc "Minimum cardinality"}}},
 Period
 {:confirms #{Element},
  :zen/tags
  #{zen-fhir/structure-definition
    zen-fhir/complex-type
    zen/schema
    zen-fhir/base},
  :fhir/type "Period",
  :type zen/map,
  :zen/desc
  "Base StructureDefinition for Period Type: A time period defined by a start and end date and optionally time.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/Period",
  :keys
  {:end
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "End time with inclusive boundary, if not ongoing"},
   :start
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "Starting time with inclusive boundary"}}},
 Population
 {:confirms #{BackboneElement},
  :zen/tags
  #{zen-fhir/structure-definition
    zen-fhir/complex-type
    zen/schema
    zen-fhir/base},
  :fhir/type "Population",
  :type zen/map,
  :zen/desc
  "Base StructureDefinition for Population Type: A populatioof people with some set of grouping criteria.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/Population",
  :keys
  {:age
   {:type zen/map,
    :zen/desc "The age of the specific population",
    :keys
    {:Range {:confirms #{Range}},
     :CodeableConcept {:confirms #{CodeableConcept}}},
    :exclusive-keys #{#{:Range :CodeableConcept}}},
   :race
   {:confirms #{CodeableConcept},
    :zen/desc "Race of the specific population"},
   :physiologicalCondition
   {:confirms #{CodeableConcept},
    :zen/desc
    "The existing physiological conditions of the specific population to which this applies"},
   :gender
   {:confirms #{CodeableConcept},
    :zen/desc "The gender of the specific population"}}},
 ProdCharacteristic
 {:confirms #{BackboneElement},
  :zen/tags
  #{zen-fhir/structure-definition
    zen-fhir/complex-type
    zen/schema
    zen-fhir/base},
  :fhir/type "ProdCharacteristic",
  :type zen/map,
  :zen/desc
  "Base StructureDefinition for ProdCharacteristic Type: The marketing status describes the date when a medicinal product is actually put on the market or the date as of which it is no longer available.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/ProdCharacteristic",
  :keys
  {:imprint
   {:type zen/vector,
    :every
    {:confirms #{string},
     :type zen/string,
     :zen/desc
     "Where applicable, the imprint can be specified as text"}},
   :color
   {:type zen/vector,
    :every
    {:confirms #{string},
     :type zen/string,
     :zen/desc
     "Where applicable, the color can be specified An appropriate controlled vocabulary shall be used The term and the term identifier shall be used"}},
   :width
   {:confirms #{Quantity},
    :zen/desc
    "Where applicable, the width can be specified using a numerical value and its unit of measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used"},
   :nominalVolume
   {:confirms #{Quantity},
    :zen/desc
    "Where applicable, the nominal volume can be specified using a numerical value and its unit of measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used"},
   :weight
   {:confirms #{Quantity},
    :zen/desc
    "Where applicable, the weight can be specified using a numerical value and its unit of measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used"},
   :shape
   {:confirms #{string},
    :type zen/string,
    :zen/desc
    "Where applicable, the shape can be specified An appropriate controlled vocabulary shall be used The term and the term identifier shall be used"},
   :scoring
   {:confirms #{CodeableConcept},
    :zen/desc
    "Where applicable, the scoring can be specified An appropriate controlled vocabulary shall be used The term and the term identifier shall be used"},
   :image
   {:type zen/vector,
    :every
    {:confirms #{Attachment},
     :zen/desc
     "Where applicable, the image can be provided The format of the image attachment shall be specified by regional implementations"}},
   :depth
   {:confirms #{Quantity},
    :zen/desc
    "Where applicable, the depth can be specified using a numerical value and its unit of measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used"},
   :externalDiameter
   {:confirms #{Quantity},
    :zen/desc
    "Where applicable, the external diameter can be specified using a numerical value and its unit of measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used"},
   :height
   {:confirms #{Quantity},
    :zen/desc
    "Where applicable, the height can be specified using a numerical value and its unit of measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used"}}},
 ProductShelfLife
 {:confirms #{BackboneElement},
  :zen/tags
  #{zen-fhir/structure-definition
    zen-fhir/complex-type
    zen/schema
    zen-fhir/base},
  :fhir/type "ProductShelfLife",
  :require #{:type :period},
  :type zen/map,
  :zen/desc
  "Base StructureDefinition for ProductShelfLife Type: The shelf-life and storage information for a medicinal product item or container can be described using this class.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/ProductShelfLife",
  :keys
  {:specialPrecautionsForStorage
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc
     "Special precautions for storage, if any, can be specified using an appropriate controlled vocabulary The controlled term and the controlled term identifier shall be specified"}},
   :period
   {:confirms #{Quantity},
    :zen/desc
    "The shelf life time period can be specified using a numerical value for the period of time and its unit of time measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used"},
   :type
   {:confirms #{CodeableConcept},
    :zen/desc
    "This describes the shelf life, taking into account various scenarios such as shelf life of the packaged Medicinal Product itself, shelf life after transformation where necessary and shelf life after the first opening of a bottle, etc. The shelf life type shall be specified using an appropriate controlled vocabulary The controlled term and the controlled term identifier shall be specified"},
   :identifier
   {:confirms #{Identifier},
    :zen/desc
    "Unique identifier for the packaged Medicinal Product"}}},
 Quantity
 {:confirms #{Element},
  :zen/tags
  #{zen-fhir/structure-definition
    zen-fhir/complex-type
    zen/schema
    zen-fhir/base},
  :fhir/type "Quantity",
  :type zen/map,
  :zen/desc
  "Base StructureDefinition for Quantity Type: A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/Quantity",
  :keys
  {:comparator
   {:confirms #{code},
    :type zen/string,
    :zen/desc "< | <= | >= | > - how to understand the value"},
   :code
   {:confirms #{code},
    :type zen/string,
    :zen/desc "Coded form of the unit"},
   :system
   {:confirms #{uri},
    :type zen/string,
    :zen/desc "System that defines coded unit form"},
   :unit
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Unit representation"},
   :value
   {:confirms #{decimal},
    :type zen/number,
    :zen/desc "Numerical value (with implicit precision)"}}},
 Range
 {:confirms #{Element},
  :zen/tags
  #{zen-fhir/structure-definition
    zen-fhir/complex-type
    zen/schema
    zen-fhir/base},
  :fhir/type "Range",
  :type zen/map,
  :zen/desc
  "Base StructureDefinition for Range Type: A set of ordered Quantities defined by a low and high limit.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url "http://hl7.org/fhir/StructureDefinition/Range",
  :keys
  {:low {:confirms #{Quantity SimpleQuantity}, :zen/desc "Low limit"},
   :high
   {:confirms #{Quantity SimpleQuantity}, :zen/desc "High limit"}}},
 Ratio
 {:confirms #{Element},
  :zen/tags
  #{zen-fhir/structure-definition
    zen-fhir/complex-type
    zen/schema
    zen-fhir/base},
  :fhir/type "Ratio",
  :type zen/map,
  :zen/desc
  "Base StructureDefinition for Ratio Type: A relationship of two Quantity values - expressed as a numerator and a denominator.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url "http://hl7.org/fhir/StructureDefinition/Ratio",
  :keys
  {:denominator {:confirms #{Quantity}, :zen/desc "Denominator value"},
   :numerator {:confirms #{Quantity}, :zen/desc "Numerator value"}}},
 Reference
 {:confirms #{Element},
  :zen/tags
  #{zen-fhir/structure-definition
    zen-fhir/complex-type
    zen/schema
    zen-fhir/base},
  :fhir/type "Reference",
  :type zen/map,
  :zen/desc
  "Base StructureDefinition for Reference Type: A reference from one resource to another.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/Reference",
  :keys
  {:reference
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Literal reference, Relative, internal or absolute URL"},
   :type
   {:confirms #{uri},
    :type zen/string,
    :zen/desc "Type the reference refers to (e.g. \"Patient\")"},
   :identifier
   {:confirms #{Identifier},
    :zen/desc
    "Logical reference, when literal reference is not known"},
   :display
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Text alternative for the resource"},
   :id
   {:confirms #{id},
    :type zen/string,
    :zen/desc "ID of the referred resource"},
   :resourceType
   {:confirms #{uri},
    :type zen/string,
    :zen/desc "Type the reference refers to"}}},
 RelatedArtifact
 {:confirms #{Element},
  :zen/tags
  #{zen-fhir/structure-definition
    zen-fhir/complex-type
    zen/schema
    zen-fhir/base},
  :fhir/type "RelatedArtifact",
  :require #{:type},
  :type zen/map,
  :zen/desc
  "Base StructureDefinition for RelatedArtifact Type: Related artifacts such as additional documentation, justification, or bibliographic references.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/RelatedArtifact",
  :keys
  {:display
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Brief description of the related artifact"},
   :url
   {:confirms #{url},
    :type zen/string,
    :zen/desc "Where the artifact can be accessed"},
   :resource
   {:confirms #{canonical},
    :type zen/string,
    :zen/desc "What resource is being referenced"},
   :citation
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc "Bibliographic citation for the artifact"},
   :type
   {:confirms #{code},
    :type zen/string,
    :zen/desc
    "documentation | justification | citation | predecessor | successor | derived-from | depends-on | composed-of"},
   :label
   {:confirms #{string}, :type zen/string, :zen/desc "Short label"},
   :document
   {:confirms #{Attachment},
    :zen/desc "What document is being referenced"}}},
 SampledData
 {:confirms #{Element},
  :zen/tags
  #{zen-fhir/structure-definition
    zen-fhir/complex-type
    zen/schema
    zen-fhir/base},
  :fhir/type "SampledData",
  :require #{:dimensions :origin :period},
  :type zen/map,
  :zen/desc
  "Base StructureDefinition for SampledData Type: A series of measurements taken by a device, with upper and lower limits. There may be more than one dimension in the data.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/SampledData",
  :keys
  {:origin
   {:confirms #{Quantity SimpleQuantity},
    :zen/desc "Zero value and units"},
   :data
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Decimal values with spaces, or \"E\" | \"U\" | \"L\""},
   :upperLimit
   {:confirms #{decimal},
    :type zen/number,
    :zen/desc "Upper limit of detection"},
   :lowerLimit
   {:confirms #{decimal},
    :type zen/number,
    :zen/desc "Lower limit of detection"},
   :factor
   {:confirms #{decimal},
    :type zen/number,
    :zen/desc "Multiply data by this before adding to origin"},
   :period
   {:confirms #{decimal},
    :type zen/number,
    :zen/desc "Number of milliseconds between samples"},
   :dimensions
   {:confirms #{positiveInt},
    :type zen/integer,
    :zen/desc "Number of sample points at each time point"}}},
 Signature
 {:confirms #{Element},
  :zen/tags
  #{zen-fhir/structure-definition
    zen-fhir/complex-type
    zen/schema
    zen-fhir/base},
  :fhir/type "Signature",
  :require #{:who :when :type},
  :type zen/map,
  :zen/desc
  "Base StructureDefinition for Signature Type: A signature along with supporting context. The signature may be a digital signature that is cryptographic in nature, or some other signature acceptable to the domain. This other signature may be as simple as a graphical image representing a hand-written signature, or a signature ceremony Different signature approaches have different utilities.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/Signature",
  :keys
  {:type
   {:minItems 1,
    :type zen/vector,
    :every
    {:confirms #{Coding},
     :zen/desc
     "Indication of the reason the entity signed the object(s)"}},
   :when
   {:confirms #{instant},
    :type zen/string,
    :zen/desc "When the signature was created"},
   :data
   {:confirms #{base64Binary},
    :type zen/string,
    :zen/desc
    "The actual signature content (XML DigSig. JWS, picture, etc.)"},
   :sigFormat
   {:confirms #{code},
    :type zen/string,
    :zen/desc "The technical format of the signature"},
   :targetFormat
   {:confirms #{code},
    :type zen/string,
    :zen/desc "The technical format of the signed resources"},
   :who {:confirms #{Reference}, :zen/desc "Who signed"},
   :onBehalfOf
   {:confirms #{Reference}, :zen/desc "The party represented"}}},
 SimpleQuantity
 {:confirms #{Quantity},
  :zen/tags
  #{zen-fhir/structure-definition
    zen-fhir/complex-type
    zen/schema
    zen-fhir/profile},
  :fhir/type "Quantity",
  :type zen/map,
  :zen/desc "A fixed quantity (no comparator)",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/SimpleQuantity",
  :keys
  {:comparator
   {:zen/desc "Not allowed to be used in this context",
    :const {:value nil}}}},
 SubstanceAmount
 {:confirms #{BackboneElement},
  :zen/tags
  #{zen-fhir/structure-definition
    zen-fhir/complex-type
    zen/schema
    zen-fhir/base},
  :fhir/type "SubstanceAmount",
  :type zen/map,
  :zen/desc
  "Base StructureDefinition for SubstanceAmount Type: Chemical substances are a single substance type whose primary defining element is the molecular structure. Chemical substances shall be defined on the basis of their complete covalent molecular structure; the presence of a salt (counter-ion) and/or solvates (water, alcohols) is also captured. Purity, grade, physical form or particle size are not taken into account in the definition of a chemical substance or in the assignment of a Substance ID.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/SubstanceAmount",
  :keys
  {:amountText
   {:confirms #{string},
    :type zen/string,
    :zen/desc "A textual comment on a numeric value"},
   :amountType
   {:confirms #{CodeableConcept},
    :zen/desc
    "Most elements that require a quantitative value will also have a field called amount type. Amount type should always be specified because the actual value of the amount is often dependent on it. EXAMPLE: In capturing the actual relative amounts of substances or molecular fragments it is essential to indicate whether the amount refers to a mole ratio or weight ratio. For any given element an effort should be made to use same the amount type for all related definitional elements"},
   :referenceRange
   {:confirms #{Element},
    :type zen/map,
    :zen/desc "Reference range of possible or expected values",
    :keys
    {:lowLimit
     {:confirms #{Quantity},
      :zen/desc "Lower limit possible or expected"},
     :highLimit
     {:confirms #{Quantity},
      :zen/desc "Upper limit possible or expected"}}},
   :amount
   {:type zen/map,
    :zen/desc
    "Used to capture quantitative values for a variety of elements. If only limits are given, the arithmetic mean would be the average. If only a single definite value for a given element is given, it would be captured in this field",
    :keys
    {:Quantity {:confirms #{Quantity}},
     :Range {:confirms #{Range}},
     :string {:confirms #{string}, :type zen/string}},
    :exclusive-keys #{#{:string :Range :Quantity}}}}},
 Timing
 {:confirms #{BackboneElement},
  :zen/tags
  #{zen-fhir/structure-definition
    zen-fhir/complex-type
    zen/schema
    zen-fhir/base},
  :fhir/type "Timing",
  :type zen/map,
  :zen/desc
  "Base StructureDefinition for Timing Type: Specifies an event that may occur multiple times. Timing schedules are used to record when things are planned, expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds, and may be used for reporting the schedule to which past regular activities were carried out.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/Timing",
  :keys
  {:code
   {:confirms #{CodeableConcept},
    :zen/desc "BID | TID | QID | AM | PM | QD | QOD | +"},
   :repeat
   {:confirms #{Element},
    :type zen/map,
    :zen/desc "When the event is to occur",
    :keys
    {:frequencyMax
     {:confirms #{positiveInt},
      :type zen/integer,
      :zen/desc "Event occurs up to frequencyMax times per period"},
     :when
     {:type zen/vector,
      :every
      {:confirms #{code},
       :type zen/string,
       :zen/desc "Code for time period of occurrence"}},
     :offset
     {:confirms #{unsignedInt},
      :type zen/integer,
      :zen/desc "Minutes from event (before or after)"},
     :periodUnit
     {:confirms #{code},
      :type zen/string,
      :zen/desc "s | min | h | d | wk | mo | a - unit of time (UCUM)"},
     :frequency
     {:confirms #{positiveInt},
      :type zen/integer,
      :zen/desc "Event occurs frequency times per period"},
     :durationMax
     {:confirms #{decimal},
      :type zen/number,
      :zen/desc "How long when it happens (Max)"},
     :duration
     {:confirms #{decimal},
      :type zen/number,
      :zen/desc "How long when it happens"},
     :bounds
     {:type zen/map,
      :zen/desc
      "Length/Range of lengths, or (Start and/or end) limits",
      :keys
      {:Duration {:confirms #{Duration}},
       :Range {:confirms #{Range}},
       :Period {:confirms #{Period}}},
      :exclusive-keys #{#{:Range :Period :Duration}}},
     :durationUnit
     {:confirms #{code},
      :type zen/string,
      :zen/desc "s | min | h | d | wk | mo | a - unit of time (UCUM)"},
     :dayOfWeek
     {:type zen/vector,
      :every
      {:confirms #{code},
       :type zen/string,
       :zen/desc "mon | tue | wed | thu | fri | sat | sun"}},
     :count
     {:confirms #{positiveInt},
      :type zen/integer,
      :zen/desc "Number of times to repeat"},
     :periodMax
     {:confirms #{decimal},
      :type zen/number,
      :zen/desc "Upper limit of period (3-4 hours)"},
     :period
     {:confirms #{decimal},
      :type zen/number,
      :zen/desc "Event occurs frequency times per period"},
     :countMax
     {:confirms #{positiveInt},
      :type zen/integer,
      :zen/desc "Maximum number of times to repeat"},
     :timeOfDay
     {:type zen/vector,
      :every
      {:confirms #{time},
       :type zen/string,
       :zen/desc "Time of day for action"}}}},
   :event
   {:type zen/vector,
    :every
    {:confirms #{dateTime},
     :type zen/datetime,
     :zen/desc "When the event occurs"}}}},
 TriggerDefinition
 {:confirms #{Element},
  :zen/tags
  #{zen-fhir/structure-definition
    zen-fhir/complex-type
    zen/schema
    zen-fhir/base},
  :fhir/type "TriggerDefinition",
  :require #{:type},
  :type zen/map,
  :zen/desc
  "Base StructureDefinition for TriggerDefinition Type: A description of a triggering event. Triggering events can be named events, data events, or periodic, as determined by the type element.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/TriggerDefinition",
  :keys
  {:type
   {:confirms #{code},
    :type zen/string,
    :zen/desc
    "named-event | periodic | data-changed | data-added | data-modified | data-removed | data-accessed | data-access-ended"},
   :name
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name or URI that identifies the event"},
   :condition
   {:confirms #{Expression},
    :zen/desc "Whether the event triggers (boolean expression)"},
   :data
   {:type zen/vector,
    :every
    {:confirms #{DataRequirement},
     :zen/desc "Triggering data of the event (multiple = 'and')"}},
   :timing
   {:type zen/map,
    :zen/desc "Timing of the event",
    :keys
    {:Timing {:confirms #{Timing}},
     :Reference {:confirms #{Reference}},
     :date {:confirms #{date}, :type zen/date},
     :dateTime {:confirms #{dateTime}, :type zen/datetime}},
    :exclusive-keys #{#{:date :dateTime :Timing :Reference}}}}},
 UsageContext
 {:confirms #{Element},
  :zen/tags
  #{zen-fhir/structure-definition
    zen-fhir/complex-type
    zen/schema
    zen-fhir/base},
  :fhir/type "UsageContext",
  :require #{:value :code},
  :type zen/map,
  :zen/desc
  "Base StructureDefinition for UsageContext Type: Specifies clinical/business/etc. metadata that can be used to retrieve, index and/or categorize an artifact. This metadata can either be specific to the applicable population (e.g., age category, DRG) or the specific context of care (e.g., venue, care setting, provider of care).",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/UsageContext",
  :keys
  {:value
   {:type zen/map,
    :zen/desc "Value that defines the context",
    :keys
    {:CodeableConcept {:confirms #{CodeableConcept}},
     :Quantity {:confirms #{Quantity}},
     :Range {:confirms #{Range}},
     :Reference {:confirms #{Reference}}},
    :exclusive-keys
    #{#{:Range :CodeableConcept :Quantity :Reference}}},
   :code
   {:confirms #{Coding},
    :zen/desc "Type of context being specified"}}},
 DomainResource
 {:confirms #{Resource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen-fhir/abstract
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "DomainResource",
  :type zen/map,
  :zen/desc
  "A resource that includes narrative, extensions, and contained resources.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/DomainResource",
  :keys
  {:modifierExtension
   {:type zen/vector,
    :every
    {:confirms #{Extension},
     :zen/desc "Extensions that cannot be ignored"},
    :slicing {:slices {}}},
   :contained
   {:type zen/vector,
    :every
    {:confirms #{Resource}, :zen/desc "Contained, inline Resources"}},
   :extension
   {:type zen/vector,
    :every
    {:confirms #{Extension},
     :zen/desc "Additional content defined by implementations"},
    :slicing {:slices {}}},
   :text
   {:confirms #{Narrative},
    :zen/desc
    "Text summary of the resource, for human interpretation"}}},
 Resource
 {:zen/tags
  #{zen-fhir/structure-definition
    zen-fhir/abstract
    zen/schema
    zen-fhir/resource},
  :fhir/type "Resource",
  :type zen/map,
  :zen/desc "This is the base resource type for everything.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/Resource",
  :keys
  {:implicitRules
   {:confirms #{uri},
    :type zen/string,
    :zen/desc "A set of rules under which this content was created"},
   :language
   {:confirms #{code},
    :type zen/string,
    :zen/desc "Language of the resource content"},
   :meta {:confirms #{Meta}, :zen/desc "Metadata about the resource"},
   :id
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Logical id of this artifact"}}},
 Account
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "Account",
  :require #{:status},
  :type zen/map,
  :zen/desc
  "A financial tool for tracking value accrued for a particular purpose.  In the healthcare field, used to track charges for a patient, cost centers, etc.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/Account",
  :keys
  {:description
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Explanation of purpose/use"},
   :name
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Human-readable label"},
   :servicePeriod
   {:confirms #{Period}, :zen/desc "Transaction window"},
   :coverage
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:coverage},
     :type zen/map,
     :zen/desc
     "The party(s) that are responsible for covering the payment of this account, and what order should they be applied to the account",
     :keys
     {:coverage
      {:confirms #{Reference},
       :zen/desc
       "The party(s), such as insurances, that may contribute to the payment of this account"},
      :priority
      {:confirms #{positiveInt},
       :type zen/integer,
       :zen/desc
       "The priority of the coverage in the context of this account"}}}},
   :type
   {:confirms #{CodeableConcept},
    :zen/desc "E.g. patient, expense, depreciation"},
   :resourceType {:type zen/string, :const {:value "Account"}},
   :guarantor
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:party},
     :type zen/map,
     :zen/desc
     "The parties ultimately responsible for balancing the Account",
     :keys
     {:onHold
      {:confirms #{boolean},
       :type zen/boolean,
       :zen/desc "Credit or other hold applied"},
      :party {:confirms #{Reference}, :zen/desc "Responsible entity"},
      :period
      {:confirms #{Period}, :zen/desc "Guarantee account during"}}}},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc
    "active | inactive | entered-in-error | on-hold | unknown"},
   :identifier
   {:type zen/vector,
    :every {:confirms #{Identifier}, :zen/desc "Account number"}},
   :partOf
   {:confirms #{Reference}, :zen/desc "Reference to a parent Account"},
   :subject
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "The entity that caused the expenses"}},
   :owner
   {:confirms #{Reference}, :zen/desc "Entity managing the Account"}}},
 ActivityDefinition
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "ActivityDefinition",
  :require #{:status},
  :type zen/map,
  :zen/desc
  "This resource allows for the definition of some activity to be performed, independent of a particular patient, practitioner, or other performance context.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/ActivityDefinition",
  :keys
  {:observationResultRequirement
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "What observations must be produced by this action"}},
   :description
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc
    "Natural language description of the activity definition"},
   :date
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "Date last changed"},
   :transform
   {:confirms #{canonical},
    :type zen/string,
    :zen/desc "Transform to apply the template"},
   :endorser
   {:type zen/vector,
    :every
    {:confirms #{ContactDetail},
     :zen/desc "Who endorsed the content"}},
   :publisher
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name of the publisher (organization or individual)"},
   :approvalDate
   {:confirms #{date},
    :type zen/date,
    :zen/desc
    "When the activity definition was approved by publisher"},
   :jurisdiction
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc
     "Intended jurisdiction for activity definition (if applicable)"}},
   :dosage
   {:type zen/vector,
    :every
    {:confirms #{Dosage}, :zen/desc "Detailed dosage instructions"}},
   :observationRequirement
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc
     "What observations are required to perform this action"}},
   :purpose
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc "Why this activity definition is defined"},
   :name
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name for this activity definition (computer friendly)"},
   :useContext
   {:type zen/vector,
    :every
    {:confirms #{UsageContext},
     :zen/desc "The context that the content is intended to support"}},
   :copyright
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc "Use and/or publishing restrictions"},
   :experimental
   {:confirms #{boolean},
    :type zen/boolean,
    :zen/desc "For testing purposes, not real usage"},
   :topic
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "E.g. Education, Treatment, Assessment, etc."}},
   :participant
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:type},
     :type zen/map,
     :zen/desc "Who should participate in the action",
     :keys
     {:type
      {:confirms #{code},
       :type zen/string,
       :zen/desc "patient | practitioner | related-person | device"},
      :role
      {:confirms #{CodeableConcept},
       :zen/desc "E.g. Nurse, Surgeon, Parent, etc."}}}},
   :resourceType
   {:type zen/string, :const {:value "ActivityDefinition"}},
   :title
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name for this activity definition (human friendly)"},
   :library
   {:type zen/vector,
    :every
    {:confirms #{canonical},
     :type zen/string,
     :zen/desc "Logic used by the activity definition"}},
   :author
   {:type zen/vector,
    :every
    {:confirms #{ContactDetail},
     :zen/desc "Who authored the content"}},
   :product
   {:type zen/map,
    :zen/desc "What's administered/supplied",
    :keys
    {:Reference {:confirms #{Reference}},
     :CodeableConcept {:confirms #{CodeableConcept}}},
    :exclusive-keys #{#{:CodeableConcept :Reference}}},
   :usage
   {:confirms #{string},
    :type zen/string,
    :zen/desc
    "Describes the clinical usage of the activity definition"},
   :priority
   {:confirms #{code},
    :type zen/string,
    :zen/desc "routine | urgent | asap | stat"},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc "draft | active | retired | unknown"},
   :timing
   {:type zen/map,
    :zen/desc "When activity is to occur",
    :keys
    {:Timing {:confirms #{Timing}},
     :dateTime {:confirms #{dateTime}, :type zen/datetime},
     :Age {:confirms #{Age}},
     :Period {:confirms #{Period}},
     :Range {:confirms #{Range}},
     :Duration {:confirms #{Duration}}},
    :exclusive-keys
    #{#{:dateTime :Range :Period :Timing :Duration :Age}}},
   :subtitle
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Subordinate title of the activity definition"},
   :kind
   {:confirms #{code}, :type zen/string, :zen/desc "Kind of resource"},
   :dynamicValue
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:path :expression},
     :type zen/map,
     :zen/desc "Dynamic aspects of the definition",
     :keys
     {:path
      {:confirms #{string},
       :type zen/string,
       :zen/desc "The path to the element to be set dynamically"},
      :expression
      {:confirms #{Expression},
       :zen/desc
       "An expression that provides the dynamic value for the customization"}}}},
   :url
   {:confirms #{uri},
    :type zen/string,
    :zen/desc
    "Canonical identifier for this activity definition, represented as a URI (globally unique)"},
   :code
   {:confirms #{CodeableConcept}, :zen/desc "Detail type of activity"},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier},
     :zen/desc "Additional identifier for the activity definition"}},
   :lastReviewDate
   {:confirms #{date},
    :type zen/date,
    :zen/desc "When the activity definition was last reviewed"},
   :editor
   {:type zen/vector,
    :every
    {:confirms #{ContactDetail}, :zen/desc "Who edited the content"}},
   :doNotPerform
   {:confirms #{boolean},
    :type zen/boolean,
    :zen/desc "True if the activity should not be performed"},
   :bodySite
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "What part of body to perform on"}},
   :intent
   {:confirms #{code},
    :type zen/string,
    :zen/desc
    "proposal | plan | directive | order | original-order | reflex-order | filler-order | instance-order | option"},
   :specimenRequirement
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "What specimens are required to perform this action"}},
   :reviewer
   {:type zen/vector,
    :every
    {:confirms #{ContactDetail},
     :zen/desc "Who reviewed the content"}},
   :quantity
   {:confirms #{Quantity SimpleQuantity},
    :zen/desc "How much is administered/consumed/supplied"},
   :version
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Business version of the activity definition"},
   :relatedArtifact
   {:type zen/vector,
    :every
    {:confirms #{RelatedArtifact},
     :zen/desc "Additional documentation, citations, etc."}},
   :location
   {:confirms #{Reference}, :zen/desc "Where it should happen"},
   :contact
   {:type zen/vector,
    :every
    {:confirms #{ContactDetail},
     :zen/desc "Contact details for the publisher"}},
   :subject
   {:type zen/map,
    :zen/desc
    "Type of individual the activity definition is intended for",
    :keys
    {:CodeableConcept {:confirms #{CodeableConcept}},
     :Reference {:confirms #{Reference}}},
    :exclusive-keys #{#{:CodeableConcept :Reference}}},
   :profile
   {:confirms #{canonical},
    :type zen/string,
    :zen/desc "What profile the resource needs to conform to"},
   :effectivePeriod
   {:confirms #{Period},
    :zen/desc "When the activity definition is expected to be used"}}},
 AdverseEvent
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "AdverseEvent",
  :require #{:actuality :subject},
  :type zen/map,
  :zen/desc
  "Actual or  potential/avoided event causing unintended physical injury resulting from or contributed to by medical care, a research study or other healthcare setting factors that requires additional monitoring, treatment, or hospitalization, or that results in death.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/AdverseEvent",
  :keys
  {:category
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc
     "product-problem | product-quality | product-use-error | wrong-dose | incorrect-prescribing-information | wrong-technique | wrong-route-of-administration | wrong-rate | wrong-duration | wrong-time | expired-drug | medical-device-use-error | problem-different-manufacturer | unsafe-physical-environment"}},
   :actuality
   {:confirms #{code},
    :type zen/string,
    :zen/desc "actual | potential"},
   :date
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "When the event occurred"},
   :study
   {:type zen/vector,
    :every {:confirms #{Reference}, :zen/desc "AdverseEvent.study"}},
   :encounter
   {:confirms #{Reference}, :zen/desc "Encounter created as part of"},
   :suspectEntity
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:instance},
     :type zen/map,
     :zen/desc "The suspected agent causing the adverse event",
     :keys
     {:causality
      {:type zen/vector,
       :every
       {:confirms #{BackboneElement},
        :type zen/map,
        :zen/desc "Information on the possible cause of the event",
        :keys
        {:method
         {:confirms #{CodeableConcept},
          :zen/desc "ProbabilityScale | Bayesian | Checklist"},
         :productRelatedness
         {:confirms #{string},
          :type zen/string,
          :zen/desc
          "AdverseEvent.suspectEntity.causalityProductRelatedness"},
         :assessment
         {:confirms #{CodeableConcept},
          :zen/desc "Assessment of if the entity caused the event"},
         :author
         {:confirms #{Reference},
          :zen/desc "AdverseEvent.suspectEntity.causalityAuthor"}}}},
      :instance
      {:confirms #{Reference},
       :zen/desc
       "Refers to the specific entity that caused the adverse event"}}}},
   :referenceDocument
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "AdverseEvent.referenceDocument"}},
   :outcome
   {:confirms #{CodeableConcept},
    :zen/desc
    "resolved | recovering | ongoing | resolvedWithSequelae | fatal | unknown"},
   :resourceType {:type zen/string, :const {:value "AdverseEvent"}},
   :recordedDate
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "When the event was recorded"},
   :event
   {:confirms #{CodeableConcept},
    :zen/desc "Type of the event itself in relation to the subject"},
   :contributor
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc
     "Who  was involved in the adverse event or the potential adverse event"}},
   :subjectMedicalHistory
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "AdverseEvent.subjectMedicalHistory"}},
   :recorder
   {:confirms #{Reference},
    :zen/desc "Who recorded the adverse event"},
   :seriousness
   {:confirms #{CodeableConcept},
    :zen/desc "Seriousness of the event"},
   :severity
   {:confirms #{CodeableConcept},
    :zen/desc "mild | moderate | severe"},
   :identifier
   {:confirms #{Identifier},
    :zen/desc "Business identifier for the event"},
   :detected
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "When the event was detected"},
   :location
   {:confirms #{Reference},
    :zen/desc "Location where adverse event occurred"},
   :subject
   {:confirms #{Reference}, :zen/desc "Subject impacted by event"},
   :resultingCondition
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "Effect on the subject due to this event"}}}},
 AllergyIntolerance
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "AllergyIntolerance",
  :require #{:patient},
  :type zen/map,
  :zen/desc
  "Risk of harmful or undesirable, physiological response which is unique to an individual and associated with exposure to a substance.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/AllergyIntolerance",
  :keys
  {:patient
   {:confirms #{Reference}, :zen/desc "Who the sensitivity is for"},
   :onset
   {:type zen/map,
    :zen/desc "When allergy or intolerance was identified",
    :keys
    {:dateTime {:confirms #{dateTime}, :type zen/datetime},
     :Age {:confirms #{Age}},
     :Period {:confirms #{Period}},
     :Range {:confirms #{Range}},
     :string {:confirms #{string}, :type zen/string}},
    :exclusive-keys #{#{:string :dateTime :Range :Period :Age}}},
   :category
   {:type zen/vector,
    :every
    {:confirms #{code},
     :type zen/string,
     :zen/desc "food | medication | environment | biologic"}},
   :criticality
   {:confirms #{code},
    :type zen/string,
    :zen/desc "low | high | unable-to-assess"},
   :clinicalStatus
   {:confirms #{CodeableConcept},
    :zen/desc "active | inactive | resolved"},
   :encounter
   {:confirms #{Reference},
    :zen/desc
    "Encounter when the allergy or intolerance was asserted"},
   :type
   {:confirms #{code},
    :type zen/string,
    :zen/desc
    "allergy | intolerance - Underlying mechanism (if known)"},
   :resourceType
   {:type zen/string, :const {:value "AllergyIntolerance"}},
   :asserter
   {:confirms #{Reference},
    :zen/desc "Source of the information about the allergy"},
   :note
   {:type zen/vector,
    :every
    {:confirms #{Annotation},
     :zen/desc "Additional text not captured in other fields"}},
   :recordedDate
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc
    "Date first version of the resource instance was recorded"},
   :recorder
   {:confirms #{Reference}, :zen/desc "Who recorded the sensitivity"},
   :code
   {:confirms #{CodeableConcept},
    :zen/desc "Code that identifies the allergy or intolerance"},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier}, :zen/desc "External ids for this item"}},
   :lastOccurrence
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "Date(/time) of last known occurrence of a reaction"},
   :verificationStatus
   {:confirms #{CodeableConcept},
    :zen/desc "unconfirmed | confirmed | refuted | entered-in-error"},
   :reaction
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:manifestation},
     :type zen/map,
     :zen/desc
     "Adverse Reaction Events linked to exposure to substance",
     :keys
     {:substance
      {:confirms #{CodeableConcept},
       :zen/desc
       "Specific substance or pharmaceutical product considered to be responsible for event"},
      :severity
      {:confirms #{code},
       :type zen/string,
       :zen/desc "mild | moderate | severe (of event as a whole)"},
      :manifestation
      {:minItems 1,
       :type zen/vector,
       :every
       {:confirms #{CodeableConcept},
        :zen/desc
        "Clinical symptoms/signs associated with the Event"}},
      :exposureRoute
      {:confirms #{CodeableConcept},
       :zen/desc "How the subject was exposed to the substance"},
      :note
      {:type zen/vector,
       :every
       {:confirms #{Annotation},
        :zen/desc "Text about event not captured in other fields"}},
      :description
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Description of the event as a whole"},
      :onset
      {:confirms #{dateTime},
       :type zen/datetime,
       :zen/desc "Date(/time) when manifestations showed"}}}}}},
 Appointment
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "Appointment",
  :require #{:participant :status},
  :type zen/map,
  :zen/desc
  "A booking of a healthcare event among patient(s), practitioner(s), related person(s) and/or device(s) for a specific date/time. This may result in one or more Encounter(s).",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/Appointment",
  :keys
  {:description
   {:confirms #{string},
    :type zen/string,
    :zen/desc
    "Shown on a subject line in a meeting request, or appointment list"},
   :serviceCategory
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc
     "A broad categorization of the service that is to be performed during this appointment"}},
   :slot
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "The slots that this appointment is filling"}},
   :specialty
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc
     "The specialty of a practitioner that would be required to perform the service requested in this appointment"}},
   :cancelationReason
   {:confirms #{CodeableConcept},
    :zen/desc "The coded reason for the appointment being cancelled"},
   :requestedPeriod
   {:type zen/vector,
    :every
    {:confirms #{Period},
     :zen/desc
     "Potential date/time interval(s) requested to allocate the appointment within"}},
   :patientInstruction
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Detailed information and instructions for the patient"},
   :start
   {:confirms #{instant},
    :type zen/string,
    :zen/desc "When appointment is to take place"},
   :reasonCode
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "Coded reason this appointment is scheduled"}},
   :created
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "The date that this appointment was initially created"},
   :participant
   {:minItems 1,
    :type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:status},
     :type zen/map,
     :zen/desc "Participants involved in appointment",
     :keys
     {:status
      {:confirms #{code},
       :type zen/string,
       :zen/desc "accepted | declined | tentative | needs-action"},
      :period
      {:confirms #{Period},
       :zen/desc "Participation period of the actor"},
      :required
      {:confirms #{code},
       :type zen/string,
       :zen/desc "required | optional | information-only"},
      :type
      {:type zen/vector,
       :every
       {:confirms #{CodeableConcept},
        :zen/desc "Role of participant in the appointment"}},
      :actor
      {:confirms #{Reference},
       :zen/desc "Person, Location/HealthcareService or Device"}}}},
   :resourceType {:type zen/string, :const {:value "Appointment"}},
   :serviceType
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc
     "The specific service that is to be performed during this appointment"}},
   :supportingInformation
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "Additional information to support the appointment"}},
   :priority
   {:confirms #{unsignedInt},
    :type zen/integer,
    :zen/desc
    "Used to make informed decisions if needing to re-prioritize"},
   :appointmentType
   {:confirms #{CodeableConcept},
    :zen/desc
    "The style of appointment or patient that has been booked in the slot (not service type)"},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc
    "proposed | pending | booked | arrived | fulfilled | cancelled | noshow | entered-in-error | checked-in | waitlist"},
   :comment
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Additional comments"},
   :minutesDuration
   {:confirms #{positiveInt},
    :type zen/integer,
    :zen/desc "Can be less than start/end (e.g. estimate)"},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier}, :zen/desc "External Ids for this item"}},
   :basedOn
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc
     "The service request this appointment is allocated to assess"}},
   :end
   {:confirms #{instant},
    :type zen/string,
    :zen/desc "When appointment is to conclude"},
   :reasonReference
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc
     "Reason the appointment is to take place (resource)"}}}},
 AppointmentResponse
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "AppointmentResponse",
  :require #{:appointment :participantStatus},
  :type zen/map,
  :zen/desc
  "A reply to an appointment request for a patient and/or practitioner(s), such as a confirmation or rejection.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/AppointmentResponse",
  :keys
  {:appointment
   {:confirms #{Reference},
    :zen/desc "Appointment this response relates to"},
   :start
   {:confirms #{instant},
    :type zen/string,
    :zen/desc "Time from appointment, or requested new start time"},
   :participantStatus
   {:confirms #{code},
    :type zen/string,
    :zen/desc "accepted | declined | tentative | needs-action"},
   :resourceType
   {:type zen/string, :const {:value "AppointmentResponse"}},
   :participantType
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "Role of participant in the appointment"}},
   :comment
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Additional comments"},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier}, :zen/desc "External Ids for this item"}},
   :end
   {:confirms #{instant},
    :type zen/string,
    :zen/desc "Time from appointment, or requested new end time"},
   :actor
   {:confirms #{Reference},
    :zen/desc "Person, Location, HealthcareService, or Device"}}},
 AuditEvent
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "AuditEvent",
  :require #{:type :source :recorded :agent},
  :type zen/map,
  :zen/desc
  "A record of an event made for purposes of maintaining a security log. Typical uses include detection of intrusion attempts and monitoring for inappropriate usage.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/AuditEvent",
  :keys
  {:outcomeDesc
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Description of the event outcome"},
   :type {:confirms #{Coding}, :zen/desc "Type/identifier of event"},
   :outcome
   {:confirms #{code},
    :type zen/string,
    :zen/desc "Whether the event succeeded or failed"},
   :resourceType {:type zen/string, :const {:value "AuditEvent"}},
   :source
   {:confirms #{BackboneElement},
    :require #{:observer},
    :type zen/map,
    :zen/desc "Audit Event Reporter",
    :keys
    {:type
     {:type zen/vector,
      :every
      {:confirms #{Coding},
       :zen/desc "The type of source where event originated"}},
     :site
     {:confirms #{string},
      :type zen/string,
      :zen/desc "Logical source location within the enterprise"},
     :observer
     {:confirms #{Reference},
      :zen/desc "The identity of source detecting the event"}}},
   :recorded
   {:confirms #{instant},
    :type zen/string,
    :zen/desc "Time when the event was recorded"},
   :agent
   {:minItems 1,
    :type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:requestor},
     :type zen/map,
     :zen/desc "Actor involved in the event",
     :keys
     {:role
      {:type zen/vector,
       :every
       {:confirms #{CodeableConcept},
        :zen/desc "Agent role in the event"}},
      :requestor
      {:confirms #{boolean},
       :type zen/boolean,
       :zen/desc "Whether user is initiator"},
      :who {:confirms #{Reference}, :zen/desc "Identifier of who"},
      :altId
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Alternative User identity"},
      :name
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Human friendly name for the agent"},
      :type
      {:confirms #{CodeableConcept},
       :zen/desc "How agent participated"},
      :policy
      {:type zen/vector,
       :every
       {:confirms #{uri},
        :type zen/string,
        :zen/desc "Policy that authorized event"}},
      :purposeOfUse
      {:type zen/vector,
       :every
       {:confirms #{CodeableConcept},
        :zen/desc "Reason given for this user"}},
      :network
      {:confirms #{BackboneElement},
       :type zen/map,
       :zen/desc "Logical network location for application activity",
       :keys
       {:type
        {:confirms #{code},
         :type zen/string,
         :zen/desc "The type of network access point"},
        :address
        {:confirms #{string},
         :type zen/string,
         :zen/desc
         "Identifier for the network access point of the user device"}}},
      :location {:confirms #{Reference}, :zen/desc "Where"},
      :media {:confirms #{Coding}, :zen/desc "Type of media"}}}},
   :purposeOfEvent
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "The purposeOfUse of the event"}},
   :action
   {:confirms #{code},
    :type zen/string,
    :zen/desc "Type of action performed during the event"},
   :period
   {:confirms #{Period}, :zen/desc "When the activity occurred"},
   :entity
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc "Data or objects used",
     :keys
     {:role
      {:confirms #{Coding}, :zen/desc "What role the entity played"},
      :description
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Descriptive text"},
      :name
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Descriptor for entity"},
      :type {:confirms #{Coding}, :zen/desc "Type of entity involved"},
      :lifecycle
      {:confirms #{Coding},
       :zen/desc "Life-cycle stage for the entity"},
      :query
      {:confirms #{base64Binary},
       :type zen/string,
       :zen/desc "Query parameters"},
      :securityLabel
      {:type zen/vector,
       :every
       {:confirms #{Coding},
        :zen/desc "Security labels on the entity"}},
      :what
      {:confirms #{Reference},
       :zen/desc "Specific instance of resource"},
      :detail
      {:type zen/vector,
       :every
       {:confirms #{BackboneElement},
        :require #{:value :type},
        :type zen/map,
        :zen/desc "Additional Information about the entity",
        :keys
        {:value
         {:type zen/map,
          :zen/desc "Property value",
          :keys
          {:string {:confirms #{string}, :type zen/string},
           :base64Binary
           {:confirms #{base64Binary}, :type zen/string}},
          :exclusive-keys #{#{:base64Binary :string}}},
         :type
         {:confirms #{string},
          :type zen/string,
          :zen/desc "Name of the property"}}}}}}},
   :subtype
   {:type zen/vector,
    :every
    {:confirms #{Coding},
     :zen/desc "More specific type/id for the event"}}}},
 Basic
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "Basic",
  :require #{:code},
  :type zen/map,
  :zen/desc
  "Basic is used for handling concepts not yet defined in FHIR, narrative-only resources that don't map to an existing resource, and custom resources not appropriate for inclusion in the FHIR specification.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url "http://hl7.org/fhir/StructureDefinition/Basic",
  :keys
  {:subject
   {:confirms #{Reference},
    :zen/desc "Identifies the focus of this resource"},
   :code {:confirms #{CodeableConcept}, :zen/desc "Kind of Resource"},
   :identifier
   {:type zen/vector,
    :every {:confirms #{Identifier}, :zen/desc "Business identifier"}},
   :author {:confirms #{Reference}, :zen/desc "Who created"},
   :created
   {:confirms #{date}, :type zen/date, :zen/desc "When created"},
   :resourceType {:type zen/string, :const {:value "Basic"}}}},
 Binary
 {:confirms #{Resource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "Binary",
  :require #{:contentType},
  :type zen/map,
  :zen/desc
  "A resource that represents the data of a single raw artifact as digital content accessible in its native format.  A Binary resource can contain any content, whether text, image, pdf, zip archive, etc.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/Binary",
  :keys
  {:contentType
   {:confirms #{code},
    :type zen/string,
    :zen/desc "MimeType of the binary content"},
   :data
   {:confirms #{base64Binary},
    :type zen/string,
    :zen/desc "The actual content"},
   :securityContext
   {:confirms #{Reference},
    :zen/desc
    "Identifies another resource to use as proxy when enforcing access control"},
   :resourceType {:type zen/string, :const {:value "Binary"}}}},
 BiologicallyDerivedProduct
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "BiologicallyDerivedProduct",
  :type zen/map,
  :zen/desc
  "A material substance originating from a biological entity intended to be transplanted or infused\ninto another (possibly the same) biological entity.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/BiologicallyDerivedProduct",
  :keys
  {:request
   {:type zen/vector,
    :every {:confirms #{Reference}, :zen/desc "Procedure request"}},
   :processing
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc "Any processing of the product during collection",
     :keys
     {:additive
      {:confirms #{Reference},
       :zen/desc "Substance added during processing"},
      :description
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Description of of processing"},
      :time
      {:type zen/map,
       :zen/desc "Time of processing",
       :keys
       {:dateTime {:confirms #{dateTime}, :type zen/datetime},
        :Period {:confirms #{Period}}},
       :exclusive-keys #{#{:dateTime :Period}}},
      :procedure
      {:confirms #{CodeableConcept}, :zen/desc "Procesing code"}}}},
   :parent
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "BiologicallyDerivedProduct parent"}},
   :resourceType
   {:type zen/string, :const {:value "BiologicallyDerivedProduct"}},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc "available | unavailable"},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier}, :zen/desc "External ids for this item"}},
   :productCode
   {:confirms #{CodeableConcept},
    :zen/desc "What this biologically derived product is"},
   :storage
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc "Product storage",
     :keys
     {:duration {:confirms #{Period}, :zen/desc "Storage timeperiod"},
      :temperature
      {:confirms #{decimal},
       :type zen/number,
       :zen/desc "Storage temperature"},
      :scale
      {:confirms #{code},
       :type zen/string,
       :zen/desc "farenheit | celsius | kelvin"},
      :description
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Description of storage"}}}},
   :quantity
   {:confirms #{integer},
    :type zen/integer,
    :zen/desc "The amount of this biologically derived product"},
   :productCategory
   {:confirms #{code},
    :type zen/string,
    :zen/desc "organ | tissue | fluid | cells | biologicalAgent"},
   :manipulation
   {:confirms #{BackboneElement},
    :type zen/map,
    :zen/desc "Any manipulation of product post-collection",
    :keys
    {:time
     {:type zen/map,
      :zen/desc "Time of manipulation",
      :keys
      {:dateTime {:confirms #{dateTime}, :type zen/datetime},
       :Period {:confirms #{Period}}},
      :exclusive-keys #{#{:dateTime :Period}}},
     :description
     {:confirms #{string},
      :type zen/string,
      :zen/desc "Description of manipulation"}}},
   :collection
   {:confirms #{BackboneElement},
    :type zen/map,
    :zen/desc "How this product was collected",
    :keys
    {:collector
     {:confirms #{Reference},
      :zen/desc "Individual performing collection"},
     :collected
     {:type zen/map,
      :zen/desc "Time of product collection",
      :keys
      {:dateTime {:confirms #{dateTime}, :type zen/datetime},
       :Period {:confirms #{Period}}},
      :exclusive-keys #{#{:dateTime :Period}}},
     :source
     {:confirms #{Reference}, :zen/desc "Who is product from"}}}}},
 BodyStructure
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "BodyStructure",
  :require #{:patient},
  :type zen/map,
  :zen/desc
  "Record details about an anatomical structure.  This resource may be used when a coded concept does not provide the necessary detail needed for the use case.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/BodyStructure",
  :keys
  {:patient {:confirms #{Reference}, :zen/desc "Who this is about"},
   :description
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Text description"},
   :morphology
   {:confirms #{CodeableConcept}, :zen/desc "Kind of Structure"},
   :resourceType {:type zen/string, :const {:value "BodyStructure"}},
   :active
   {:confirms #{boolean},
    :type zen/boolean,
    :zen/desc "Whether this record is in active use"},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier}, :zen/desc "Bodystructure identifier"}},
   :image
   {:type zen/vector,
    :every {:confirms #{Attachment}, :zen/desc "Attached images"}},
   :location {:confirms #{CodeableConcept}, :zen/desc "Body site"},
   :locationQualifier
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept}, :zen/desc "Body site modifier"}}}},
 Bundle
 {:confirms #{Resource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "Bundle",
  :require #{:type},
  :type zen/map,
  :zen/desc "A container for a collection of resources.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/Bundle",
  :keys
  {:signature {:confirms #{Signature}, :zen/desc "Digital Signature"},
   :type
   {:confirms #{code},
    :type zen/string,
    :zen/desc
    "document | message | transaction | transaction-response | batch | batch-response | history | searchset | collection"},
   :timestamp
   {:confirms #{instant},
    :type zen/string,
    :zen/desc "When the bundle was assembled"},
   :total
   {:confirms #{unsignedInt},
    :type zen/integer,
    :zen/desc "If search, the total number of matches"},
   :entry
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc
     "Entry in the bundle - will have a resource or information",
     :keys
     {:link
      {:type zen/vector,
       :every #:zen{:desc "Links related to this entry"}},
      :resource
      {:confirms #{Resource}, :zen/desc "A resource in the bundle"},
      :fullUrl
      {:confirms #{uri},
       :type zen/string,
       :zen/desc
       "URI for resource (Absolute URL server address or URI for UUID/OID)"},
      :search
      {:confirms #{BackboneElement},
       :type zen/map,
       :zen/desc "Search related information",
       :keys
       {:score
        {:confirms #{decimal},
         :type zen/number,
         :zen/desc "Search ranking (between 0 and 1)"},
        :mode
        {:confirms #{code},
         :type zen/string,
         :zen/desc
         "match | include | outcome - why this is in the result set"}}},
      :request
      {:confirms #{BackboneElement},
       :require #{:method :url},
       :type zen/map,
       :zen/desc
       "Additional execution information (transaction/batch/history)",
       :keys
       {:url
        {:confirms #{uri},
         :type zen/string,
         :zen/desc "URL for HTTP equivalent of this entry"},
        :method
        {:confirms #{code},
         :type zen/string,
         :zen/desc "GET | HEAD | POST | PUT | DELETE | PATCH"},
        :ifModifiedSince
        {:confirms #{instant},
         :type zen/string,
         :zen/desc "For managing cache currency"},
        :ifMatch
        {:confirms #{string},
         :type zen/string,
         :zen/desc "For managing update contention"},
        :ifNoneExist
        {:confirms #{string},
         :type zen/string,
         :zen/desc "For conditional creates"},
        :ifNoneMatch
        {:confirms #{string},
         :type zen/string,
         :zen/desc "For managing cache currency"}}},
      :response
      {:confirms #{BackboneElement},
       :require #{:status},
       :type zen/map,
       :zen/desc "Results of execution (transaction/batch/history)",
       :keys
       {:location
        {:confirms #{uri},
         :type zen/string,
         :zen/desc
         "The location (if the operation returns a location)"},
        :etag
        {:confirms #{string},
         :type zen/string,
         :zen/desc "The Etag for the resource (if relevant)"},
        :status
        {:confirms #{string},
         :type zen/string,
         :zen/desc "Status response code (text optional)"},
        :outcome
        {:confirms #{Resource},
         :zen/desc
         "OperationOutcome with hints and warnings (for batch/transaction)"},
        :lastModified
        {:confirms #{instant},
         :type zen/string,
         :zen/desc "Server's date time modified"}}}}}},
   :identifier
   {:confirms #{Identifier},
    :zen/desc "Persistent identifier for the bundle"},
   :link
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:url :relation},
     :type zen/map,
     :zen/desc "Links related to this Bundle",
     :keys
     {:relation
      {:confirms #{string},
       :type zen/string,
       :zen/desc
       "See http://www.iana.org/assignments/link-relations/link-relations.xhtml#link-relations-1"},
      :url
      {:confirms #{uri},
       :type zen/string,
       :zen/desc "Reference details for the link"}}}},
   :resourceType {:type zen/string, :const {:value "Bundle"}}}},
 CapabilityStatement
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "CapabilityStatement",
  :require #{:format :date :fhirVersion :status :kind},
  :type zen/map,
  :zen/desc
  "A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server for a particular version of FHIR that may be used as a statement of actual server functionality or a statement of required or desired server implementation.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/CapabilityStatement",
  :keys
  {:description
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc
    "Natural language description of the capability statement"},
   :format
   {:minItems 1,
    :type zen/vector,
    :every
    {:confirms #{code},
     :type zen/string,
     :zen/desc "formats supported (xml | json | ttl | mime type)"}},
   :date
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "Date last changed"},
   :publisher
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name of the publisher (organization or individual)"},
   :patchFormat
   {:type zen/vector,
    :every
    {:confirms #{code},
     :type zen/string,
     :zen/desc "Patch formats supported"}},
   :fhirVersion
   {:confirms #{code},
    :type zen/string,
    :zen/desc "FHIR Version the system supports"},
   :jurisdiction
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc
     "Intended jurisdiction for capability statement (if applicable)"}},
   :instantiates
   {:type zen/vector,
    :every
    {:confirms #{canonical},
     :type zen/string,
     :zen/desc
     "Canonical URL of another capability statement this implements"}},
   :purpose
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc "Why this capability statement is defined"},
   :name
   {:confirms #{string},
    :type zen/string,
    :zen/desc
    "Name for this capability statement (computer friendly)"},
   :useContext
   {:type zen/vector,
    :every
    {:confirms #{UsageContext},
     :zen/desc "The context that the content is intended to support"}},
   :copyright
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc "Use and/or publishing restrictions"},
   :experimental
   {:confirms #{boolean},
    :type zen/boolean,
    :zen/desc "For testing purposes, not real usage"},
   :resourceType
   {:type zen/string, :const {:value "CapabilityStatement"}},
   :imports
   {:type zen/vector,
    :every
    {:confirms #{canonical},
     :type zen/string,
     :zen/desc
     "Canonical URL of another capability statement this adds to"}},
   :title
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name for this capability statement (human friendly)"},
   :document
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:mode :profile},
     :type zen/map,
     :zen/desc "Document definition",
     :keys
     {:mode
      {:confirms #{code},
       :type zen/string,
       :zen/desc "producer | consumer"},
      :documentation
      {:confirms #{markdown},
       :type zen/string,
       :zen/desc "Description of document support"},
      :profile
      {:confirms #{canonical},
       :type zen/string,
       :zen/desc
       "Constraint on the resources used in the document"}}}},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc "draft | active | retired | unknown"},
   :messaging
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc "If messaging is supported",
     :keys
     {:supportedMessage
      {:type zen/vector,
       :every
       {:confirms #{BackboneElement},
        :require #{:definition :mode},
        :type zen/map,
        :zen/desc "Messages supported by this system",
        :keys
        {:mode
         {:confirms #{code},
          :type zen/string,
          :zen/desc "sender | receiver"},
         :definition
         {:confirms #{canonical},
          :type zen/string,
          :zen/desc "Message supported by this system"}}}},
      :reliableCache
      {:confirms #{unsignedInt},
       :type zen/integer,
       :zen/desc "Reliable Message Cache Length (min)"},
      :documentation
      {:confirms #{markdown},
       :type zen/string,
       :zen/desc "Messaging interface behavior details"},
      :endpoint
      {:type zen/vector,
       :every
       {:confirms #{BackboneElement},
        :require #{:address :protocol},
        :type zen/map,
        :zen/desc "Where messages should be sent",
        :keys
        {:address
         {:confirms #{url},
          :type zen/string,
          :zen/desc "Network address or identifier of the end-point"},
         :protocol
         {:confirms #{Coding}, :zen/desc "http | ftp | mllp +"}}}}}}},
   :kind
   {:confirms #{code},
    :type zen/string,
    :zen/desc "instance | capability | requirements"},
   :implementationGuide
   {:type zen/vector,
    :every
    {:confirms #{canonical},
     :type zen/string,
     :zen/desc "Implementation guides supported"}},
   :url
   {:confirms #{uri},
    :type zen/string,
    :zen/desc
    "Canonical identifier for this capability statement, represented as a URI (globally unique)"},
   :software
   {:confirms #{BackboneElement},
    :require #{:name},
    :type zen/map,
    :zen/desc "Software that is covered by this capability statement",
    :keys
    {:releaseDate
     {:confirms #{dateTime},
      :type zen/datetime,
      :zen/desc "Date this version was released"},
     :version
     {:confirms #{string},
      :type zen/string,
      :zen/desc "Version covered by this statement"},
     :name
     {:confirms #{string},
      :type zen/string,
      :zen/desc "A name the software is known by"}}},
   :version
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Business version of the capability statement"},
   :contact
   {:type zen/vector,
    :every
    {:confirms #{ContactDetail},
     :zen/desc "Contact details for the publisher"}},
   :implementation
   {:confirms #{BackboneElement},
    :require #{:description},
    :type zen/map,
    :zen/desc "If this describes a specific instance",
    :keys
    {:description
     {:confirms #{string},
      :type zen/string,
      :zen/desc "Describes this specific instance"},
     :url
     {:confirms #{url},
      :type zen/string,
      :zen/desc "Base URL for the installation"},
     :custodian
     {:confirms #{Reference},
      :zen/desc "Organization that manages the data"}}},
   :rest
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:mode},
     :type zen/map,
     :zen/desc "If the endpoint is a RESTful one",
     :keys
     {:resource
      {:type zen/vector,
       :every
       {:confirms #{BackboneElement},
        :require #{:type},
        :type zen/map,
        :zen/desc "Resource served on the REST interface",
        :keys
        {:searchRevInclude
         {:type zen/vector,
          :every
          {:confirms #{string},
           :type zen/string,
           :zen/desc "_revinclude values supported by the server"}},
         :searchParam
         {:type zen/vector,
          :every
          {:confirms #{BackboneElement},
           :require #{:name :type},
           :type zen/map,
           :zen/desc "Search parameters supported by implementation",
           :keys
           {:definition
            {:confirms #{canonical},
             :type zen/string,
             :zen/desc "Source of definition for parameter"},
            :type
            {:confirms #{code},
             :type zen/string,
             :zen/desc
             "number | date | string | token | reference | composite | quantity | uri | special"},
            :name
            {:confirms #{string},
             :type zen/string,
             :zen/desc "Name of search parameter"},
            :documentation
            {:confirms #{markdown},
             :type zen/string,
             :zen/desc "Server-specific usage"}}}},
         :conditionalUpdate
         {:confirms #{boolean},
          :type zen/boolean,
          :zen/desc "If allows/uses conditional update"},
         :conditionalRead
         {:confirms #{code},
          :type zen/string,
          :zen/desc
          "not-supported | modified-since | not-match | full-support"},
         :operation
         {:type zen/vector,
          :every
          {:confirms #{BackboneElement},
           :require #{:definition :name},
           :type zen/map,
           :zen/desc "Definition of a resource operation",
           :keys
           {:definition
            {:confirms #{canonical},
             :type zen/string,
             :zen/desc "The defined operation/query"},
            :documentation
            {:confirms #{markdown},
             :type zen/string,
             :zen/desc "Specific details about operation behavior"},
            :name
            {:confirms #{string},
             :type zen/string,
             :zen/desc
             "Name by which the operation/query is invoked"}}}},
         :referencePolicy
         {:type zen/vector,
          :every
          {:confirms #{code},
           :type zen/string,
           :zen/desc
           "literal | logical | resolves | enforced | local"}},
         :readHistory
         {:confirms #{boolean},
          :type zen/boolean,
          :zen/desc "Whether vRead can return past versions"},
         :type
         {:confirms #{code},
          :type zen/string,
          :zen/desc "A resource type that is supported"},
         :interaction
         {:type zen/vector,
          :every
          {:confirms #{BackboneElement},
           :require #{:code},
           :type zen/map,
           :zen/desc "What operations are supported?",
           :keys
           {:code
            {:confirms #{code},
             :type zen/string,
             :zen/desc
             "read | vread | update | patch | delete | history-instance | history-type | create | search-type"},
            :documentation
            {:confirms #{markdown},
             :type zen/string,
             :zen/desc "Anything special about operation behavior"}}}},
         :documentation
         {:confirms #{markdown},
          :type zen/string,
          :zen/desc
          "Additional information about the use of the resource type"},
         :updateCreate
         {:confirms #{boolean},
          :type zen/boolean,
          :zen/desc "If update can commit to a new identity"},
         :conditionalCreate
         {:confirms #{boolean},
          :type zen/boolean,
          :zen/desc "If allows/uses conditional create"},
         :supportedProfile
         {:type zen/vector,
          :every
          {:confirms #{canonical},
           :type zen/string,
           :zen/desc "Profiles for use cases supported"}},
         :searchInclude
         {:type zen/vector,
          :every
          {:confirms #{string},
           :type zen/string,
           :zen/desc "_include values supported by the server"}},
         :versioning
         {:confirms #{code},
          :type zen/string,
          :zen/desc "no-version | versioned | versioned-update"},
         :profile
         {:confirms #{canonical},
          :type zen/string,
          :zen/desc "Base System profile for all uses of resource"},
         :conditionalDelete
         {:confirms #{code},
          :type zen/string,
          :zen/desc
          "not-supported | single | multiple - how conditional delete is supported"}}}},
      :operation
      {:type zen/vector,
       :every #:zen{:desc "Definition of a system level operation"}},
      :interaction
      {:type zen/vector,
       :every
       {:confirms #{BackboneElement},
        :require #{:code},
        :type zen/map,
        :zen/desc "What operations are supported?",
        :keys
        {:documentation
         {:confirms #{markdown},
          :type zen/string,
          :zen/desc "Anything special about operation behavior"},
         :code
         {:confirms #{code},
          :type zen/string,
          :zen/desc
          "transaction | batch | search-system | history-system"}}}},
      :mode
      {:confirms #{code},
       :type zen/string,
       :zen/desc "client | server"},
      :documentation
      {:confirms #{markdown},
       :type zen/string,
       :zen/desc "General description of implementation"},
      :compartment
      {:type zen/vector,
       :every
       {:confirms #{canonical},
        :type zen/string,
        :zen/desc "Compartments served/used by system"}},
      :security
      {:confirms #{BackboneElement},
       :type zen/map,
       :zen/desc "Information about security of implementation",
       :keys
       {:cors
        {:confirms #{boolean},
         :type zen/boolean,
         :zen/desc "Adds CORS Headers (http://enable-cors.org/)"},
        :description
        {:confirms #{markdown},
         :type zen/string,
         :zen/desc "General description of how security works"},
        :service
        {:type zen/vector,
         :every
         {:confirms #{CodeableConcept},
          :zen/desc
          "OAuth | SMART-on-FHIR | NTLM | Basic | Kerberos | Certificates"}}}},
      :searchParam
      {:type zen/vector,
       :every
       #:zen{:desc
             "Search parameters for searching all resources"}}}}}}},
 CarePlan
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "CarePlan",
  :require #{:status :intent :subject},
  :type zen/map,
  :zen/desc
  "Describes the intention of how one or more practitioners intend to deliver care for a particular patient, group or community for a period of time, possibly limited to care for a specific condition or set of conditions.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/CarePlan",
  :keys
  {:description
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Summary of nature of plan"},
   :category
   {:type zen/vector,
    :every {:confirms #{CodeableConcept}, :zen/desc "Type of plan"}},
   :addresses
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "Health issues this plan addresses"}},
   :instantiatesCanonical
   {:type zen/vector,
    :every
    {:confirms #{canonical},
     :type zen/string,
     :zen/desc "Instantiates FHIR protocol or definition"}},
   :instantiatesUri
   {:type zen/vector,
    :every
    {:confirms #{uri},
     :type zen/string,
     :zen/desc "Instantiates external protocol or definition"}},
   :supportingInfo
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "Information considered as part of plan"}},
   :encounter
   {:confirms #{Reference}, :zen/desc "Encounter created as part of"},
   :goal
   {:type zen/vector,
    :every
    {:confirms #{Reference}, :zen/desc "Desired outcome of plan"}},
   :created
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "Date record was first recorded"},
   :resourceType {:type zen/string, :const {:value "CarePlan"}},
   :title
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Human-friendly name for the care plan"},
   :note
   {:type zen/vector,
    :every
    {:confirms #{Annotation}, :zen/desc "Comments about the plan"}},
   :author
   {:confirms #{Reference},
    :zen/desc "Who is the designated responsible party"},
   :activity
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc "Action to occur as part of plan",
     :keys
     {:outcomeCodeableConcept
      {:type zen/vector,
       :every
       {:confirms #{CodeableConcept},
        :zen/desc "Results of the activity"}},
      :outcomeReference
      {:type zen/vector,
       :every
       {:confirms #{Reference},
        :zen/desc "Appointment, Encounter, Procedure, etc."}},
      :progress
      {:type zen/vector,
       :every
       {:confirms #{Annotation},
        :zen/desc "Comments about the activity status/progress"}},
      :reference
      {:confirms #{Reference},
       :zen/desc "Activity details defined in specific resource"},
      :detail
      {:confirms #{BackboneElement},
       :require #{:status},
       :type zen/map,
       :zen/desc "In-line definition of activity",
       :keys
       {:description
        {:confirms #{string},
         :type zen/string,
         :zen/desc "Extra info describing activity to perform"},
        :instantiatesCanonical
        {:type zen/vector,
         :every
         {:confirms #{canonical},
          :type zen/string,
          :zen/desc "Instantiates FHIR protocol or definition"}},
        :instantiatesUri
        {:type zen/vector,
         :every
         {:confirms #{uri},
          :type zen/string,
          :zen/desc "Instantiates external protocol or definition"}},
        :goal
        {:type zen/vector,
         :every
         {:confirms #{Reference},
          :zen/desc "Goals this activity relates to"}},
        :reasonCode
        {:type zen/vector,
         :every
         {:confirms #{CodeableConcept},
          :zen/desc
          "Why activity should be done or why activity was prohibited"}},
        :statusReason
        {:confirms #{CodeableConcept},
         :zen/desc "Reason for current status"},
        :dailyAmount
        {:confirms #{Quantity SimpleQuantity},
         :zen/desc "How to consume/day?"},
        :product
        {:type zen/map,
         :zen/desc "What is to be administered/supplied",
         :keys
         {:CodeableConcept {:confirms #{CodeableConcept}},
          :Reference {:confirms #{Reference}}},
         :exclusive-keys #{#{:CodeableConcept :Reference}}},
        :status
        {:confirms #{code},
         :type zen/string,
         :zen/desc
         "not-started | scheduled | in-progress | on-hold | completed | cancelled | stopped | unknown | entered-in-error"},
        :kind
        {:confirms #{code},
         :type zen/string,
         :zen/desc
         "Appointment | CommunicationRequest | DeviceRequest | MedicationRequest | NutritionOrder | Task | ServiceRequest | VisionPrescription"},
        :code
        {:confirms #{CodeableConcept},
         :zen/desc "Detail type of activity"},
        :doNotPerform
        {:confirms #{boolean},
         :type zen/boolean,
         :zen/desc "If true, activity is prohibiting action"},
        :scheduled
        {:type zen/map,
         :zen/desc "When activity is to occur",
         :keys
         {:Timing {:confirms #{Timing}},
          :Period {:confirms #{Period}},
          :string {:confirms #{string}, :type zen/string}},
         :exclusive-keys #{#{:string :Period :Timing}}},
        :quantity
        {:confirms #{Quantity SimpleQuantity},
         :zen/desc "How much to administer/supply/consume"},
        :location
        {:confirms #{Reference}, :zen/desc "Where it should happen"},
        :performer
        {:type zen/vector,
         :every
         {:confirms #{Reference},
          :zen/desc "Who will be responsible?"}},
        :reasonReference
        {:type zen/vector,
         :every
         {:confirms #{Reference},
          :zen/desc "Why activity is needed"}}}}}}},
   :contributor
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "Who provided the content of the care plan"}},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc
    "draft | active | on-hold | revoked | completed | entered-in-error | unknown"},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier}, :zen/desc "External Ids for this plan"}},
   :intent
   {:confirms #{code},
    :type zen/string,
    :zen/desc "proposal | plan | order | option"},
   :replaces
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "CarePlan replaced by this CarePlan"}},
   :period {:confirms #{Period}, :zen/desc "Time period plan covers"},
   :basedOn
   {:type zen/vector,
    :every {:confirms #{Reference}, :zen/desc "Fulfills CarePlan"}},
   :partOf
   {:type zen/vector,
    :every
    {:confirms #{Reference}, :zen/desc "Part of referenced CarePlan"}},
   :subject
   {:confirms #{Reference}, :zen/desc "Who the care plan is for"},
   :careTeam
   {:type zen/vector,
    :every
    {:confirms #{Reference}, :zen/desc "Who's involved in plan?"}}}},
 CareTeam
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "CareTeam",
  :type zen/map,
  :zen/desc
  "The Care Team includes all the people and organizations who plan to participate in the coordination and delivery of care for a patient.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/CareTeam",
  :keys
  {:category
   {:type zen/vector,
    :every {:confirms #{CodeableConcept}, :zen/desc "Type of team"}},
   :managingOrganization
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "Organization responsible for the care team"}},
   :encounter
   {:confirms #{Reference}, :zen/desc "Encounter created as part of"},
   :name
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name of the team, such as crisis assessment team"},
   :reasonCode
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "Why the care team exists"}},
   :participant
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc "Members of the team",
     :keys
     {:role
      {:type zen/vector,
       :every
       {:confirms #{CodeableConcept},
        :zen/desc "Type of involvement"}},
      :member {:confirms #{Reference}, :zen/desc "Who is involved"},
      :onBehalfOf
      {:confirms #{Reference},
       :zen/desc "Organization of the practitioner"},
      :period
      {:confirms #{Period}, :zen/desc "Time period of participant"}}}},
   :resourceType {:type zen/string, :const {:value "CareTeam"}},
   :note
   {:type zen/vector,
    :every
    {:confirms #{Annotation},
     :zen/desc "Comments made about the CareTeam"}},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc
    "proposed | active | suspended | inactive | entered-in-error"},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier}, :zen/desc "External Ids for this team"}},
   :telecom
   {:type zen/vector,
    :every
    {:confirms #{ContactPoint},
     :zen/desc
     "A contact detail for the care team (that applies to all members)"}},
   :period {:confirms #{Period}, :zen/desc "Time period team covers"},
   :subject {:confirms #{Reference}, :zen/desc "Who care team is for"},
   :reasonReference
   {:type zen/vector,
    :every
    {:confirms #{Reference}, :zen/desc "Why the care team exists"}}}},
 CatalogEntry
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "CatalogEntry",
  :require #{:referencedItem :orderable},
  :type zen/map,
  :zen/desc
  "Catalog entries are wrappers that contextualize items included in a catalog.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/CatalogEntry",
  :keys
  {:additionalCharacteristic
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "Additional characteristics of the catalog entry"}},
   :additionalClassification
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "Additional classification of the catalog entry"}},
   :referencedItem
   {:confirms #{Reference},
    :zen/desc "The item that is being defined"},
   :type
   {:confirms #{CodeableConcept},
    :zen/desc
    "The type of item - medication, device, service, protocol or other"},
   :resourceType {:type zen/string, :const {:value "CatalogEntry"}},
   :classification
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc
     "Classification (category or class) of the item entry"}},
   :validityPeriod
   {:confirms #{Period},
    :zen/desc
    "The time period in which this catalog entry is expected to be active"},
   :orderable
   {:confirms #{boolean},
    :type zen/boolean,
    :zen/desc "Whether the entry represents an orderable item"},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc "draft | active | retired | unknown"},
   :validTo
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc
    "The date until which this catalog entry is expected to be active"},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier},
     :zen/desc "Unique identifier of the catalog item"}},
   :additionalIdentifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier},
     :zen/desc
     "Any additional identifier(s) for the catalog item, in the same granularity or concept"}},
   :lastUpdated
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "When was this catalog last updated"},
   :relatedEntry
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:relationtype :item},
     :type zen/map,
     :zen/desc "An item that this catalog entry is related to",
     :keys
     {:relationtype
      {:confirms #{code},
       :type zen/string,
       :zen/desc "triggers | is-replaced-by"},
      :item
      {:confirms #{Reference},
       :zen/desc "The reference to the related item"}}}}}},
 ChargeItem
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "ChargeItem",
  :require #{:status :code :subject},
  :type zen/map,
  :zen/desc
  "The resource ChargeItem describes the provision of healthcare provider products for a certain patient, therefore referring not only to the product, but containing in addition details of the provision, like date, time, amounts and participating organizations and persons. Main Usage of the ChargeItem is to enable the billing process and internal cost allocation.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/ChargeItem",
  :keys
  {:service
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "Which rendered service is being charged?"}},
   :definitionUri
   {:type zen/vector,
    :every
    {:confirms #{uri},
     :type zen/string,
     :zen/desc
     "Defining information about the code of this charge item"}},
   :enterer
   {:confirms #{Reference}, :zen/desc "Individual who was entering"},
   :requestingOrganization
   {:confirms #{Reference},
    :zen/desc "Organization requesting the charged service"},
   :definitionCanonical
   {:type zen/vector,
    :every
    {:confirms #{canonical},
     :type zen/string,
     :zen/desc "Resource defining the code of this ChargeItem"}},
   :bodysite
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "Anatomical location, if relevant"}},
   :resourceType {:type zen/string, :const {:value "ChargeItem"}},
   :costCenter
   {:confirms #{Reference},
    :zen/desc
    "Organization that has ownership of the (potential, future) revenue"},
   :note
   {:type zen/vector,
    :every
    {:confirms #{Annotation},
     :zen/desc "Comments made about the ChargeItem"}},
   :account
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "Account to place this charge"}},
   :reason
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "Why was the charged  service rendered?"}},
   :product
   {:type zen/map,
    :zen/desc "Product charged",
    :keys
    {:Reference {:confirms #{Reference}},
     :CodeableConcept {:confirms #{CodeableConcept}}},
    :exclusive-keys #{#{:CodeableConcept :Reference}}},
   :supportingInformation
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "Further information supporting this charge"}},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc
    "planned | billable | not-billable | aborted | billed | entered-in-error | unknown"},
   :code
   {:confirms #{CodeableConcept},
    :zen/desc
    "A code that identifies the charge, like a billing code"},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier},
     :zen/desc "Business Identifier for item"}},
   :context
   {:confirms #{Reference},
    :zen/desc "Encounter / Episode associated with event"},
   :quantity
   {:confirms #{Quantity},
    :zen/desc "Quantity of which the charge item has been serviced"},
   :partOf
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "Part of referenced ChargeItem"}},
   :priceOverride
   {:confirms #{Money},
    :zen/desc "Price overriding the associated rules"},
   :enteredDate
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "Date the charge item was entered"},
   :overrideReason
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Reason for overriding the list price/factor"},
   :performingOrganization
   {:confirms #{Reference},
    :zen/desc "Organization providing the charged service"},
   :subject
   {:confirms #{Reference},
    :zen/desc "Individual service was done for/to"},
   :factorOverride
   {:confirms #{decimal},
    :type zen/number,
    :zen/desc "Factor overriding the associated rules"},
   :occurrence
   {:type zen/map,
    :zen/desc "When the charged service was applied",
    :keys
    {:dateTime {:confirms #{dateTime}, :type zen/datetime},
     :Period {:confirms #{Period}},
     :Timing {:confirms #{Timing}}},
    :exclusive-keys #{#{:dateTime :Period :Timing}}},
   :performer
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:actor},
     :type zen/map,
     :zen/desc "Who performed charged service",
     :keys
     {:actor
      {:confirms #{Reference},
       :zen/desc "Individual who was performing"},
      :function
      {:confirms #{CodeableConcept},
       :zen/desc "What type of performance was done"}}}}}},
 ChargeItemDefinition
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "ChargeItemDefinition",
  :require #{:status :url},
  :type zen/map,
  :zen/desc
  "The ChargeItemDefinition resource provides the properties that apply to the (billing) codes necessary to calculate costs and prices. The properties may differ largely depending on type and realm, therefore this resource gives only a rough structure and requires profiling for each type of billing code system.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/ChargeItemDefinition",
  :keys
  {:description
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc
    "Natural language description of the charge item definition"},
   :date
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "Date last changed"},
   :publisher
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name of the publisher (organization or individual)"},
   :approvalDate
   {:confirms #{date},
    :type zen/date,
    :zen/desc
    "When the charge item definition was approved by publisher"},
   :propertyGroup
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc
     "Group of properties which are applicable under the same conditions",
     :keys
     {:priceComponent
      {:type zen/vector,
       :every
       {:confirms #{BackboneElement},
        :require #{:type},
        :type zen/map,
        :zen/desc "Components of total line item price",
        :keys
        {:factor
         {:confirms #{decimal},
          :type zen/number,
          :zen/desc "Factor used for calculating this component"},
         :code
         {:confirms #{CodeableConcept},
          :zen/desc "Code identifying the specific component"},
         :type
         {:confirms #{code},
          :type zen/string,
          :zen/desc
          "base | surcharge | deduction | discount | tax | informational"},
         :amount
         {:confirms #{Money},
          :zen/desc
          "Monetary amount associated with this component"}}}},
      :applicability
      {:type zen/vector,
       :every
       #:zen{:desc
             "Conditions under which the priceComponent is applicable"}}}}},
   :instance
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "Instances this definition applies to"}},
   :jurisdiction
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc
     "Intended jurisdiction for charge item definition (if applicable)"}},
   :useContext
   {:type zen/vector,
    :every
    {:confirms #{UsageContext},
     :zen/desc "The context that the content is intended to support"}},
   :copyright
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc "Use and/or publishing restrictions"},
   :experimental
   {:confirms #{boolean},
    :type zen/boolean,
    :zen/desc "For testing purposes, not real usage"},
   :resourceType
   {:type zen/string, :const {:value "ChargeItemDefinition"}},
   :title
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name for this charge item definition (human friendly)"},
   :derivedFromUri
   {:type zen/vector,
    :every
    {:confirms #{uri},
     :type zen/string,
     :zen/desc
     "Underlying externally-defined charge item definition"}},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc "draft | active | retired | unknown"},
   :url
   {:confirms #{uri},
    :type zen/string,
    :zen/desc
    "Canonical identifier for this charge item definition, represented as a URI (globally unique)"},
   :code
   {:confirms #{CodeableConcept},
    :zen/desc
    "Billing codes or product types this definition applies to"},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier},
     :zen/desc
     "Additional identifier for the charge item definition"}},
   :lastReviewDate
   {:confirms #{date},
    :type zen/date,
    :zen/desc "When the charge item definition was last reviewed"},
   :replaces
   {:type zen/vector,
    :every
    {:confirms #{canonical},
     :type zen/string,
     :zen/desc
     "Completed or terminated request(s) whose function is taken by this new request"}},
   :partOf
   {:type zen/vector,
    :every
    {:confirms #{canonical},
     :type zen/string,
     :zen/desc
     "A larger definition of which this particular definition is a component or step"}},
   :version
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Business version of the charge item definition"},
   :contact
   {:type zen/vector,
    :every
    {:confirms #{ContactDetail},
     :zen/desc "Contact details for the publisher"}},
   :applicability
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc "Whether or not the billing code is applicable",
     :keys
     {:language
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Language of the expression"},
      :expression
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Boolean-valued expression"},
      :description
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Natural language description of the condition"}}}},
   :effectivePeriod
   {:confirms #{Period},
    :zen/desc
    "When the charge item definition is expected to be used"}}},
 Claim
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "Claim",
  :require
  #{:patient
    :insurance
    :use
    :type
    :created
    :priority
    :status
    :provider},
  :type zen/map,
  :zen/desc
  "A provider issued list of professional services and products which have been provided, or are to be provided, to a patient which is sent to an insurer for reimbursement.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url "http://hl7.org/fhir/StructureDefinition/Claim",
  :keys
  {:patient
   {:confirms #{Reference},
    :zen/desc "The recipient of the products and services"},
   :insurance
   {:minItems 1,
    :type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:focal :coverage :sequence},
     :type zen/map,
     :zen/desc "Patient insurance information",
     :keys
     {:coverage
      {:confirms #{Reference}, :zen/desc "Insurance information"},
      :sequence
      {:confirms #{positiveInt},
       :type zen/integer,
       :zen/desc "Insurance instance identifier"},
      :businessArrangement
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Additional provider contract number"},
      :preAuthRef
      {:type zen/vector,
       :every
       {:confirms #{string},
        :type zen/string,
        :zen/desc "Prior authorization reference number"}},
      :focal
      {:confirms #{boolean},
       :type zen/boolean,
       :zen/desc "Coverage to be used for adjudication"},
      :identifier
      {:confirms #{Identifier}, :zen/desc "Pre-assigned Claim number"},
      :claimResponse
      {:confirms #{Reference}, :zen/desc "Adjudication results"}}}},
   :facility {:confirms #{Reference}, :zen/desc "Servicing facility"},
   :diagnosis
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:diagnosis :sequence},
     :type zen/map,
     :zen/desc "Pertinent diagnosis information",
     :keys
     {:onAdmission
      {:confirms #{CodeableConcept}, :zen/desc "Present on admission"},
      :type
      {:type zen/vector,
       :every
       {:confirms #{CodeableConcept},
        :zen/desc "Timing or nature of the diagnosis"}},
      :sequence
      {:confirms #{positiveInt},
       :type zen/integer,
       :zen/desc "Diagnosis instance identifier"},
      :packageCode
      {:confirms #{CodeableConcept}, :zen/desc "Package billing code"},
      :diagnosis
      {:type zen/map,
       :zen/desc "Nature of illness or problem",
       :keys
       {:CodeableConcept {:confirms #{CodeableConcept}},
        :Reference {:confirms #{Reference}}},
       :exclusive-keys #{#{:CodeableConcept :Reference}}}}}},
   :enterer {:confirms #{Reference}, :zen/desc "Author of the claim"},
   :supportingInfo
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:category :sequence},
     :type zen/map,
     :zen/desc "Supporting information",
     :keys
     {:category
      {:confirms #{CodeableConcept},
       :zen/desc "Classification of the supplied information"},
      :sequence
      {:confirms #{positiveInt},
       :type zen/integer,
       :zen/desc "Information instance identifier"},
      :timing
      {:type zen/map,
       :zen/desc "When it occurred",
       :keys
       {:date {:confirms #{date}, :type zen/date},
        :Period {:confirms #{Period}}},
       :exclusive-keys #{#{:date :Period}}},
      :reason
      {:confirms #{CodeableConcept},
       :zen/desc "Explanation for the information"},
      :code
      {:confirms #{CodeableConcept}, :zen/desc "Type of information"},
      :value
      {:type zen/map,
       :zen/desc "Data to be provided",
       :keys
       {:boolean {:confirms #{boolean}, :type zen/boolean},
        :string {:confirms #{string}, :type zen/string},
        :Quantity {:confirms #{Quantity}},
        :Attachment {:confirms #{Attachment}},
        :Reference {:confirms #{Reference}}},
       :exclusive-keys
       #{#{:string :Attachment :Quantity :boolean :Reference}}}}}},
   :use
   {:confirms #{code},
    :type zen/string,
    :zen/desc "claim | preauthorization | predetermination"},
   :item
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:productOrService :sequence},
     :type zen/map,
     :zen/desc "Product or service provided",
     :keys
     {:category
      {:confirms #{CodeableConcept},
       :zen/desc "Benefit classification"},
      :diagnosisSequence
      {:type zen/vector,
       :every
       {:confirms #{positiveInt},
        :type zen/integer,
        :zen/desc "Applicable diagnoses"}},
      :procedureSequence
      {:type zen/vector,
       :every
       {:confirms #{positiveInt},
        :type zen/integer,
        :zen/desc "Applicable procedures"}},
      :modifier
      {:type zen/vector,
       :every
       {:confirms #{CodeableConcept},
        :zen/desc "Product or service billing modifiers"}},
      :revenue
      {:confirms #{CodeableConcept},
       :zen/desc "Revenue or cost center code"},
      :encounter
      {:type zen/vector,
       :every
       {:confirms #{Reference},
        :zen/desc "Encounters related to this billed item"}},
      :net {:confirms #{Money}, :zen/desc "Total item cost"},
      :serviced
      {:type zen/map,
       :zen/desc "Date or dates of service or product delivery",
       :keys
       {:date {:confirms #{date}, :type zen/date},
        :Period {:confirms #{Period}}},
       :exclusive-keys #{#{:date :Period}}},
      :subSite
      {:type zen/vector,
       :every
       {:confirms #{CodeableConcept},
        :zen/desc "Anatomical sub-location"}},
      :careTeamSequence
      {:type zen/vector,
       :every
       {:confirms #{positiveInt},
        :type zen/integer,
        :zen/desc "Applicable careTeam members"}},
      :productOrService
      {:confirms #{CodeableConcept},
       :zen/desc "Billing, service, product, or drug code"},
      :udi
      {:type zen/vector,
       :every
       {:confirms #{Reference}, :zen/desc "Unique device identifier"}},
      :informationSequence
      {:type zen/vector,
       :every
       {:confirms #{positiveInt},
        :type zen/integer,
        :zen/desc "Applicable exception and supporting information"}},
      :programCode
      {:type zen/vector,
       :every
       {:confirms #{CodeableConcept},
        :zen/desc "Program the product or service is provided under"}},
      :factor
      {:confirms #{decimal},
       :type zen/number,
       :zen/desc "Price scaling factor"},
      :sequence
      {:confirms #{positiveInt},
       :type zen/integer,
       :zen/desc "Item instance identifier"},
      :bodySite
      {:confirms #{CodeableConcept}, :zen/desc "Anatomical location"},
      :quantity
      {:confirms #{Quantity SimpleQuantity},
       :zen/desc "Count of products or services"},
      :location
      {:type zen/map,
       :zen/desc "Place of service or where product was supplied",
       :keys
       {:CodeableConcept {:confirms #{CodeableConcept}},
        :Address {:confirms #{Address}},
        :Reference {:confirms #{Reference}}},
       :exclusive-keys #{#{:Address :CodeableConcept :Reference}}},
      :unitPrice
      {:confirms #{Money}, :zen/desc "Fee, charge or cost per item"},
      :detail
      {:type zen/vector,
       :every
       {:confirms #{BackboneElement},
        :require #{:productOrService :sequence},
        :type zen/map,
        :zen/desc "Product or service provided",
        :keys
        {:category
         {:confirms #{CodeableConcept},
          :zen/desc "Benefit classification"},
         :modifier
         {:type zen/vector,
          :every
          {:confirms #{CodeableConcept},
           :zen/desc "Service/Product billing modifiers"}},
         :revenue
         {:confirms #{CodeableConcept},
          :zen/desc "Revenue or cost center code"},
         :net {:confirms #{Money}, :zen/desc "Total item cost"},
         :productOrService
         {:confirms #{CodeableConcept},
          :zen/desc "Billing, service, product, or drug code"},
         :udi
         {:type zen/vector,
          :every
          {:confirms #{Reference},
           :zen/desc "Unique device identifier"}},
         :programCode
         {:type zen/vector,
          :every
          {:confirms #{CodeableConcept},
           :zen/desc
           "Program the product or service is provided under"}},
         :factor
         {:confirms #{decimal},
          :type zen/number,
          :zen/desc "Price scaling factor"},
         :sequence
         {:confirms #{positiveInt},
          :type zen/integer,
          :zen/desc "Item instance identifier"},
         :subDetail
         {:type zen/vector,
          :every
          {:confirms #{BackboneElement},
           :require #{:productOrService :sequence},
           :type zen/map,
           :zen/desc "Product or service provided",
           :keys
           {:category
            {:confirms #{CodeableConcept},
             :zen/desc "Benefit classification"},
            :modifier
            {:type zen/vector,
             :every
             {:confirms #{CodeableConcept},
              :zen/desc "Service/Product billing modifiers"}},
            :revenue
            {:confirms #{CodeableConcept},
             :zen/desc "Revenue or cost center code"},
            :net {:confirms #{Money}, :zen/desc "Total item cost"},
            :productOrService
            {:confirms #{CodeableConcept},
             :zen/desc "Billing, service, product, or drug code"},
            :udi
            {:type zen/vector,
             :every
             {:confirms #{Reference},
              :zen/desc "Unique device identifier"}},
            :programCode
            {:type zen/vector,
             :every
             {:confirms #{CodeableConcept},
              :zen/desc
              "Program the product or service is provided under"}},
            :factor
            {:confirms #{decimal},
             :type zen/number,
             :zen/desc "Price scaling factor"},
            :sequence
            {:confirms #{positiveInt},
             :type zen/integer,
             :zen/desc "Item instance identifier"},
            :quantity
            {:confirms #{Quantity SimpleQuantity},
             :zen/desc "Count of products or services"},
            :unitPrice
            {:confirms #{Money},
             :zen/desc "Fee, charge or cost per item"}}}},
         :quantity
         {:confirms #{Quantity SimpleQuantity},
          :zen/desc "Count of products or services"},
         :unitPrice
         {:confirms #{Money},
          :zen/desc "Fee, charge or cost per item"}}}}}}},
   :type
   {:confirms #{CodeableConcept}, :zen/desc "Category or discipline"},
   :created
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "Resource creation date"},
   :procedure
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:procedure :sequence},
     :type zen/map,
     :zen/desc "Clinical procedures performed",
     :keys
     {:type
      {:type zen/vector,
       :every
       {:confirms #{CodeableConcept},
        :zen/desc "Category of Procedure"}},
      :udi
      {:type zen/vector,
       :every
       {:confirms #{Reference}, :zen/desc "Unique device identifier"}},
      :procedure
      {:type zen/map,
       :zen/desc "Specific clinical procedure",
       :keys
       {:CodeableConcept {:confirms #{CodeableConcept}},
        :Reference {:confirms #{Reference}}},
       :exclusive-keys #{#{:CodeableConcept :Reference}}},
      :date
      {:confirms #{dateTime},
       :type zen/datetime,
       :zen/desc "When the procedure was performed"},
      :sequence
      {:confirms #{positiveInt},
       :type zen/integer,
       :zen/desc "Procedure instance identifier"}}}},
   :related
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc "Prior or corollary claims",
     :keys
     {:relationship
      {:confirms #{CodeableConcept},
       :zen/desc "How the reference claim is related"},
      :reference
      {:confirms #{Identifier}, :zen/desc "File or case reference"},
      :claim
      {:confirms #{Reference},
       :zen/desc "Reference to the related claim"}}}},
   :resourceType {:type zen/string, :const {:value "Claim"}},
   :referral {:confirms #{Reference}, :zen/desc "Treatment referral"},
   :total {:confirms #{Money}, :zen/desc "Total claim cost"},
   :insurer {:confirms #{Reference}, :zen/desc "Target"},
   :fundsReserve
   {:confirms #{CodeableConcept},
    :zen/desc "For whom to reserve funds"},
   :priority
   {:confirms #{CodeableConcept},
    :zen/desc "Desired processing ugency"},
   :accident
   {:confirms #{BackboneElement},
    :require #{:date},
    :type zen/map,
    :zen/desc "Details of the event",
    :keys
    {:location
     {:type zen/map,
      :zen/desc "Where the event occurred",
      :keys
      {:Address {:confirms #{Address}},
       :Reference {:confirms #{Reference}}},
      :exclusive-keys #{#{:Address :Reference}}},
     :date
     {:confirms #{date},
      :type zen/date,
      :zen/desc "When the incident occurred"},
     :type
     {:confirms #{CodeableConcept},
      :zen/desc "The nature of the accident"}}},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc "active | cancelled | draft | entered-in-error"},
   :payee
   {:confirms #{BackboneElement},
    :require #{:type},
    :type zen/map,
    :zen/desc "Recipient of benefits payable",
    :keys
    {:type
     {:confirms #{CodeableConcept}, :zen/desc "Category of recipient"},
     :party
     {:confirms #{Reference}, :zen/desc "Recipient reference"}}},
   :prescription
   {:confirms #{Reference},
    :zen/desc "Prescription authorizing services and products"},
   :billablePeriod
   {:confirms #{Period},
    :zen/desc "Relevant time frame for the claim"},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier},
     :zen/desc "Business Identifier for claim"}},
   :subType
   {:confirms #{CodeableConcept},
    :zen/desc "More granular claim type"},
   :provider
   {:confirms #{Reference},
    :zen/desc "Party responsible for the claim"},
   :originalPrescription
   {:confirms #{Reference},
    :zen/desc "Original prescription if superseded by fulfiller"},
   :careTeam
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:sequence :provider},
     :type zen/map,
     :zen/desc "Members of the care team",
     :keys
     {:qualification
      {:confirms #{CodeableConcept},
       :zen/desc "Practitioner credential or specialization"},
      :role
      {:confirms #{CodeableConcept},
       :zen/desc "Function within the team"},
      :provider
      {:confirms #{Reference},
       :zen/desc "Practitioner or organization"},
      :responsible
      {:confirms #{boolean},
       :type zen/boolean,
       :zen/desc "Indicator of the lead practitioner"},
      :sequence
      {:confirms #{positiveInt},
       :type zen/integer,
       :zen/desc "Order of care team"}}}}}},
 ClaimResponse
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "ClaimResponse",
  :require #{:patient :use :type :created :outcome :insurer :status},
  :type zen/map,
  :zen/desc
  "This resource provides the adjudication details from the processing of a Claim resource.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/ClaimResponse",
  :keys
  {:patient
   {:confirms #{Reference},
    :zen/desc "The recipient of the products and services"},
   :requestor
   {:confirms #{Reference},
    :zen/desc "Party responsible for the claim"},
   :payeeType
   {:confirms #{CodeableConcept},
    :zen/desc "Party to be paid any benefits payable"},
   :insurance
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:focal :coverage :sequence},
     :type zen/map,
     :zen/desc "Patient insurance information",
     :keys
     {:claimResponse
      {:confirms #{Reference}, :zen/desc "Adjudication results"},
      :focal
      {:confirms #{boolean},
       :type zen/boolean,
       :zen/desc "Coverage to be used for adjudication"},
      :sequence
      {:confirms #{positiveInt},
       :type zen/integer,
       :zen/desc "Insurance instance identifier"},
      :coverage
      {:confirms #{Reference}, :zen/desc "Insurance information"},
      :businessArrangement
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Additional provider contract number"}}}},
   :request
   {:confirms #{Reference},
    :zen/desc "Id of resource triggering adjudication"},
   :processNote
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:text},
     :type zen/map,
     :zen/desc "Note concerning adjudication",
     :keys
     {:type
      {:confirms #{code},
       :type zen/string,
       :zen/desc "display | print | printoper"},
      :language
      {:confirms #{CodeableConcept}, :zen/desc "Language of the text"},
      :text
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Note explanatory text"},
      :number
      {:confirms #{positiveInt},
       :type zen/integer,
       :zen/desc "Note instance identifier"}}}},
   :preAuthRef
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Preauthorization reference"},
   :adjudication
   {:type zen/vector, :every #:zen{:desc "Header-level adjudication"}},
   :use
   {:confirms #{code},
    :type zen/string,
    :zen/desc "claim | preauthorization | predetermination"},
   :payment
   {:confirms #{BackboneElement},
    :require #{:amount :type},
    :type zen/map,
    :zen/desc "Payment Details",
    :keys
    {:adjustment
     {:confirms #{Money},
      :zen/desc "Payment adjustment for non-claim issues"},
     :date
     {:confirms #{date},
      :type zen/date,
      :zen/desc "Expected date of payment"},
     :amount
     {:confirms #{Money}, :zen/desc "Payable amount after adjustment"},
     :identifier
     {:confirms #{Identifier},
      :zen/desc "Business identifier for the payment"},
     :adjustmentReason
     {:confirms #{CodeableConcept},
      :zen/desc "Explanation for the adjustment"},
     :type
     {:confirms #{CodeableConcept},
      :zen/desc "Partial or complete payment"}}},
   :item
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:adjudication :itemSequence},
     :type zen/map,
     :zen/desc "Adjudication for claim line items",
     :keys
     {:adjudication
      {:minItems 1,
       :type zen/vector,
       :every
       {:confirms #{BackboneElement},
        :require #{:category},
        :type zen/map,
        :zen/desc "Adjudication details",
        :keys
        {:value
         {:confirms #{decimal},
          :type zen/number,
          :zen/desc "Non-monetary value"},
         :amount {:confirms #{Money}, :zen/desc "Monetary amount"},
         :reason
         {:confirms #{CodeableConcept},
          :zen/desc "Explanation of adjudication outcome"},
         :category
         {:confirms #{CodeableConcept},
          :zen/desc "Type of adjudication information"}}}},
      :itemSequence
      {:confirms #{positiveInt},
       :type zen/integer,
       :zen/desc "Claim item instance identifier"},
      :noteNumber
      {:type zen/vector,
       :every
       {:confirms #{positiveInt},
        :type zen/integer,
        :zen/desc "Applicable note numbers"}},
      :detail
      {:type zen/vector,
       :every
       {:confirms #{BackboneElement},
        :require #{:adjudication :detailSequence},
        :type zen/map,
        :zen/desc "Adjudication for claim details",
        :keys
        {:subDetail
         {:type zen/vector,
          :every
          {:confirms #{BackboneElement},
           :require #{:subDetailSequence},
           :type zen/map,
           :zen/desc "Adjudication for claim sub-details",
           :keys
           {:adjudication
            {:type zen/vector,
             :every
             #:zen{:desc "Subdetail level adjudication details"}},
            :noteNumber
            {:type zen/vector,
             :every
             {:confirms #{positiveInt},
              :type zen/integer,
              :zen/desc "Applicable note numbers"}},
            :subDetailSequence
            {:confirms #{positiveInt},
             :type zen/integer,
             :zen/desc "Claim sub-detail instance identifier"}}}},
         :detailSequence
         {:confirms #{positiveInt},
          :type zen/integer,
          :zen/desc "Claim detail instance identifier"},
         :adjudication
         {:minItems 1,
          :type zen/vector,
          :every #:zen{:desc "Detail level adjudication details"}},
         :noteNumber
         {:type zen/vector,
          :every
          {:confirms #{positiveInt},
           :type zen/integer,
           :zen/desc "Applicable note numbers"}}}}}}}},
   :type
   {:confirms #{CodeableConcept},
    :zen/desc "More granular claim type"},
   :created
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "Response creation date"},
   :preAuthPeriod
   {:confirms #{Period},
    :zen/desc "Preauthorization reference effective period"},
   :outcome
   {:confirms #{code},
    :type zen/string,
    :zen/desc "queued | complete | error | partial"},
   :resourceType {:type zen/string, :const {:value "ClaimResponse"}},
   :disposition
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Disposition Message"},
   :communicationRequest
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "Request for additional information"}},
   :total
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:category :amount},
     :type zen/map,
     :zen/desc "Adjudication totals",
     :keys
     {:category
      {:confirms #{CodeableConcept},
       :zen/desc "Type of adjudication information"},
      :amount
      {:confirms #{Money},
       :zen/desc "Financial total for the category"}}}},
   :insurer
   {:confirms #{Reference},
    :zen/desc "Party responsible for reimbursement"},
   :fundsReserve
   {:confirms #{CodeableConcept}, :zen/desc "Funds reserved status"},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc "active | cancelled | draft | entered-in-error"},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier},
     :zen/desc "Business Identifier for a claim response"}},
   :error
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:code},
     :type zen/map,
     :zen/desc "Processing errors",
     :keys
     {:subDetailSequence
      {:confirms #{positiveInt},
       :type zen/integer,
       :zen/desc "Subdetail sequence number"},
      :detailSequence
      {:confirms #{positiveInt},
       :type zen/integer,
       :zen/desc "Detail sequence number"},
      :itemSequence
      {:confirms #{positiveInt},
       :type zen/integer,
       :zen/desc "Item sequence number"},
      :code
      {:confirms #{CodeableConcept},
       :zen/desc "Error code detailing processing issues"}}}},
   :form
   {:confirms #{Attachment},
    :zen/desc "Printed reference or actual form"},
   :subType
   {:confirms #{CodeableConcept},
    :zen/desc "More granular claim type"},
   :formCode
   {:confirms #{CodeableConcept}, :zen/desc "Printed form identifier"},
   :addItem
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:adjudication :productOrService},
     :type zen/map,
     :zen/desc "Insurer added line items",
     :keys
     {:modifier
      {:type zen/vector,
       :every
       {:confirms #{CodeableConcept},
        :zen/desc "Service/Product billing modifiers"}},
      :adjudication
      {:minItems 1,
       :type zen/vector,
       :every #:zen{:desc "Added items adjudication"}},
      :subdetailSequence
      {:type zen/vector,
       :every
       {:confirms #{positiveInt},
        :type zen/integer,
        :zen/desc "Subdetail sequence number"}},
      :itemSequence
      {:type zen/vector,
       :every
       {:confirms #{positiveInt},
        :type zen/integer,
        :zen/desc "Item sequence number"}},
      :net {:confirms #{Money}, :zen/desc "Total item cost"},
      :serviced
      {:type zen/map,
       :zen/desc "Date or dates of service or product delivery",
       :keys
       {:date {:confirms #{date}, :type zen/date},
        :Period {:confirms #{Period}}},
       :exclusive-keys #{#{:date :Period}}},
      :detailSequence
      {:type zen/vector,
       :every
       {:confirms #{positiveInt},
        :type zen/integer,
        :zen/desc "Detail sequence number"}},
      :subSite
      {:type zen/vector,
       :every
       {:confirms #{CodeableConcept},
        :zen/desc "Anatomical sub-location"}},
      :productOrService
      {:confirms #{CodeableConcept},
       :zen/desc "Billing, service, product, or drug code"},
      :programCode
      {:type zen/vector,
       :every
       {:confirms #{CodeableConcept},
        :zen/desc "Program the product or service is provided under"}},
      :factor
      {:confirms #{decimal},
       :type zen/number,
       :zen/desc "Price scaling factor"},
      :bodySite
      {:confirms #{CodeableConcept}, :zen/desc "Anatomical location"},
      :quantity
      {:confirms #{Quantity SimpleQuantity},
       :zen/desc "Count of products or services"},
      :location
      {:type zen/map,
       :zen/desc "Place of service or where product was supplied",
       :keys
       {:CodeableConcept {:confirms #{CodeableConcept}},
        :Address {:confirms #{Address}},
        :Reference {:confirms #{Reference}}},
       :exclusive-keys #{#{:Address :CodeableConcept :Reference}}},
      :provider
      {:type zen/vector,
       :every
       {:confirms #{Reference}, :zen/desc "Authorized providers"}},
      :noteNumber
      {:type zen/vector,
       :every
       {:confirms #{positiveInt},
        :type zen/integer,
        :zen/desc "Applicable note numbers"}},
      :unitPrice
      {:confirms #{Money}, :zen/desc "Fee, charge or cost per item"},
      :detail
      {:type zen/vector,
       :every
       {:confirms #{BackboneElement},
        :require #{:adjudication :productOrService},
        :type zen/map,
        :zen/desc "Insurer added line details",
        :keys
        {:modifier
         {:type zen/vector,
          :every
          {:confirms #{CodeableConcept},
           :zen/desc "Service/Product billing modifiers"}},
         :adjudication
         {:minItems 1,
          :type zen/vector,
          :every #:zen{:desc "Added items detail adjudication"}},
         :net {:confirms #{Money}, :zen/desc "Total item cost"},
         :productOrService
         {:confirms #{CodeableConcept},
          :zen/desc "Billing, service, product, or drug code"},
         :factor
         {:confirms #{decimal},
          :type zen/number,
          :zen/desc "Price scaling factor"},
         :subDetail
         {:type zen/vector,
          :every
          {:confirms #{BackboneElement},
           :require #{:adjudication :productOrService},
           :type zen/map,
           :zen/desc "Insurer added line items",
           :keys
           {:noteNumber
            {:type zen/vector,
             :every
             {:confirms #{positiveInt},
              :type zen/integer,
              :zen/desc "Applicable note numbers"}},
            :factor
            {:confirms #{decimal},
             :type zen/number,
             :zen/desc "Price scaling factor"},
            :net {:confirms #{Money}, :zen/desc "Total item cost"},
            :adjudication
            {:minItems 1,
             :type zen/vector,
             :every #:zen{:desc "Added items detail adjudication"}},
            :productOrService
            {:confirms #{CodeableConcept},
             :zen/desc "Billing, service, product, or drug code"},
            :unitPrice
            {:confirms #{Money},
             :zen/desc "Fee, charge or cost per item"},
            :quantity
            {:confirms #{Quantity SimpleQuantity},
             :zen/desc "Count of products or services"},
            :modifier
            {:type zen/vector,
             :every
             {:confirms #{CodeableConcept},
              :zen/desc "Service/Product billing modifiers"}}}}},
         :quantity
         {:confirms #{Quantity SimpleQuantity},
          :zen/desc "Count of products or services"},
         :noteNumber
         {:type zen/vector,
          :every
          {:confirms #{positiveInt},
           :type zen/integer,
           :zen/desc "Applicable note numbers"}},
         :unitPrice
         {:confirms #{Money},
          :zen/desc "Fee, charge or cost per item"}}}}}}}}},
 ClinicalImpression
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "ClinicalImpression",
  :require #{:status :subject},
  :type zen/map,
  :zen/desc
  "A record of a clinical assessment performed to determine what problem(s) may affect the patient and before planning the treatments or management strategies that are best to manage a patient's condition. Assessments are often 1:1 with a clinical consultation / encounter,  but this varies greatly depending on the clinical workflow. This resource is called \"ClinicalImpression\" rather than \"ClinicalAssessment\" to avoid confusion with the recording of assessment tools such as Apgar score.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/ClinicalImpression",
  :keys
  {:description
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Why/how the assessment was performed"},
   :date
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "When the assessment was documented"},
   :investigation
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:code},
     :type zen/map,
     :zen/desc
     "One or more sets of investigations (signs, symptoms, etc.)",
     :keys
     {:item
      {:type zen/vector,
       :every
       {:confirms #{Reference},
        :zen/desc "Record of a specific investigation"}},
      :code
      {:confirms #{CodeableConcept},
       :zen/desc "A name/code for the set"}}}},
   :protocol
   {:type zen/vector,
    :every
    {:confirms #{uri},
     :type zen/string,
     :zen/desc "Clinical Protocol followed"}},
   :assessor
   {:confirms #{Reference},
    :zen/desc "The clinician performing the assessment"},
   :supportingInfo
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "Information supporting the clinical impression"}},
   :encounter
   {:confirms #{Reference}, :zen/desc "Encounter created as part of"},
   :problem
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "Relevant impressions of patient state"}},
   :statusReason
   {:confirms #{CodeableConcept},
    :zen/desc "Reason for current status"},
   :resourceType
   {:type zen/string, :const {:value "ClinicalImpression"}},
   :note
   {:type zen/vector,
    :every
    {:confirms #{Annotation},
     :zen/desc "Comments made about the ClinicalImpression"}},
   :summary
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Summary of the assessment"},
   :prognosisCodeableConcept
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "Estimate of likely outcome"}},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc "in-progress | completed | entered-in-error"},
   :effective
   {:type zen/map,
    :zen/desc "Time of assessment",
    :keys
    {:dateTime {:confirms #{dateTime}, :type zen/datetime},
     :Period {:confirms #{Period}}},
    :exclusive-keys #{#{:dateTime :Period}}},
   :previous
   {:confirms #{Reference}, :zen/desc "Reference to last assessment"},
   :code
   {:confirms #{CodeableConcept},
    :zen/desc "Kind of assessment performed"},
   :identifier
   {:type zen/vector,
    :every {:confirms #{Identifier}, :zen/desc "Business identifier"}},
   :finding
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc "Possible or likely findings and diagnoses",
     :keys
     {:itemCodeableConcept
      {:confirms #{CodeableConcept}, :zen/desc "What was found"},
      :basis
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Which investigations support finding"},
      :itemReference
      {:confirms #{Reference}, :zen/desc "What was found"}}}},
   :prognosisReference
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "RiskAssessment expressing likely outcome"}},
   :subject
   {:confirms #{Reference}, :zen/desc "Patient or group assessed"}}},
 CodeSystem
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "CodeSystem",
  :require #{:content :status},
  :type zen/map,
  :zen/desc
  "The CodeSystem resource is used to declare the existence of and describe a code system or code system supplement and its key properties, and optionally define a part or all of its content.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/CodeSystem",
  :keys
  {:description
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc "Natural language description of the code system"},
   :date
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "Date last changed"},
   :versionNeeded
   {:confirms #{boolean},
    :type zen/boolean,
    :zen/desc "If definitions are not stable"},
   :publisher
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name of the publisher (organization or individual)"},
   :jurisdiction
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc
     "Intended jurisdiction for code system (if applicable)"}},
   :purpose
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc "Why this code system is defined"},
   :content
   {:confirms #{code},
    :type zen/string,
    :zen/desc
    "not-present | example | fragment | complete | supplement"},
   :property
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:type :code},
     :type zen/map,
     :zen/desc "Additional information supplied about each concept",
     :keys
     {:code
      {:confirms #{code},
       :type zen/string,
       :zen/desc
       "Identifies the property on the concepts, and when referred to in operations"},
      :description
      {:confirms #{string},
       :type zen/string,
       :zen/desc
       "Why the property is defined, and/or what it conveys"},
      :uri
      {:confirms #{uri},
       :type zen/string,
       :zen/desc "Formal identifier for the property"},
      :type
      {:confirms #{code},
       :type zen/string,
       :zen/desc
       "code | Coding | string | integer | boolean | dateTime | decimal"}}}},
   :name
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name for this code system (computer friendly)"},
   :useContext
   {:type zen/vector,
    :every
    {:confirms #{UsageContext},
     :zen/desc "The context that the content is intended to support"}},
   :copyright
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc "Use and/or publishing restrictions"},
   :experimental
   {:confirms #{boolean},
    :type zen/boolean,
    :zen/desc "For testing purposes, not real usage"},
   :resourceType {:type zen/string, :const {:value "CodeSystem"}},
   :title
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name for this code system (human friendly)"},
   :filter
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:value :code :operator},
     :type zen/map,
     :zen/desc "Filter that can be used in a value set",
     :keys
     {:code
      {:confirms #{code},
       :type zen/string,
       :zen/desc "Code that identifies the filter"},
      :description
      {:confirms #{string},
       :type zen/string,
       :zen/desc "How or why the filter is used"},
      :value
      {:confirms #{string},
       :type zen/string,
       :zen/desc "What to use for the value"},
      :operator
      {:minItems 1,
       :type zen/vector,
       :every
       {:confirms #{code},
        :type zen/string,
        :zen/desc
        "= | is-a | descendent-of | is-not-a | regex | in | not-in | generalizes | exists"}}}}},
   :supplements
   {:confirms #{canonical},
    :type zen/string,
    :zen/desc
    "Canonical URL of Code System this adds designations and properties to"},
   :compositional
   {:confirms #{boolean},
    :type zen/boolean,
    :zen/desc "If code system defines a compositional grammar"},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc "draft | active | retired | unknown"},
   :hierarchyMeaning
   {:confirms #{code},
    :type zen/string,
    :zen/desc "grouped-by | is-a | part-of | classified-with"},
   :valueSet
   {:confirms #{canonical},
    :type zen/string,
    :zen/desc
    "Canonical reference to the value set with entire code system"},
   :count
   {:confirms #{unsignedInt},
    :type zen/integer,
    :zen/desc "Total concepts in the code system"},
   :url
   {:confirms #{uri},
    :type zen/string,
    :zen/desc
    "Canonical identifier for this code system, represented as a URI (globally unique) (Coding.system)"},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier},
     :zen/desc
     "Additional identifier for the code system (business identifier)"}},
   :concept
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:code},
     :type zen/map,
     :zen/desc "Concepts in the code system",
     :keys
     {:designation
      {:type zen/vector,
       :every
       {:confirms #{BackboneElement},
        :require #{:value},
        :type zen/map,
        :zen/desc "Additional representations for the concept",
        :keys
        {:use
         {:confirms #{Coding},
          :zen/desc "Details how this designation would be used"},
         :value
         {:confirms #{string},
          :type zen/string,
          :zen/desc "The text value for this designation"},
         :language
         {:confirms #{code},
          :type zen/string,
          :zen/desc "Human language of the designation"}}}},
      :display
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Text to display to the user"},
      :property
      {:type zen/vector,
       :every
       {:confirms #{BackboneElement},
        :require #{:value :code},
        :type zen/map,
        :zen/desc "Property value for the concept",
        :keys
        {:code
         {:confirms #{code},
          :type zen/string,
          :zen/desc "Reference to CodeSystem.property.code"},
         :value
         {:type zen/map,
          :zen/desc "Value of the property for this concept",
          :keys
          {:code {:confirms #{code}, :type zen/string},
           :Coding {:confirms #{Coding}},
           :string {:confirms #{string}, :type zen/string},
           :integer {:confirms #{integer}, :type zen/integer},
           :boolean {:confirms #{boolean}, :type zen/boolean},
           :dateTime {:confirms #{dateTime}, :type zen/datetime},
           :decimal {:confirms #{decimal}, :type zen/number}},
          :exclusive-keys
          #{#{:string
              :dateTime
              :integer
              :decimal
              :code
              :Coding
              :boolean}}}}}},
      :concept
      {:type zen/vector,
       :every
       #:zen{:desc "Child Concepts (is-a/contains/categorizes)"}},
      :definition
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Formal definition"},
      :code
      {:confirms #{code},
       :type zen/string,
       :zen/desc "Code that identifies concept"}}}},
   :caseSensitive
   {:confirms #{boolean},
    :type zen/boolean,
    :zen/desc "If code comparison is case sensitive"},
   :version
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Business version of the code system (Coding.version)"},
   :contact
   {:type zen/vector,
    :every
    {:confirms #{ContactDetail},
     :zen/desc "Contact details for the publisher"}}}},
 Communication
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "Communication",
  :require #{:status},
  :type zen/map,
  :zen/desc
  "An occurrence of information being transmitted; e.g. an alert that was sent to a responsible provider, a public health agency that was notified about a reportable condition.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/Communication",
  :keys
  {:category
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept}, :zen/desc "Message category"}},
   :received
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "When received"},
   :instantiatesCanonical
   {:type zen/vector,
    :every
    {:confirms #{canonical},
     :type zen/string,
     :zen/desc "Instantiates FHIR protocol or definition"}},
   :payload
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:content},
     :type zen/map,
     :zen/desc "Message payload",
     :keys
     {:content
      {:type zen/map,
       :zen/desc "Message part content",
       :keys
       {:string {:confirms #{string}, :type zen/string},
        :Attachment {:confirms #{Attachment}},
        :Reference {:confirms #{Reference}}},
       :exclusive-keys #{#{:string :Attachment :Reference}}}}}},
   :instantiatesUri
   {:type zen/vector,
    :every
    {:confirms #{uri},
     :type zen/string,
     :zen/desc "Instantiates external protocol or definition"}},
   :encounter
   {:confirms #{Reference}, :zen/desc "Encounter created as part of"},
   :medium
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "A channel of communication"}},
   :recipient
   {:type zen/vector,
    :every {:confirms #{Reference}, :zen/desc "Message recipient"}},
   :reasonCode
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "Indication for message"}},
   :statusReason
   {:confirms #{CodeableConcept},
    :zen/desc "Reason for current status"},
   :topic
   {:confirms #{CodeableConcept},
    :zen/desc "Description of the purpose/content"},
   :resourceType {:type zen/string, :const {:value "Communication"}},
   :sent
   {:confirms #{dateTime}, :type zen/datetime, :zen/desc "When sent"},
   :note
   {:type zen/vector,
    :every
    {:confirms #{Annotation},
     :zen/desc "Comments made about the communication"}},
   :priority
   {:confirms #{code},
    :type zen/string,
    :zen/desc "routine | urgent | asap | stat"},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc
    "preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown"},
   :sender {:confirms #{Reference}, :zen/desc "Message sender"},
   :identifier
   {:type zen/vector,
    :every {:confirms #{Identifier}, :zen/desc "Unique identifier"}},
   :inResponseTo
   {:type zen/vector,
    :every {:confirms #{Reference}, :zen/desc "Reply to"}},
   :basedOn
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "Request fulfilled by this communication"}},
   :partOf
   {:type zen/vector,
    :every {:confirms #{Reference}, :zen/desc "Part of this action"}},
   :subject {:confirms #{Reference}, :zen/desc "Focus of message"},
   :about
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "Resources that pertain to this communication"}},
   :reasonReference
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "Why was communication done?"}}}},
 CommunicationRequest
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "CommunicationRequest",
  :require #{:status},
  :type zen/map,
  :zen/desc
  "A request to convey information; e.g. the CDS system proposes that an alert be sent to a responsible provider, the CDS system proposes that the public health agency be notified about a reportable condition.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/CommunicationRequest",
  :keys
  {:category
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept}, :zen/desc "Message category"}},
   :payload
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:content},
     :type zen/map,
     :zen/desc "Message payload",
     :keys
     {:content
      {:type zen/map,
       :zen/desc "Message part content",
       :keys
       {:string {:confirms #{string}, :type zen/string},
        :Attachment {:confirms #{Attachment}},
        :Reference {:confirms #{Reference}}},
       :exclusive-keys #{#{:string :Attachment :Reference}}}}}},
   :encounter
   {:confirms #{Reference}, :zen/desc "Encounter created as part of"},
   :medium
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "A channel of communication"}},
   :recipient
   {:type zen/vector,
    :every {:confirms #{Reference}, :zen/desc "Message recipient"}},
   :reasonCode
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "Why is communication needed?"}},
   :statusReason
   {:confirms #{CodeableConcept},
    :zen/desc "Reason for current status"},
   :authoredOn
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "When request transitioned to being actionable"},
   :resourceType
   {:type zen/string, :const {:value "CommunicationRequest"}},
   :note
   {:type zen/vector,
    :every
    {:confirms #{Annotation},
     :zen/desc "Comments made about communication request"}},
   :requester
   {:confirms #{Reference},
    :zen/desc "Who/what is requesting service"},
   :priority
   {:confirms #{code},
    :type zen/string,
    :zen/desc "routine | urgent | asap | stat"},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc
    "draft | active | on-hold | revoked | completed | entered-in-error | unknown"},
   :groupIdentifier
   {:confirms #{Identifier},
    :zen/desc "Composite request this is part of"},
   :sender {:confirms #{Reference}, :zen/desc "Message sender"},
   :identifier
   {:type zen/vector,
    :every {:confirms #{Identifier}, :zen/desc "Unique identifier"}},
   :doNotPerform
   {:confirms #{boolean},
    :type zen/boolean,
    :zen/desc "True if request is prohibiting action"},
   :replaces
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "Request(s) replaced by this request"}},
   :basedOn
   {:type zen/vector,
    :every
    {:confirms #{Reference}, :zen/desc "Fulfills plan or proposal"}},
   :subject {:confirms #{Reference}, :zen/desc "Focus of message"},
   :occurrence
   {:type zen/map,
    :zen/desc "When scheduled",
    :keys
    {:dateTime {:confirms #{dateTime}, :type zen/datetime},
     :Period {:confirms #{Period}}},
    :exclusive-keys #{#{:dateTime :Period}}},
   :about
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc
     "Resources that pertain to this communication request"}},
   :reasonReference
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "Why is communication needed?"}}}},
 CompartmentDefinition
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "CompartmentDefinition",
  :require #{:name :search :status :url :code},
  :type zen/map,
  :zen/desc
  "A compartment definition that defines how resources are accessed on a server.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/CompartmentDefinition",
  :keys
  {:description
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc
    "Natural language description of the compartment definition"},
   :date
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "Date last changed"},
   :publisher
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name of the publisher (organization or individual)"},
   :purpose
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc "Why this compartment definition is defined"},
   :name
   {:confirms #{string},
    :type zen/string,
    :zen/desc
    "Name for this compartment definition (computer friendly)"},
   :useContext
   {:type zen/vector,
    :every
    {:confirms #{UsageContext},
     :zen/desc "The context that the content is intended to support"}},
   :experimental
   {:confirms #{boolean},
    :type zen/boolean,
    :zen/desc "For testing purposes, not real usage"},
   :resourceType
   {:type zen/string, :const {:value "CompartmentDefinition"}},
   :search
   {:confirms #{boolean},
    :type zen/boolean,
    :zen/desc "Whether the search syntax is supported"},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc "draft | active | retired | unknown"},
   :resource
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:code},
     :type zen/map,
     :zen/desc "How a resource is related to the compartment",
     :keys
     {:param
      {:type zen/vector,
       :every
       {:confirms #{string},
        :type zen/string,
        :zen/desc "Search Parameter Name, or chained parameters"}},
      :code
      {:confirms #{code},
       :type zen/string,
       :zen/desc "Name of resource type"},
      :documentation
      {:confirms #{string},
       :type zen/string,
       :zen/desc
       "Additional documentation about the resource and compartment"}}}},
   :url
   {:confirms #{uri},
    :type zen/string,
    :zen/desc
    "Canonical identifier for this compartment definition, represented as a URI (globally unique)"},
   :code
   {:confirms #{code},
    :type zen/string,
    :zen/desc
    "Patient | Encounter | RelatedPerson | Practitioner | Device"},
   :version
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Business version of the compartment definition"},
   :contact
   {:type zen/vector,
    :every
    {:confirms #{ContactDetail},
     :zen/desc "Contact details for the publisher"}}}},
 Composition
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "Composition",
  :require #{:date :type :title :author :status},
  :type zen/map,
  :zen/desc
  "A set of healthcare-related information that is assembled together into a single logical package that provides a single coherent statement of meaning, establishes its own context and that has clinical attestation with regard to who is making the statement. A Composition defines the structure and narrative content necessary for a document. However, a Composition alone does not constitute a document. Rather, the Composition must be the first entry in a Bundle where Bundle.type=document, and any other resources referenced from Composition must be included as subsequent entries in the Bundle (for example Patient, Practitioner, Encounter, etc.).",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/Composition",
  :keys
  {:category
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "Categorization of Composition"}},
   :date
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "Composition editing time"},
   :encounter
   {:confirms #{Reference}, :zen/desc "Context of the Composition"},
   :section
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc "Composition is broken into sections",
     :keys
     {:orderedBy
      {:confirms #{CodeableConcept},
       :zen/desc "Order of section entries"},
      :section
      {:type zen/vector, :every #:zen{:desc "Nested Section"}},
      :mode
      {:confirms #{code},
       :type zen/string,
       :zen/desc "working | snapshot | changes"},
      :title
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Label for section (e.g. for ToC)"},
      :emptyReason
      {:confirms #{CodeableConcept},
       :zen/desc "Why the section is empty"},
      :author
      {:type zen/vector,
       :every
       {:confirms #{Reference},
        :zen/desc "Who and/or what authored the section"}},
      :code
      {:confirms #{CodeableConcept},
       :zen/desc "Classification of section (recommended)"},
      :focus
      {:confirms #{Reference},
       :zen/desc
       "Who/what the section is about, when it is not about the subject of composition"},
      :entry
      {:type zen/vector,
       :every
       {:confirms #{Reference},
        :zen/desc "A reference to data that supports this section"}},
      :text
      {:confirms #{Narrative},
       :zen/desc
       "Text summary of the section, for human interpretation"}}}},
   :attester
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:mode},
     :type zen/map,
     :zen/desc "Attests to accuracy of composition",
     :keys
     {:party
      {:confirms #{Reference},
       :zen/desc "Who attested the composition"},
      :mode
      {:confirms #{code},
       :type zen/string,
       :zen/desc "personal | professional | legal | official"},
      :time
      {:confirms #{dateTime},
       :type zen/datetime,
       :zen/desc "When the composition was attested"}}}},
   :type
   {:confirms #{CodeableConcept},
    :zen/desc "Kind of composition (LOINC if possible)"},
   :resourceType {:type zen/string, :const {:value "Composition"}},
   :title
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Human Readable name/title"},
   :author
   {:minItems 1,
    :type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "Who and/or what authored the composition"}},
   :event
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc "The clinical service(s) being documented",
     :keys
     {:code
      {:type zen/vector,
       :every
       {:confirms #{CodeableConcept},
        :zen/desc "Code(s) that apply to the event being documented"}},
      :detail
      {:type zen/vector,
       :every
       {:confirms #{Reference},
        :zen/desc "The event(s) being documented"}},
      :period
      {:confirms #{Period},
       :zen/desc "The period covered by the documentation"}}}},
   :custodian
   {:confirms #{Reference},
    :zen/desc "Organization which maintains the composition"},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc "preliminary | final | amended | entered-in-error"},
   :identifier
   {:confirms #{Identifier},
    :zen/desc "Version-independent identifier for the Composition"},
   :relatesTo
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:code :target},
     :type zen/map,
     :zen/desc "Relationships to other compositions/documents",
     :keys
     {:target
      {:type zen/map,
       :zen/desc "Target of the relationship",
       :keys
       {:Identifier {:confirms #{Identifier}},
        :Reference {:confirms #{Reference}}},
       :exclusive-keys #{#{:Identifier :Reference}}},
      :code
      {:confirms #{code},
       :type zen/string,
       :zen/desc "replaces | transforms | signs | appends"}}}},
   :subject
   {:confirms #{Reference},
    :zen/desc "Who and/or what the composition is about"},
   :confidentiality
   {:confirms #{code},
    :type zen/string,
    :zen/desc "As defined by affinity domain"}}},
 ConceptMap
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "ConceptMap",
  :require #{:status},
  :type zen/map,
  :zen/desc
  "A statement of relationships from one set of concepts to one or more other concepts - either concepts in code systems, or data element/data element concepts, or classes in class models.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/ConceptMap",
  :keys
  {:description
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc "Natural language description of the concept map"},
   :date
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "Date last changed"},
   :group
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:element},
     :type zen/map,
     :zen/desc "Same source and target systems",
     :keys
     {:unmapped
      {:confirms #{BackboneElement},
       :require #{:mode},
       :type zen/map,
       :zen/desc
       "What to do when there is no mapping for the source concept",
       :keys
       {:url
        {:confirms #{canonical},
         :type zen/string,
         :zen/desc
         "canonical reference to an additional ConceptMap to use for mapping if the source concept is unmapped"},
        :mode
        {:confirms #{code},
         :type zen/string,
         :zen/desc "provided | fixed | other-map"},
        :display
        {:confirms #{string},
         :type zen/string,
         :zen/desc "Display for the code"},
        :code
        {:confirms #{code},
         :type zen/string,
         :zen/desc "Fixed code when mode = fixed"}}},
      :element
      {:minItems 1,
       :type zen/vector,
       :every
       {:confirms #{BackboneElement},
        :type zen/map,
        :zen/desc "Mappings for a concept from the source set",
        :keys
        {:code
         {:confirms #{code},
          :type zen/string,
          :zen/desc "Identifies element being mapped"},
         :target
         {:type zen/vector,
          :every
          {:confirms #{BackboneElement},
           :require #{:equivalence},
           :type zen/map,
           :zen/desc "Concept in target system for element",
           :keys
           {:code
            {:confirms #{code},
             :type zen/string,
             :zen/desc "Code that identifies the target element"},
            :comment
            {:confirms #{string},
             :type zen/string,
             :zen/desc "Description of status/issues in mapping"},
            :dependsOn
            {:type zen/vector,
             :every
             {:confirms #{BackboneElement},
              :require #{:property :value},
              :type zen/map,
              :zen/desc
              "Other elements required for this mapping (from context)",
              :keys
              {:property
               {:confirms #{uri},
                :type zen/string,
                :zen/desc "Reference to property mapping depends on"},
               :system
               {:confirms #{canonical},
                :type zen/string,
                :zen/desc "Code System (if necessary)"},
               :value
               {:confirms #{string},
                :type zen/string,
                :zen/desc "Value of the referenced element"},
               :display
               {:confirms #{string},
                :type zen/string,
                :zen/desc
                "Display for the code (if value is a code)"}}}},
            :display
            {:confirms #{string},
             :type zen/string,
             :zen/desc "Display for the code"},
            :equivalence
            {:confirms #{code},
             :type zen/string,
             :zen/desc
             "relatedto | equivalent | equal | wider | subsumes | narrower | specializes | inexact | unmatched | disjoint"},
            :product
            {:type zen/vector,
             :every
             #:zen{:desc
                   "Other concepts that this mapping also produces"}}}}},
         :display
         {:confirms #{string},
          :type zen/string,
          :zen/desc "Display for the code"}}}},
      :sourceVersion
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Specific version of the  code system"},
      :target
      {:confirms #{uri},
       :type zen/string,
       :zen/desc
       "Target system that the concepts are to be mapped to"},
      :source
      {:confirms #{uri},
       :type zen/string,
       :zen/desc
       "Source system where concepts to be mapped are defined"},
      :targetVersion
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Specific version of the  code system"}}}},
   :publisher
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name of the publisher (organization or individual)"},
   :jurisdiction
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc
     "Intended jurisdiction for concept map (if applicable)"}},
   :purpose
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc "Why this concept map is defined"},
   :name
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name for this concept map (computer friendly)"},
   :useContext
   {:type zen/vector,
    :every
    {:confirms #{UsageContext},
     :zen/desc "The context that the content is intended to support"}},
   :copyright
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc "Use and/or publishing restrictions"},
   :experimental
   {:confirms #{boolean},
    :type zen/boolean,
    :zen/desc "For testing purposes, not real usage"},
   :resourceType {:type zen/string, :const {:value "ConceptMap"}},
   :source
   {:type zen/map,
    :zen/desc
    "The source value set that contains the concepts that are being mapped",
    :keys
    {:uri {:confirms #{uri}, :type zen/string},
     :canonical {:confirms #{canonical}, :type zen/string}},
    :exclusive-keys #{#{:canonical :uri}}},
   :title
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name for this concept map (human friendly)"},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc "draft | active | retired | unknown"},
   :url
   {:confirms #{uri},
    :type zen/string,
    :zen/desc
    "Canonical identifier for this concept map, represented as a URI (globally unique)"},
   :identifier
   {:confirms #{Identifier},
    :zen/desc "Additional identifier for the concept map"},
   :target
   {:type zen/map,
    :zen/desc
    "The target value set which provides context for the mappings",
    :keys
    {:uri {:confirms #{uri}, :type zen/string},
     :canonical {:confirms #{canonical}, :type zen/string}},
    :exclusive-keys #{#{:canonical :uri}}},
   :version
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Business version of the concept map"},
   :contact
   {:type zen/vector,
    :every
    {:confirms #{ContactDetail},
     :zen/desc "Contact details for the publisher"}}}},
 Condition
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "Condition",
  :require #{:subject},
  :type zen/map,
  :zen/desc
  "A clinical condition, problem, diagnosis, or other event, situation, issue, or clinical concept that has risen to a level of concern.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/Condition",
  :keys
  {:onset
   {:type zen/map,
    :zen/desc "Estimated or actual date,  date-time, or age",
    :keys
    {:dateTime {:confirms #{dateTime}, :type zen/datetime},
     :Age {:confirms #{Age}},
     :Period {:confirms #{Period}},
     :Range {:confirms #{Range}},
     :string {:confirms #{string}, :type zen/string}},
    :exclusive-keys #{#{:string :dateTime :Range :Period :Age}}},
   :category
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "problem-list-item | encounter-diagnosis"}},
   :clinicalStatus
   {:confirms #{CodeableConcept},
    :zen/desc
    "active | recurrence | relapse | inactive | remission | resolved"},
   :stage
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc "Stage/grade, usually assessed formally",
     :keys
     {:summary
      {:confirms #{CodeableConcept},
       :zen/desc "Simple summary (disease specific)"},
      :assessment
      {:type zen/vector,
       :every
       {:confirms #{Reference},
        :zen/desc "Formal record of assessment"}},
      :type
      {:confirms #{CodeableConcept}, :zen/desc "Kind of staging"}}}},
   :encounter
   {:confirms #{Reference}, :zen/desc "Encounter created as part of"},
   :evidence
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc "Supporting evidence",
     :keys
     {:code
      {:type zen/vector,
       :every
       {:confirms #{CodeableConcept},
        :zen/desc "Manifestation/symptom"}},
      :detail
      {:type zen/vector,
       :every
       {:confirms #{Reference},
        :zen/desc "Supporting information found elsewhere"}}}}},
   :abatement
   {:type zen/map,
    :zen/desc "When in resolution/remission",
    :keys
    {:dateTime {:confirms #{dateTime}, :type zen/datetime},
     :Age {:confirms #{Age}},
     :Period {:confirms #{Period}},
     :Range {:confirms #{Range}},
     :string {:confirms #{string}, :type zen/string}},
    :exclusive-keys #{#{:string :dateTime :Range :Period :Age}}},
   :resourceType {:type zen/string, :const {:value "Condition"}},
   :asserter
   {:confirms #{Reference},
    :zen/desc "Person who asserts this condition"},
   :note
   {:type zen/vector,
    :every
    {:confirms #{Annotation},
     :zen/desc "Additional information about the Condition"}},
   :recordedDate
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "Date record was first recorded"},
   :recorder
   {:confirms #{Reference}, :zen/desc "Who recorded the condition"},
   :severity
   {:confirms #{CodeableConcept},
    :zen/desc "Subjective severity of condition"},
   :code
   {:confirms #{CodeableConcept},
    :zen/desc "Identification of the condition, problem or diagnosis"},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier},
     :zen/desc "External Ids for this condition"}},
   :bodySite
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "Anatomical location, if relevant"}},
   :verificationStatus
   {:confirms #{CodeableConcept},
    :zen/desc
    "unconfirmed | provisional | differential | confirmed | refuted | entered-in-error"},
   :subject
   {:confirms #{Reference}, :zen/desc "Who has the condition?"}}},
 Consent
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "Consent",
  :require #{:category :scope :status},
  :type zen/map,
  :zen/desc
  "A record of a healthcare consumer’s  choices, which permits or denies identified recipient(s) or recipient role(s) to perform one or more actions within a given policy context, for specific purposes and periods of time.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/Consent",
  :keys
  {:patient
   {:confirms #{Reference}, :zen/desc "Who the consent applies to"},
   :category
   {:minItems 1,
    :type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc
     "Classification of the consent statement - for indexing/retrieval"}},
   :provision
   {:confirms #{BackboneElement},
    :type zen/map,
    :zen/desc "Constraints to the base Consent.policyRule",
    :keys
    {:provision
     {:type zen/vector, :every #:zen{:desc "Nested Exception Rules"}},
     :purpose
     {:type zen/vector,
      :every
      {:confirms #{Coding},
       :zen/desc "Context of activities covered by this rule"}},
     :dataPeriod
     {:confirms #{Period},
      :zen/desc "Timeframe for data controlled by this rule"},
     :type
     {:confirms #{code}, :type zen/string, :zen/desc "deny | permit"},
     :class
     {:type zen/vector,
      :every
      {:confirms #{Coding},
       :zen/desc "e.g. Resource Type, Profile, CDA, etc."}},
     :code
     {:type zen/vector,
      :every
      {:confirms #{CodeableConcept},
       :zen/desc "e.g. LOINC or SNOMED CT code, etc. in the content"}},
     :action
     {:type zen/vector,
      :every
      {:confirms #{CodeableConcept},
       :zen/desc "Actions controlled by this rule"}},
     :period
     {:confirms #{Period}, :zen/desc "Timeframe for this rule"},
     :securityLabel
     {:type zen/vector,
      :every
      {:confirms #{Coding},
       :zen/desc "Security Labels that define affected resources"}},
     :actor
     {:type zen/vector,
      :every
      {:confirms #{BackboneElement},
       :require #{:role :reference},
       :type zen/map,
       :zen/desc
       "Who|what controlled by this rule (or group, by role)",
       :keys
       {:reference
        {:confirms #{Reference},
         :zen/desc "Resource for the actor (or group, by role)"},
        :role
        {:confirms #{CodeableConcept},
         :zen/desc "How the actor is involved"}}}},
     :data
     {:type zen/vector,
      :every
      {:confirms #{BackboneElement},
       :require #{:reference :meaning},
       :type zen/map,
       :zen/desc "Data controlled by this rule",
       :keys
       {:reference
        {:confirms #{Reference},
         :zen/desc "The actual data reference"},
        :meaning
        {:confirms #{code},
         :type zen/string,
         :zen/desc
         "instance | related | dependents | authoredby"}}}}}},
   :organization
   {:type zen/vector,
    :every
    {:confirms #{Reference}, :zen/desc "Custodian of the consent"}},
   :verification
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:verified},
     :type zen/map,
     :zen/desc "Consent Verified by patient or family",
     :keys
     {:verificationDate
      {:confirms #{dateTime},
       :type zen/datetime,
       :zen/desc "When consent verified"},
      :verifiedWith
      {:confirms #{Reference}, :zen/desc "Person who verified"},
      :verified
      {:confirms #{boolean},
       :type zen/boolean,
       :zen/desc "Has been verified"}}}},
   :resourceType {:type zen/string, :const {:value "Consent"}},
   :source
   {:type zen/map,
    :zen/desc "Source from which this consent is taken",
    :keys
    {:Attachment {:confirms #{Attachment}},
     :Reference {:confirms #{Reference}}},
    :exclusive-keys #{#{:Attachment :Reference}}},
   :scope
   {:confirms #{CodeableConcept},
    :zen/desc
    "Which of the four areas this resource covers (extensible)"},
   :policy
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc "Policies covered by this consent",
     :keys
     {:uri
      {:confirms #{uri},
       :type zen/string,
       :zen/desc "Specific policy covered by this consent"},
      :authority
      {:confirms #{uri},
       :type zen/string,
       :zen/desc "Enforcement source for policy"}}}},
   :dateTime
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "When this Consent was created or indexed"},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc
    "draft | proposed | active | rejected | inactive | entered-in-error"},
   :policyRule
   {:confirms #{CodeableConcept},
    :zen/desc "Regulation that this consents to"},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier},
     :zen/desc "Identifier for this record (external references)"}},
   :performer
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "Who is agreeing to the policy and rules"}}}},
 Contract
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "Contract",
  :type zen/map,
  :zen/desc
  "Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or agreement.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/Contract",
  :keys
  {:instantiatesCanonical
   {:confirms #{Reference}, :zen/desc "Source Contract Definition"},
   :instantiatesUri
   {:confirms #{uri},
    :type zen/string,
    :zen/desc "External Contract Definition"},
   :site
   {:type zen/vector,
    :every {:confirms #{Reference}, :zen/desc "Specific Location"}},
   :relevantHistory
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "Key event in Contract History"}},
   :supportingInfo
   {:type zen/vector,
    :every {:confirms #{Reference}, :zen/desc "Extra Information"}},
   :applies {:confirms #{Period}, :zen/desc "Effective time"},
   :name
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Computer friendly designation"},
   :authority
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "Authority under which this Contract has standing"}},
   :rule
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:content},
     :type zen/map,
     :zen/desc "Computable Contract Language",
     :keys
     {:content
      {:type zen/map,
       :zen/desc "Computable Contract Rules",
       :keys
       {:Attachment {:confirms #{Attachment}},
        :Reference {:confirms #{Reference}}},
       :exclusive-keys #{#{:Attachment :Reference}}}}}},
   :type
   {:confirms #{CodeableConcept},
    :zen/desc "Legal instrument category"},
   :legal
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:content},
     :type zen/map,
     :zen/desc "Contract Legal Language",
     :keys
     {:content
      {:type zen/map,
       :zen/desc "Contract Legal Text",
       :keys
       {:Attachment {:confirms #{Attachment}},
        :Reference {:confirms #{Reference}}},
       :exclusive-keys #{#{:Attachment :Reference}}}}}},
   :contentDerivative
   {:confirms #{CodeableConcept},
    :zen/desc "Content derived from the basal information"},
   :topic
   {:type zen/map,
    :zen/desc "Focus of contract interest",
    :keys
    {:CodeableConcept {:confirms #{CodeableConcept}},
     :Reference {:confirms #{Reference}}},
    :exclusive-keys #{#{:CodeableConcept :Reference}}},
   :legalState
   {:confirms #{CodeableConcept}, :zen/desc "Negotiation status"},
   :resourceType {:type zen/string, :const {:value "Contract"}},
   :contentDefinition
   {:confirms #{BackboneElement},
    :require #{:type :publicationStatus},
    :type zen/map,
    :zen/desc "Contract precursor content",
    :keys
    {:publisher {:confirms #{Reference}, :zen/desc "Publisher Entity"},
     :publicationDate
     {:confirms #{dateTime},
      :type zen/datetime,
      :zen/desc "When published"},
     :publicationStatus
     {:confirms #{code},
      :type zen/string,
      :zen/desc
      "amended | appended | cancelled | disputed | entered-in-error | executable | executed | negotiable | offered | policy | rejected | renewed | revoked | resolved | terminated"},
     :copyright
     {:confirms #{markdown},
      :type zen/string,
      :zen/desc "Publication Ownership"},
     :type
     {:confirms #{CodeableConcept},
      :zen/desc "Content structure and use"},
     :subType
     {:confirms #{CodeableConcept},
      :zen/desc "Detailed Content Type Definition"}}},
   :scope
   {:confirms #{CodeableConcept}, :zen/desc "Range of Legal Concerns"},
   :title
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Human Friendly name"},
   :signer
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:party :signature :type},
     :type zen/map,
     :zen/desc "Contract Signatory",
     :keys
     {:party
      {:confirms #{Reference}, :zen/desc "Contract Signatory Party"},
      :type {:confirms #{Coding}, :zen/desc "Contract Signatory Role"},
      :signature
      {:minItems 1,
       :type zen/vector,
       :every
       {:confirms #{Signature},
        :zen/desc "Contract Documentation Signature"}}}}},
   :author {:confirms #{Reference}, :zen/desc "Source of Contract"},
   :term
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:offer},
     :type zen/map,
     :zen/desc "Contract Term List",
     :keys
     {:group
      {:type zen/vector,
       :every #:zen{:desc "Nested Contract Term Group"}},
      :applies
      {:confirms #{Period}, :zen/desc "Contract Term Effective Time"},
      :offer
      {:confirms #{BackboneElement},
       :type zen/map,
       :zen/desc "Context of the Contract term",
       :keys
       {:party
        {:type zen/vector,
         :every
         {:confirms #{BackboneElement},
          :require #{:role :reference},
          :type zen/map,
          :zen/desc "Offer Recipient",
          :keys
          {:reference
           {:minItems 1,
            :type zen/vector,
            :every
            {:confirms #{Reference}, :zen/desc "Referenced entity"}},
           :role
           {:confirms #{CodeableConcept},
            :zen/desc "Participant engagement type"}}}},
        :linkId
        {:type zen/vector,
         :every
         {:confirms #{string},
          :type zen/string,
          :zen/desc "Pointer to text"}},
        :decisionMode
        {:type zen/vector,
         :every
         {:confirms #{CodeableConcept},
          :zen/desc "How decision is conveyed"}},
        :type
        {:confirms #{CodeableConcept},
         :zen/desc "Contract Offer Type or Form"},
        :topic
        {:confirms #{Reference}, :zen/desc "Negotiable offer asset"},
        :securityLabelNumber
        {:type zen/vector,
         :every
         {:confirms #{unsignedInt},
          :type zen/integer,
          :zen/desc "Offer restriction numbers"}},
        :answer
        {:type zen/vector,
         :every
         {:confirms #{BackboneElement},
          :require #{:value},
          :type zen/map,
          :zen/desc "Response to offer text",
          :keys
          {:value
           {:type zen/map,
            :zen/desc "The actual answer response",
            :keys
            {:date {:confirms #{date}, :type zen/date},
             :time {:confirms #{time}, :type zen/string},
             :string {:confirms #{string}, :type zen/string},
             :dateTime {:confirms #{dateTime}, :type zen/datetime},
             :integer {:confirms #{integer}, :type zen/integer},
             :decimal {:confirms #{decimal}, :type zen/number},
             :Attachment {:confirms #{Attachment}},
             :Coding {:confirms #{Coding}},
             :uri {:confirms #{uri}, :type zen/string},
             :Quantity {:confirms #{Quantity}},
             :boolean {:confirms #{boolean}, :type zen/boolean},
             :Reference {:confirms #{Reference}}},
            :exclusive-keys
            #{#{:date
                :time
                :string
                :dateTime
                :integer
                :decimal
                :Attachment
                :Coding
                :uri
                :Quantity
                :boolean
                :Reference}}}}}},
        :identifier
        {:type zen/vector,
         :every
         {:confirms #{Identifier}, :zen/desc "Offer business ID"}},
        :decision
        {:confirms #{CodeableConcept},
         :zen/desc "Accepting party choice"},
        :text
        {:confirms #{string},
         :type zen/string,
         :zen/desc "Human readable offer text"}}},
      :type
      {:confirms #{CodeableConcept},
       :zen/desc "Contract Term Type or Form"},
      :topic
      {:type zen/map,
       :zen/desc "Term Concern",
       :keys
       {:CodeableConcept {:confirms #{CodeableConcept}},
        :Reference {:confirms #{Reference}}},
       :exclusive-keys #{#{:CodeableConcept :Reference}}},
      :identifier
      {:confirms #{Identifier}, :zen/desc "Contract Term Number"},
      :action
      {:type zen/vector,
       :every
       {:confirms #{BackboneElement},
        :require #{:type :status :intent},
        :type zen/map,
        :zen/desc "Entity being ascribed responsibility",
        :keys
        {:requesterLinkId
         {:type zen/vector,
          :every
          {:confirms #{string},
           :type zen/string,
           :zen/desc "Pointer to specific item"}},
         :performerType
         {:type zen/vector,
          :every
          {:confirms #{CodeableConcept},
           :zen/desc "Kind of service performer"}},
         :linkId
         {:type zen/vector,
          :every
          {:confirms #{string},
           :type zen/string,
           :zen/desc "Pointer to specific item"}},
         :performerRole
         {:confirms #{CodeableConcept},
          :zen/desc "Competency of the performer"},
         :reasonLinkId
         {:type zen/vector,
          :every
          {:confirms #{string},
           :type zen/string,
           :zen/desc "Pointer to specific item"}},
         :reasonCode
         {:type zen/vector,
          :every
          {:confirms #{CodeableConcept},
           :zen/desc "Why is action (not) needed?"}},
         :type
         {:confirms #{CodeableConcept},
          :zen/desc "Type or form of the action"},
         :note
         {:type zen/vector,
          :every
          {:confirms #{Annotation},
           :zen/desc "Comments about the action"}},
         :reason
         {:type zen/vector,
          :every
          {:confirms #{string},
           :type zen/string,
           :zen/desc "Why action is to be performed"}},
         :requester
         {:type zen/vector,
          :every
          {:confirms #{Reference}, :zen/desc "Who asked for action"}},
         :securityLabelNumber
         {:type zen/vector,
          :every
          {:confirms #{unsignedInt},
           :type zen/integer,
           :zen/desc "Action restriction numbers"}},
         :status
         {:confirms #{CodeableConcept},
          :zen/desc "State of the action"},
         :doNotPerform
         {:confirms #{boolean},
          :type zen/boolean,
          :zen/desc "True if the term prohibits the  action"},
         :context
         {:confirms #{Reference},
          :zen/desc "Episode associated with action"},
         :intent
         {:confirms #{CodeableConcept},
          :zen/desc "Purpose for the Contract Term Action"},
         :performerLinkId
         {:type zen/vector,
          :every
          {:confirms #{string},
           :type zen/string,
           :zen/desc "Pointer to specific item"}},
         :subject
         {:type zen/vector,
          :every
          {:confirms #{BackboneElement},
           :require #{:reference},
           :type zen/map,
           :zen/desc "Entity of the action",
           :keys
           {:reference
            {:minItems 1,
             :type zen/vector,
             :every
             {:confirms #{Reference},
              :zen/desc "Entity of the action"}},
            :role
            {:confirms #{CodeableConcept},
             :zen/desc "Role type of the agent"}}}},
         :occurrence
         {:type zen/map,
          :zen/desc "When action happens",
          :keys
          {:dateTime {:confirms #{dateTime}, :type zen/datetime},
           :Period {:confirms #{Period}},
           :Timing {:confirms #{Timing}}},
          :exclusive-keys #{#{:dateTime :Period :Timing}}},
         :performer
         {:confirms #{Reference},
          :zen/desc "Actor that wil execute (or not) the action"},
         :contextLinkId
         {:type zen/vector,
          :every
          {:confirms #{string},
           :type zen/string,
           :zen/desc "Pointer to specific item"}},
         :reasonReference
         {:type zen/vector,
          :every
          {:confirms #{Reference},
           :zen/desc "Why is action (not) needed?"}}}}},
      :issued
      {:confirms #{dateTime},
       :type zen/datetime,
       :zen/desc "Contract Term Issue Date Time"},
      :subType
      {:confirms #{CodeableConcept},
       :zen/desc "Contract Term Type specific classification"},
      :securityLabel
      {:type zen/vector,
       :every
       {:confirms #{BackboneElement},
        :require #{:classification},
        :type zen/map,
        :zen/desc "Protection for the Term",
        :keys
        {:classification
         {:confirms #{Coding}, :zen/desc "Confidentiality Protection"},
         :number
         {:type zen/vector,
          :every
          {:confirms #{unsignedInt},
           :type zen/integer,
           :zen/desc "Link to Security Labels"}},
         :control
         {:type zen/vector,
          :every
          {:confirms #{Coding}, :zen/desc "Handling Instructions"}},
         :category
         {:type zen/vector,
          :every
          {:confirms #{Coding}, :zen/desc "Applicable Policy"}}}}},
      :asset
      {:type zen/vector,
       :every
       {:confirms #{BackboneElement},
        :type zen/map,
        :zen/desc "Contract Term Asset List",
        :keys
        {:periodType
         {:type zen/vector,
          :every
          {:confirms #{CodeableConcept},
           :zen/desc "Asset availability types"}},
         :usePeriod
         {:type zen/vector,
          :every {:confirms #{Period}, :zen/desc "Time period"}},
         :linkId
         {:type zen/vector,
          :every
          {:confirms #{string},
           :type zen/string,
           :zen/desc "Pointer to asset text"}},
         :relationship
         {:confirms #{Coding}, :zen/desc "Kinship of the asset"},
         :type
         {:type zen/vector,
          :every
          {:confirms #{CodeableConcept}, :zen/desc "Asset category"}},
         :scope
         {:confirms #{CodeableConcept}, :zen/desc "Range of asset"},
         :securityLabelNumber
         {:type zen/vector,
          :every
          {:confirms #{unsignedInt},
           :type zen/integer,
           :zen/desc "Asset restriction numbers"}},
         :typeReference
         {:type zen/vector,
          :every
          {:confirms #{Reference}, :zen/desc "Associated entities"}},
         :condition
         {:confirms #{string},
          :type zen/string,
          :zen/desc "Quality desctiption of asset"},
         :answer
         {:type zen/vector, :every #:zen{:desc "Response to assets"}},
         :context
         {:type zen/vector,
          :every
          {:confirms #{BackboneElement},
           :type zen/map,
           :zen/desc "Circumstance of the asset",
           :keys
           {:text
            {:confirms #{string},
             :type zen/string,
             :zen/desc "Context description"},
            :code
            {:type zen/vector,
             :every
             {:confirms #{CodeableConcept},
              :zen/desc "Codeable asset context"}},
            :reference
            {:confirms #{Reference},
             :zen/desc "Creator,custodian or owner"}}}},
         :period
         {:type zen/vector,
          :every
          {:confirms #{Period}, :zen/desc "Time period of the asset"}},
         :valuedItem
         {:type zen/vector,
          :every
          {:confirms #{BackboneElement},
           :type zen/map,
           :zen/desc "Contract Valued Item List",
           :keys
           {:linkId
            {:type zen/vector,
             :every
             {:confirms #{string},
              :type zen/string,
              :zen/desc "Pointer to specific item"}},
            :payment
            {:confirms #{string},
             :type zen/string,
             :zen/desc "Terms of valuation"},
            :recipient
            {:confirms #{Reference},
             :zen/desc "Who will receive payment"},
            :net
            {:confirms #{Money},
             :zen/desc "Total Contract Valued Item Value"},
            :points
            {:confirms #{decimal},
             :type zen/number,
             :zen/desc
             "Contract Valued Item Difficulty Scaling Factor"},
            :responsible
            {:confirms #{Reference},
             :zen/desc "Who will make payment"},
            :securityLabelNumber
            {:type zen/vector,
             :every
             {:confirms #{unsignedInt},
              :type zen/integer,
              :zen/desc "Security Labels that define affected terms"}},
            :factor
            {:confirms #{decimal},
             :type zen/number,
             :zen/desc "Contract Valued Item Price Scaling Factor"},
            :paymentDate
            {:confirms #{dateTime},
             :type zen/datetime,
             :zen/desc "When payment is due"},
            :identifier
            {:confirms #{Identifier},
             :zen/desc "Contract Valued Item Number"},
            :effectiveTime
            {:confirms #{dateTime},
             :type zen/datetime,
             :zen/desc "Contract Valued Item Effective Tiem"},
            :quantity
            {:confirms #{Quantity SimpleQuantity},
             :zen/desc "Count of Contract Valued Items"},
            :entity
            {:type zen/map,
             :zen/desc "Contract Valued Item Type",
             :keys
             {:CodeableConcept {:confirms #{CodeableConcept}},
              :Reference {:confirms #{Reference}}},
             :exclusive-keys #{#{:CodeableConcept :Reference}}},
            :unitPrice
            {:confirms #{Money},
             :zen/desc "Contract Valued Item fee, charge, or cost"}}}},
         :subtype
         {:type zen/vector,
          :every
          {:confirms #{CodeableConcept},
           :zen/desc "Asset sub-category"}},
         :text
         {:confirms #{string},
          :type zen/string,
          :zen/desc "Asset clause or question text"}}}},
      :text
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Term Statement"}}}},
   :friendly
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:content},
     :type zen/map,
     :zen/desc "Contract Friendly Language",
     :keys
     {:content
      {:type zen/map,
       :zen/desc "Easily comprehended representation of this Contract",
       :keys
       {:Attachment {:confirms #{Attachment}},
        :Reference {:confirms #{Reference}}},
       :exclusive-keys #{#{:Attachment :Reference}}}}}},
   :alias
   {:type zen/vector,
    :every
    {:confirms #{string},
     :type zen/string,
     :zen/desc "Acronym or short name"}},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc
    "amended | appended | cancelled | disputed | entered-in-error | executable | executed | negotiable | offered | policy | rejected | renewed | revoked | resolved | terminated"},
   :subtitle
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Subordinate Friendly name"},
   :url
   {:confirms #{uri}, :type zen/string, :zen/desc "Basal definition"},
   :identifier
   {:type zen/vector,
    :every {:confirms #{Identifier}, :zen/desc "Contract number"}},
   :expirationType
   {:confirms #{CodeableConcept},
    :zen/desc "Contract cessation cause"},
   :issued
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "When this Contract was issued"},
   :domain
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc
     "A sphere of control governed by an authoritative jurisdiction, organization, or person"}},
   :subType
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "Subtype within the context of type"}},
   :version
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Business edition"},
   :subject
   {:type zen/vector,
    :every
    {:confirms #{Reference}, :zen/desc "Contract Target Entity"}},
   :legallyBinding
   {:type zen/map,
    :zen/desc "Binding Contract",
    :keys
    {:Attachment {:confirms #{Attachment}},
     :Reference {:confirms #{Reference}}},
    :exclusive-keys #{#{:Attachment :Reference}}}}},
 Coverage
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "Coverage",
  :require #{:beneficiary :payor :status},
  :type zen/map,
  :zen/desc
  "Financial instrument which may be used to reimburse or pay for health care products and services. Includes both insurance and self-payment.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/Coverage",
  :keys
  {:policyHolder
   {:confirms #{Reference}, :zen/desc "Owner of the policy"},
   :beneficiary {:confirms #{Reference}, :zen/desc "Plan beneficiary"},
   :contract
   {:type zen/vector,
    :every {:confirms #{Reference}, :zen/desc "Contract details"}},
   :relationship
   {:confirms #{CodeableConcept},
    :zen/desc "Beneficiary relationship to the subscriber"},
   :type
   {:confirms #{CodeableConcept},
    :zen/desc "Coverage category such as medical or accident"},
   :resourceType {:type zen/string, :const {:value "Coverage"}},
   :costToBeneficiary
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:value},
     :type zen/map,
     :zen/desc "Patient payments for services/products",
     :keys
     {:value
      {:confirms #{SimpleQuantity},
       :type zen/map,
       :zen/desc "The amount or percentage due from the beneficiary",
       :keys
       {:Quantity {:confirms #{Quantity}},
        :Money {:confirms #{Money}}},
       :exclusive-keys #{#{:Money :Quantity}}},
      :type {:confirms #{CodeableConcept}, :zen/desc "Cost category"},
      :exception
      {:type zen/vector,
       :every
       {:confirms #{BackboneElement},
        :require #{:type},
        :type zen/map,
        :zen/desc "Exceptions for patient payments",
        :keys
        {:period
         {:confirms #{Period},
          :zen/desc "The effective period of the exception"},
         :type
         {:confirms #{CodeableConcept},
          :zen/desc "Exception category"}}}}}}},
   :subrogation
   {:confirms #{boolean},
    :type zen/boolean,
    :zen/desc "Reimbursement to insurer"},
   :subscriber
   {:confirms #{Reference}, :zen/desc "Subscriber to the policy"},
   :payor
   {:minItems 1,
    :type zen/vector,
    :every {:confirms #{Reference}, :zen/desc "Issuer of the policy"}},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc "active | cancelled | draft | entered-in-error"},
   :class
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:value :type},
     :type zen/map,
     :zen/desc "Additional coverage classifications",
     :keys
     {:name
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Human readable description of the type and value"},
      :value
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Value associated with the type"},
      :type
      {:confirms #{CodeableConcept},
       :zen/desc "Type of class such as 'group' or 'plan'"}}}},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier},
     :zen/desc "Business Identifier for the coverage"}},
   :order
   {:confirms #{positiveInt},
    :type zen/integer,
    :zen/desc "Relative order of the coverage"},
   :network
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Insurer network"},
   :period
   {:confirms #{Period}, :zen/desc "Coverage start and end dates"},
   :dependent
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Dependent number"},
   :subscriberId
   {:confirms #{string},
    :type zen/string,
    :zen/desc "ID assigned to the subscriber"}}},
 CoverageEligibilityRequest
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "CoverageEligibilityRequest",
  :require #{:patient :purpose :created :insurer :status},
  :type zen/map,
  :zen/desc
  "The CoverageEligibilityRequest provides patient and insurance coverage information to an insurer for them to respond, in the form of an CoverageEligibilityResponse, with information regarding whether the stated coverage is valid and in-force and optionally to provide the insurance details of the policy.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/CoverageEligibilityRequest",
  :keys
  {:patient
   {:confirms #{Reference},
    :zen/desc "Intended recipient of products and services"},
   :insurance
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:coverage},
     :type zen/map,
     :zen/desc "Patient insurance information",
     :keys
     {:businessArrangement
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Additional provider contract number"},
      :focal
      {:confirms #{boolean},
       :type zen/boolean,
       :zen/desc "Applicable coverage"},
      :coverage
      {:confirms #{Reference}, :zen/desc "Insurance information"}}}},
   :facility {:confirms #{Reference}, :zen/desc "Servicing facility"},
   :enterer {:confirms #{Reference}, :zen/desc "Author"},
   :supportingInfo
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:sequence :information},
     :type zen/map,
     :zen/desc "Supporting information",
     :keys
     {:sequence
      {:confirms #{positiveInt},
       :type zen/integer,
       :zen/desc "Information instance identifier"},
      :information
      {:confirms #{Reference}, :zen/desc "Data to be provided"},
      :appliesToAll
      {:confirms #{boolean},
       :type zen/boolean,
       :zen/desc "Applies to all items"}}}},
   :purpose
   {:minItems 1,
    :type zen/vector,
    :every
    {:confirms #{code},
     :type zen/string,
     :zen/desc
     "auth-requirements | benefits | discovery | validation"}},
   :item
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc "Item to be evaluated for eligibiity",
     :keys
     {:category
      {:confirms #{CodeableConcept},
       :zen/desc "Benefit classification"},
      :facility
      {:confirms #{Reference}, :zen/desc "Servicing facility"},
      :diagnosis
      {:type zen/vector,
       :every
       {:confirms #{BackboneElement},
        :type zen/map,
        :zen/desc "Applicable diagnosis",
        :keys
        {:diagnosis
         {:type zen/map,
          :zen/desc "Nature of illness or problem",
          :keys
          {:CodeableConcept {:confirms #{CodeableConcept}},
           :Reference {:confirms #{Reference}}},
          :exclusive-keys #{#{:CodeableConcept :Reference}}}}}},
      :modifier
      {:type zen/vector,
       :every
       {:confirms #{CodeableConcept},
        :zen/desc "Product or service billing modifiers"}},
      :productOrService
      {:confirms #{CodeableConcept},
       :zen/desc "Billing, service, product, or drug code"},
      :quantity
      {:confirms #{Quantity SimpleQuantity},
       :zen/desc "Count of products or services"},
      :provider
      {:confirms #{Reference}, :zen/desc "Perfoming practitioner"},
      :supportingInfoSequence
      {:type zen/vector,
       :every
       {:confirms #{positiveInt},
        :type zen/integer,
        :zen/desc "Applicable exception or supporting information"}},
      :unitPrice
      {:confirms #{Money}, :zen/desc "Fee, charge or cost per item"},
      :detail
      {:type zen/vector,
       :every
       {:confirms #{Reference},
        :zen/desc "Product or service details"}}}}},
   :created
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "Creation date"},
   :serviced
   {:type zen/map,
    :zen/desc "Estimated date or dates of service",
    :keys
    {:date {:confirms #{date}, :type zen/date},
     :Period {:confirms #{Period}}},
    :exclusive-keys #{#{:date :Period}}},
   :resourceType
   {:type zen/string, :const {:value "CoverageEligibilityRequest"}},
   :insurer {:confirms #{Reference}, :zen/desc "Coverage issuer"},
   :priority
   {:confirms #{CodeableConcept},
    :zen/desc "Desired processing priority"},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc "active | cancelled | draft | entered-in-error"},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier},
     :zen/desc "Business Identifier for coverage eligiblity request"}},
   :provider
   {:confirms #{Reference},
    :zen/desc "Party responsible for the request"}}},
 CoverageEligibilityResponse
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "CoverageEligibilityResponse",
  :require
  #{:patient :request :purpose :created :outcome :insurer :status},
  :type zen/map,
  :zen/desc
  "This resource provides eligibility and plan details from the processing of an CoverageEligibilityRequest resource.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/CoverageEligibilityResponse",
  :keys
  {:patient
   {:confirms #{Reference},
    :zen/desc "Intended recipient of products and services"},
   :requestor
   {:confirms #{Reference},
    :zen/desc "Party responsible for the request"},
   :insurance
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:coverage},
     :type zen/map,
     :zen/desc "Patient insurance information",
     :keys
     {:inforce
      {:confirms #{boolean},
       :type zen/boolean,
       :zen/desc "Coverage inforce indicator"},
      :benefitPeriod
      {:confirms #{Period},
       :zen/desc "When the benefits are applicable"},
      :coverage
      {:confirms #{Reference}, :zen/desc "Insurance information"},
      :item
      {:type zen/vector,
       :every
       {:confirms #{BackboneElement},
        :type zen/map,
        :zen/desc "Benefits and authorization details",
        :keys
        {:description
         {:confirms #{string},
          :type zen/string,
          :zen/desc "Description of the benefit or services covered"},
         :category
         {:confirms #{CodeableConcept},
          :zen/desc "Benefit classification"},
         :authorizationRequired
         {:confirms #{boolean},
          :type zen/boolean,
          :zen/desc "Authorization required flag"},
         :modifier
         {:type zen/vector,
          :every
          {:confirms #{CodeableConcept},
           :zen/desc "Product or service billing modifiers"}},
         :authorizationSupporting
         {:type zen/vector,
          :every
          {:confirms #{CodeableConcept},
           :zen/desc "Type of required supporting materials"}},
         :unit
         {:confirms #{CodeableConcept},
          :zen/desc "Individual or family"},
         :excluded
         {:confirms #{boolean},
          :type zen/boolean,
          :zen/desc "Excluded from the plan"},
         :name
         {:confirms #{string},
          :type zen/string,
          :zen/desc "Short name for the benefit"},
         :productOrService
         {:confirms #{CodeableConcept},
          :zen/desc "Billing, service, product, or drug code"},
         :term
         {:confirms #{CodeableConcept},
          :zen/desc "Annual or lifetime"},
         :benefit
         {:type zen/vector,
          :every
          {:confirms #{BackboneElement},
           :require #{:type},
           :type zen/map,
           :zen/desc "Benefit Summary",
           :keys
           {:allowed
            {:type zen/map,
             :zen/desc "Benefits allowed",
             :keys
             {:unsignedInt
              {:confirms #{unsignedInt}, :type zen/integer},
              :string {:confirms #{string}, :type zen/string},
              :Money {:confirms #{Money}}},
             :exclusive-keys #{#{:unsignedInt :string :Money}}},
            :used
            {:type zen/map,
             :zen/desc "Benefits used",
             :keys
             {:unsignedInt
              {:confirms #{unsignedInt}, :type zen/integer},
              :string {:confirms #{string}, :type zen/string},
              :Money {:confirms #{Money}}},
             :exclusive-keys #{#{:unsignedInt :string :Money}}},
            :type
            {:confirms #{CodeableConcept},
             :zen/desc "Benefit classification"}}}},
         :authorizationUrl
         {:confirms #{uri},
          :type zen/string,
          :zen/desc "Preauthorization requirements endpoint"},
         :network
         {:confirms #{CodeableConcept},
          :zen/desc "In or out of network"},
         :provider
         {:confirms #{Reference},
          :zen/desc "Performing practitioner"}}}}}}},
   :request
   {:confirms #{Reference}, :zen/desc "Eligibility request reference"},
   :preAuthRef
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Preauthorization reference"},
   :purpose
   {:minItems 1,
    :type zen/vector,
    :every
    {:confirms #{code},
     :type zen/string,
     :zen/desc
     "auth-requirements | benefits | discovery | validation"}},
   :created
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "Response creation date"},
   :serviced
   {:type zen/map,
    :zen/desc "Estimated date or dates of service",
    :keys
    {:date {:confirms #{date}, :type zen/date},
     :Period {:confirms #{Period}}},
    :exclusive-keys #{#{:date :Period}}},
   :outcome
   {:confirms #{code},
    :type zen/string,
    :zen/desc "queued | complete | error | partial"},
   :resourceType
   {:type zen/string, :const {:value "CoverageEligibilityResponse"}},
   :disposition
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Disposition Message"},
   :insurer {:confirms #{Reference}, :zen/desc "Coverage issuer"},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc "active | cancelled | draft | entered-in-error"},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier},
     :zen/desc "Business Identifier for coverage eligiblity request"}},
   :error
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:code},
     :type zen/map,
     :zen/desc "Processing errors",
     :keys
     {:code
      {:confirms #{CodeableConcept},
       :zen/desc "Error code detailing processing issues"}}}},
   :form
   {:confirms #{CodeableConcept},
    :zen/desc "Printed form identifier"}}},
 DetectedIssue
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "DetectedIssue",
  :require #{:status},
  :type zen/map,
  :zen/desc
  "Indicates an actual or potential clinical issue with or between one or more active or proposed clinical actions for a patient; e.g. Drug-drug interaction, Ineffective treatment frequency, Procedure-condition conflict, etc.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/DetectedIssue",
  :keys
  {:patient {:confirms #{Reference}, :zen/desc "Associated patient"},
   :evidence
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc "Supporting evidence",
     :keys
     {:code
      {:type zen/vector,
       :every
       {:confirms #{CodeableConcept}, :zen/desc "Manifestation"}},
      :detail
      {:type zen/vector,
       :every
       {:confirms #{Reference},
        :zen/desc "Supporting information"}}}}},
   :resourceType {:type zen/string, :const {:value "DetectedIssue"}},
   :mitigation
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:action},
     :type zen/map,
     :zen/desc "Step taken to address",
     :keys
     {:action
      {:confirms #{CodeableConcept}, :zen/desc "What mitigation?"},
      :author {:confirms #{Reference}, :zen/desc "Who is committing?"},
      :date
      {:confirms #{dateTime},
       :type zen/datetime,
       :zen/desc "Date committed"}}}},
   :author
   {:confirms #{Reference},
    :zen/desc "The provider or device that identified the issue"},
   :reference
   {:confirms #{uri},
    :type zen/string,
    :zen/desc "Authority for issue"},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc "registered | preliminary | final | amended +"},
   :severity
   {:confirms #{code},
    :type zen/string,
    :zen/desc "high | moderate | low"},
   :code
   {:confirms #{CodeableConcept},
    :zen/desc
    "Issue Category, e.g. drug-drug, duplicate therapy, etc."},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier},
     :zen/desc "Unique id for the detected issue"}},
   :identified
   {:type zen/map,
    :zen/desc "When identified",
    :keys
    {:dateTime {:confirms #{dateTime}, :type zen/datetime},
     :Period {:confirms #{Period}}},
    :exclusive-keys #{#{:dateTime :Period}}},
   :implicated
   {:type zen/vector,
    :every {:confirms #{Reference}, :zen/desc "Problem resource"}},
   :detail
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Description and context"}}},
 Device
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "Device",
  :type zen/map,
  :zen/desc
  "A type of a manufactured item that is used in the provision of healthcare without being substantially changed through that activity. The device may be a medical or non-medical device.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/Device",
  :keys
  {:patient
   {:confirms #{Reference},
    :zen/desc "Patient to whom Device is affixed"},
   :definition
   {:confirms #{Reference},
    :zen/desc "The reference to the definition for the device"},
   :serialNumber
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Serial number assigned by the manufacturer"},
   :parent {:confirms #{Reference}, :zen/desc "The parent device"},
   :deviceName
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:name :type},
     :type zen/map,
     :zen/desc "The name of the device as given by the manufacturer",
     :keys
     {:type
      {:confirms #{code},
       :type zen/string,
       :zen/desc
       "udi-label-name | user-friendly-name | patient-reported-name | manufacturer-name | model-name | other"},
      :name
      {:confirms #{string},
       :type zen/string,
       :zen/desc "The name of the device"}}}},
   :property
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:type},
     :type zen/map,
     :zen/desc
     "The actual configuration settings of a device as it actually operates, e.g., regulation status, time properties",
     :keys
     {:valueQuantity
      {:type zen/vector,
       :every
       {:confirms #{Quantity},
        :zen/desc "Property value as a quantity"}},
      :type
      {:confirms #{CodeableConcept},
       :zen/desc
       "Code that specifies the property DeviceDefinitionPropetyCode (Extensible)"},
      :valueCode
      {:type zen/vector,
       :every
       {:confirms #{CodeableConcept},
        :zen/desc
        "Property value as a code, e.g., NTP4 (synced to NTP)"}}}}},
   :partNumber
   {:confirms #{string},
    :type zen/string,
    :zen/desc "The part number of the device"},
   :modelNumber
   {:confirms #{string},
    :type zen/string,
    :zen/desc "The model number for the device"},
   :type
   {:confirms #{CodeableConcept},
    :zen/desc "The kind or type of device"},
   :statusReason
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc
     "online | paused | standby | offline | not-ready | transduc-discon | hw-discon | off"}},
   :resourceType {:type zen/string, :const {:value "Device"}},
   :specialization
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:systemType},
     :type zen/map,
     :zen/desc
     "The capabilities supported on a  device, the standards to which the device conforms for a particular purpose, and used for the communication",
     :keys
     {:systemType
      {:confirms #{CodeableConcept},
       :zen/desc
       "The standard that is used to operate and communicate"},
      :version
      {:confirms #{string},
       :type zen/string,
       :zen/desc
       "The version of the standard that is used to operate and communicate"}}}},
   :distinctIdentifier
   {:confirms #{string},
    :type zen/string,
    :zen/desc "The distinct identification string"},
   :note
   {:type zen/vector,
    :every
    {:confirms #{Annotation}, :zen/desc "Device notes and comments"}},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc "active | inactive | entered-in-error | unknown"},
   :safety
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "Safety Characteristics of Device"}},
   :lotNumber
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Lot number of manufacture"},
   :url
   {:confirms #{uri},
    :type zen/string,
    :zen/desc "Network address to contact device"},
   :identifier
   {:type zen/vector,
    :every {:confirms #{Identifier}, :zen/desc "Instance identifier"}},
   :manufacturer
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name of device manufacturer"},
   :version
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:value},
     :type zen/map,
     :zen/desc
     "The actual design of the device or software version running on the device",
     :keys
     {:value
      {:confirms #{string},
       :type zen/string,
       :zen/desc "The version text"},
      :component
      {:confirms #{Identifier},
       :zen/desc "A single component of the device version"},
      :type
      {:confirms #{CodeableConcept},
       :zen/desc "The type of the device version"}}}},
   :location
   {:confirms #{Reference}, :zen/desc "Where the device is found"},
   :contact
   {:type zen/vector,
    :every
    {:confirms #{ContactPoint},
     :zen/desc "Details for human/organization for support"}},
   :manufactureDate
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "Date when the device was made"},
   :owner
   {:confirms #{Reference},
    :zen/desc "Organization responsible for device"},
   :expirationDate
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc
    "Date and time of expiry of this device (if applicable)"},
   :udiCarrier
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc "Unique Device Identifier (UDI) Barcode string",
     :keys
     {:deviceIdentifier
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Mandatory fixed portion of UDI"},
      :carrierAIDC
      {:confirms #{base64Binary},
       :type zen/string,
       :zen/desc "UDI Machine Readable Barcode String"},
      :carrierHRF
      {:confirms #{string},
       :type zen/string,
       :zen/desc "UDI Human Readable Barcode String"},
      :jurisdiction
      {:confirms #{uri},
       :type zen/string,
       :zen/desc "Regional UDI authority"},
      :entryType
      {:confirms #{code},
       :type zen/string,
       :zen/desc "barcode | rfid | manual +"},
      :issuer
      {:confirms #{uri},
       :type zen/string,
       :zen/desc "UDI Issuing Organization"}}}}}},
 DeviceDefinition
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "DeviceDefinition",
  :type zen/map,
  :zen/desc
  "The characteristics, operational status and capabilities of a medical-related component of a medical device.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/DeviceDefinition",
  :keys
  {:deviceName
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:name :type},
     :type zen/map,
     :zen/desc "A name given to the device to identify it",
     :keys
     {:name
      {:confirms #{string},
       :type zen/string,
       :zen/desc "The name of the device"},
      :type
      {:confirms #{code},
       :type zen/string,
       :zen/desc
       "udi-label-name | user-friendly-name | patient-reported-name | manufacturer-name | model-name | other"}}}},
   :shelfLifeStorage
   {:type zen/vector,
    :every
    {:confirms #{ProductShelfLife},
     :zen/desc "Shelf Life and storage information"}},
   :property
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:type},
     :type zen/map,
     :zen/desc
     "The actual configuration settings of a device as it actually operates, e.g., regulation status, time properties",
     :keys
     {:type
      {:confirms #{CodeableConcept},
       :zen/desc
       "Code that specifies the property DeviceDefinitionPropetyCode (Extensible)"},
      :valueCode
      {:type zen/vector,
       :every
       {:confirms #{CodeableConcept},
        :zen/desc
        "Property value as a code, e.g., NTP4 (synced to NTP)"}},
      :valueQuantity
      {:type zen/vector,
       :every
       {:confirms #{Quantity},
        :zen/desc "Property value as a quantity"}}}}},
   :modelNumber
   {:confirms #{string},
    :type zen/string,
    :zen/desc "The model number for the device"},
   :udiDeviceIdentifier
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:deviceIdentifier :jurisdiction :issuer},
     :type zen/map,
     :zen/desc "Unique Device Identifier (UDI) Barcode string",
     :keys
     {:issuer
      {:confirms #{uri},
       :type zen/string,
       :zen/desc
       "The organization that assigns the identifier algorithm"},
      :deviceIdentifier
      {:confirms #{string},
       :type zen/string,
       :zen/desc
       "The identifier that is to be associated with every Device that references this DeviceDefintiion for the issuer and jurisdication porvided in the DeviceDefinition.udiDeviceIdentifier"},
      :jurisdiction
      {:confirms #{uri},
       :type zen/string,
       :zen/desc
       "The jurisdiction to which the deviceIdentifier applies"}}}},
   :type
   {:confirms #{CodeableConcept},
    :zen/desc "What kind of device or device system this is"},
   :capability
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:type},
     :type zen/map,
     :zen/desc "Device capabilities",
     :keys
     {:type
      {:confirms #{CodeableConcept}, :zen/desc "Type of capability"},
      :description
      {:type zen/vector,
       :every
       {:confirms #{CodeableConcept},
        :zen/desc "Description of capability"}}}}},
   :resourceType
   {:type zen/string, :const {:value "DeviceDefinition"}},
   :specialization
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:systemType},
     :type zen/map,
     :zen/desc
     "The capabilities supported on a  device, the standards to which the device conforms for a particular purpose, and used for the communication",
     :keys
     {:systemType
      {:confirms #{string},
       :type zen/string,
       :zen/desc
       "The standard that is used to operate and communicate"},
      :version
      {:confirms #{string},
       :type zen/string,
       :zen/desc
       "The version of the standard that is used to operate and communicate"}}}},
   :parentDevice
   {:confirms #{Reference},
    :zen/desc "The parent device it can be part of"},
   :note
   {:type zen/vector,
    :every
    {:confirms #{Annotation}, :zen/desc "Device notes and comments"}},
   :languageCode
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc
     "Language code for the human-readable text strings produced by the device (all supported)"}},
   :safety
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "Safety characteristics of the device"}},
   :material
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:substance},
     :type zen/map,
     :zen/desc
     "A substance used to create the material(s) of which the device is made",
     :keys
     {:alternate
      {:confirms #{boolean},
       :type zen/boolean,
       :zen/desc "Indicates an alternative material of the device"},
      :allergenicIndicator
      {:confirms #{boolean},
       :type zen/boolean,
       :zen/desc
       "Whether the substance is a known or suspected allergen"},
      :substance
      {:confirms #{CodeableConcept}, :zen/desc "The substance"}}}},
   :url
   {:confirms #{uri},
    :type zen/string,
    :zen/desc "Network address to contact device"},
   :identifier
   {:type zen/vector,
    :every {:confirms #{Identifier}, :zen/desc "Instance identifier"}},
   :manufacturer
   {:type zen/map,
    :zen/desc "Name of device manufacturer",
    :keys
    {:string {:confirms #{string}, :type zen/string},
     :Reference {:confirms #{Reference}}},
    :exclusive-keys #{#{:string :Reference}}},
   :quantity
   {:confirms #{Quantity},
    :zen/desc
    "The quantity of the device present in the packaging (e.g. the number of devices present in a pack, or the number of devices in the same package of the medicinal product)"},
   :version
   {:type zen/vector,
    :every
    {:confirms #{string},
     :type zen/string,
     :zen/desc "Available versions"}},
   :contact
   {:type zen/vector,
    :every
    {:confirms #{ContactPoint},
     :zen/desc "Details for human/organization for support"}},
   :owner
   {:confirms #{Reference},
    :zen/desc "Organization responsible for device"},
   :onlineInformation
   {:confirms #{uri},
    :type zen/string,
    :zen/desc "Access to on-line information"},
   :physicalCharacteristics
   {:confirms #{ProdCharacteristic},
    :zen/desc "Dimensions, color etc."}}},
 DeviceMetric
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "DeviceMetric",
  :require #{:category :type},
  :type zen/map,
  :zen/desc
  "Describes a measurement, calculation or setting capability of a medical device.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/DeviceMetric",
  :keys
  {:category
   {:confirms #{code},
    :type zen/string,
    :zen/desc "measurement | setting | calculation | unspecified"},
   :measurementPeriod
   {:confirms #{Timing},
    :zen/desc "Describes the measurement repetition time"},
   :color
   {:confirms #{code},
    :type zen/string,
    :zen/desc
    "black | red | green | yellow | blue | magenta | cyan | white"},
   :parent
   {:confirms #{Reference},
    :zen/desc "Describes the link to the parent Device"},
   :unit
   {:confirms #{CodeableConcept},
    :zen/desc "Unit of Measure for the Metric"},
   :type
   {:confirms #{CodeableConcept},
    :zen/desc
    "Identity of metric, for example Heart Rate or PEEP Setting"},
   :resourceType {:type zen/string, :const {:value "DeviceMetric"}},
   :source
   {:confirms #{Reference},
    :zen/desc "Describes the link to the source Device"},
   :identifier
   {:type zen/vector,
    :every {:confirms #{Identifier}, :zen/desc "Instance identifier"}},
   :calibration
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc
     "Describes the calibrations that have been performed or that are required to be performed",
     :keys
     {:time
      {:confirms #{instant},
       :type zen/string,
       :zen/desc
       "Describes the time last calibration has been performed"},
      :type
      {:confirms #{code},
       :type zen/string,
       :zen/desc "unspecified | offset | gain | two-point"},
      :state
      {:confirms #{code},
       :type zen/string,
       :zen/desc
       "not-calibrated | calibration-required | calibrated | unspecified"}}}},
   :operationalStatus
   {:confirms #{code},
    :type zen/string,
    :zen/desc "on | off | standby | entered-in-error"}}},
 DeviceRequest
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "DeviceRequest",
  :require #{:code :intent :subject},
  :type zen/map,
  :zen/desc
  "Represents a request for a patient to employ a medical device. The device may be an implantable device, or an external assistive device, such as a walker.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/DeviceRequest",
  :keys
  {:performerType
   {:confirms #{CodeableConcept}, :zen/desc "Filler role"},
   :insurance
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "Associated insurance coverage"}},
   :instantiatesCanonical
   {:type zen/vector,
    :every
    {:confirms #{canonical},
     :type zen/string,
     :zen/desc "Instantiates FHIR protocol or definition"}},
   :instantiatesUri
   {:type zen/vector,
    :every
    {:confirms #{uri},
     :type zen/string,
     :zen/desc "Instantiates external protocol or definition"}},
   :relevantHistory
   {:type zen/vector,
    :every {:confirms #{Reference}, :zen/desc "Request provenance"}},
   :supportingInfo
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "Additional clinical information"}},
   :encounter
   {:confirms #{Reference}, :zen/desc "Encounter motivating request"},
   :priorRequest
   {:type zen/vector,
    :every
    {:confirms #{Reference}, :zen/desc "What request replaces"}},
   :reasonCode
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "Coded Reason for request"}},
   :authoredOn
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "When recorded"},
   :resourceType {:type zen/string, :const {:value "DeviceRequest"}},
   :note
   {:type zen/vector,
    :every {:confirms #{Annotation}, :zen/desc "Notes or comments"}},
   :requester
   {:confirms #{Reference},
    :zen/desc "Who/what is requesting diagnostics"},
   :priority
   {:confirms #{code},
    :type zen/string,
    :zen/desc "routine | urgent | asap | stat"},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc
    "draft | active | on-hold | revoked | completed | entered-in-error | unknown"},
   :groupIdentifier
   {:confirms #{Identifier},
    :zen/desc "Identifier of composite request"},
   :code
   {:type zen/map,
    :zen/desc "Device requested",
    :keys
    {:Reference {:confirms #{Reference}},
     :CodeableConcept {:confirms #{CodeableConcept}}},
    :exclusive-keys #{#{:CodeableConcept :Reference}}},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier},
     :zen/desc "External Request identifier"}},
   :intent
   {:confirms #{code},
    :type zen/string,
    :zen/desc
    "proposal | plan | directive | order | original-order | reflex-order | filler-order | instance-order | option"},
   :basedOn
   {:type zen/vector,
    :every
    {:confirms #{Reference}, :zen/desc "What request fulfills"}},
   :subject {:confirms #{Reference}, :zen/desc "Focus of request"},
   :parameter
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc "Device details",
     :keys
     {:value
      {:type zen/map,
       :zen/desc "Value of detail",
       :keys
       {:CodeableConcept {:confirms #{CodeableConcept}},
        :Quantity {:confirms #{Quantity}},
        :Range {:confirms #{Range}},
        :boolean {:confirms #{boolean}, :type zen/boolean}},
       :exclusive-keys
       #{#{:Range :CodeableConcept :Quantity :boolean}}},
      :code
      {:confirms #{CodeableConcept}, :zen/desc "Device detail"}}}},
   :occurrence
   {:type zen/map,
    :zen/desc "Desired time or schedule for use",
    :keys
    {:dateTime {:confirms #{dateTime}, :type zen/datetime},
     :Period {:confirms #{Period}},
     :Timing {:confirms #{Timing}}},
    :exclusive-keys #{#{:dateTime :Period :Timing}}},
   :performer {:confirms #{Reference}, :zen/desc "Requested Filler"},
   :reasonReference
   {:type zen/vector,
    :every
    {:confirms #{Reference}, :zen/desc "Linked Reason for request"}}}},
 DeviceUseStatement
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "DeviceUseStatement",
  :require #{:status :device :subject},
  :type zen/map,
  :zen/desc
  "A record of a device being used by a patient where the record is the result of a report from the patient or another clinician.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/DeviceUseStatement",
  :keys
  {:derivedFrom
   {:type zen/vector,
    :every
    {:confirms #{Reference}, :zen/desc "Supporting information"}},
   :reasonCode
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept}, :zen/desc "Why device was used"}},
   :resourceType
   {:type zen/string, :const {:value "DeviceUseStatement"}},
   :source
   {:confirms #{Reference}, :zen/desc "Who made the statement"},
   :note
   {:type zen/vector,
    :every
    {:confirms #{Annotation},
     :zen/desc "Addition details (comments, instructions)"}},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc "active | completed | entered-in-error +"},
   :timing
   {:type zen/map,
    :zen/desc "How often  the device was used",
    :keys
    {:Timing {:confirms #{Timing}},
     :Period {:confirms #{Period}},
     :dateTime {:confirms #{dateTime}, :type zen/datetime}},
    :exclusive-keys #{#{:dateTime :Period :Timing}}},
   :recordedOn
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "When statement was recorded"},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier},
     :zen/desc "External identifier for this record"}},
   :bodySite
   {:confirms #{CodeableConcept}, :zen/desc "Target body site"},
   :device
   {:confirms #{Reference}, :zen/desc "Reference to device used"},
   :basedOn
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "Fulfills plan, proposal or order"}},
   :subject {:confirms #{Reference}, :zen/desc "Patient using device"},
   :reasonReference
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "Why was DeviceUseStatement performed?"}}}},
 DiagnosticReport
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "DiagnosticReport",
  :require #{:status :code},
  :type zen/map,
  :zen/desc
  "The findings and interpretation of diagnostic  tests performed on patients, groups of patients, devices, and locations, and/or specimens derived from these. The report includes clinical context such as requesting and provider information, and some mix of atomic results, images, textual and coded interpretations, and formatted representation of diagnostic reports.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/DiagnosticReport",
  :keys
  {:category
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept}, :zen/desc "Service category"}},
   :conclusionCode
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "Codes for the clinical conclusion of test results"}},
   :conclusion
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Clinical conclusion (interpretation) of test results"},
   :encounter
   {:confirms #{Reference},
    :zen/desc "Health care event when test ordered"},
   :specimen
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "Specimens this report is based on"}},
   :resourceType
   {:type zen/string, :const {:value "DiagnosticReport"}},
   :resultsInterpreter
   {:type zen/vector,
    :every
    {:confirms #{Reference}, :zen/desc "Primary result interpreter"}},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc "registered | partial | preliminary | final +"},
   :result
   {:type zen/vector,
    :every {:confirms #{Reference}, :zen/desc "Observations"}},
   :effective
   {:type zen/map,
    :zen/desc "Clinically relevant time/time-period for report",
    :keys
    {:dateTime {:confirms #{dateTime}, :type zen/datetime},
     :Period {:confirms #{Period}}},
    :exclusive-keys #{#{:dateTime :Period}}},
   :code
   {:confirms #{CodeableConcept},
    :zen/desc "Name/Code for this diagnostic report"},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier},
     :zen/desc "Business identifier for report"}},
   :issued
   {:confirms #{instant},
    :type zen/string,
    :zen/desc "DateTime this version was made"},
   :presentedForm
   {:type zen/vector,
    :every
    {:confirms #{Attachment}, :zen/desc "Entire report as issued"}},
   :basedOn
   {:type zen/vector,
    :every {:confirms #{Reference}, :zen/desc "What was requested"}},
   :imagingStudy
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc
     "Reference to full details of imaging associated with the diagnostic report"}},
   :media
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:link},
     :type zen/map,
     :zen/desc "Key images associated with this report",
     :keys
     {:link
      {:confirms #{Reference},
       :zen/desc "Reference to the image source"},
      :comment
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Comment about the image (e.g. explanation)"}}}},
   :subject
   {:confirms #{Reference},
    :zen/desc
    "The subject of the report - usually, but not always, the patient"},
   :performer
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "Responsible Diagnostic Service"}}}},
 DocumentManifest
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "DocumentManifest",
  :require #{:content :status},
  :type zen/map,
  :zen/desc
  "A collection of documents compiled for a purpose together with metadata that applies to the collection.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/DocumentManifest",
  :keys
  {:description
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Human-readable description (title)"},
   :content
   {:minItems 1,
    :type zen/vector,
    :every {:confirms #{Reference}, :zen/desc "Items in manifest"}},
   :recipient
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc
     "Intended to get notified about this set of documents"}},
   :type
   {:confirms #{CodeableConcept}, :zen/desc "Kind of document set"},
   :created
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "When this document manifest created"},
   :related
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc "Related things",
     :keys
     {:identifier
      {:confirms #{Identifier},
       :zen/desc "Identifiers of things that are related"},
      :ref {:confirms #{Reference}, :zen/desc "Related Resource"}}}},
   :resourceType
   {:type zen/string, :const {:value "DocumentManifest"}},
   :source
   {:confirms #{uri},
    :type zen/string,
    :zen/desc "The source system/application/software"},
   :author
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "Who and/or what authored the DocumentManifest"}},
   :masterIdentifier
   {:confirms #{Identifier},
    :zen/desc "Unique Identifier for the set of documents"},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc "current | superseded | entered-in-error"},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier},
     :zen/desc "Other identifiers for the manifest"}},
   :subject
   {:confirms #{Reference},
    :zen/desc "The subject of the set of documents"}}},
 DocumentReference
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "DocumentReference",
  :require #{:content :status},
  :type zen/map,
  :zen/desc
  "A reference to a document of any kind for any purpose. Provides metadata about the document so that the document can be discovered and managed. The scope of a document is any seralized object with a mime-type, so includes formal patient centric documents (CDA), cliical notes, scanned paper, and non-patient specific documents like policy text.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/DocumentReference",
  :keys
  {:description
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Human-readable description"},
   :category
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "Categorization of document"}},
   :date
   {:confirms #{instant},
    :type zen/string,
    :zen/desc "When this document reference was created"},
   :docStatus
   {:confirms #{code},
    :type zen/string,
    :zen/desc "preliminary | final | amended | entered-in-error"},
   :content
   {:minItems 1,
    :type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:attachment},
     :type zen/map,
     :zen/desc "Document referenced",
     :keys
     {:format
      {:confirms #{Coding},
       :zen/desc "Format/content rules for the document"},
      :attachment
      {:confirms #{Attachment},
       :zen/desc "Where to access the document"}}}},
   :type
   {:confirms #{CodeableConcept},
    :zen/desc "Kind of document (LOINC if possible)"},
   :resourceType
   {:type zen/string, :const {:value "DocumentReference"}},
   :author
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "Who and/or what authored the document"}},
   :masterIdentifier
   {:confirms #{Identifier},
    :zen/desc "Master Version Specific Identifier"},
   :custodian
   {:confirms #{Reference},
    :zen/desc "Organization which maintains the document"},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc "current | superseded | entered-in-error"},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier},
     :zen/desc "Other identifiers for the document"}},
   :relatesTo
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:code :target},
     :type zen/map,
     :zen/desc "Relationships to other documents",
     :keys
     {:code
      {:confirms #{code},
       :type zen/string,
       :zen/desc "replaces | transforms | signs | appends"},
      :target
      {:confirms #{Reference},
       :zen/desc "Target of the relationship"}}}},
   :context
   {:confirms #{BackboneElement},
    :type zen/map,
    :zen/desc "Clinical context of document",
    :keys
    {:encounter
     {:type zen/vector,
      :every
      {:confirms #{Reference},
       :zen/desc "Context of the document  content"}},
     :sourcePatientInfo
     {:confirms #{Reference},
      :zen/desc "Patient demographics from source"},
     :period
     {:confirms #{Period},
      :zen/desc "Time of service that is being documented"},
     :related
     {:type zen/vector,
      :every
      {:confirms #{Reference},
       :zen/desc "Related identifiers or resources"}},
     :event
     {:type zen/vector,
      :every
      {:confirms #{CodeableConcept},
       :zen/desc "Main clinical acts documented"}},
     :practiceSetting
     {:confirms #{CodeableConcept},
      :zen/desc
      "Additional details about where the content was created (e.g. clinical specialty)"},
     :facilityType
     {:confirms #{CodeableConcept},
      :zen/desc "Kind of facility where patient was seen"}}},
   :securityLabel
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "Document security-tags"}},
   :subject
   {:confirms #{Reference},
    :zen/desc "Who/what is the subject of the document"},
   :authenticator
   {:confirms #{Reference},
    :zen/desc "Who/what authenticated the document"}}},
 EffectEvidenceSynthesis
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "EffectEvidenceSynthesis",
  :require
  #{:exposureAlternative :outcome :status :population :exposure},
  :type zen/map,
  :zen/desc
  "The EffectEvidenceSynthesis resource describes the difference in an outcome between exposures states in a population where the effect estimate is derived from a combination of research studies.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/EffectEvidenceSynthesis",
  :keys
  {:description
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc
    "Natural language description of the effect evidence synthesis"},
   :exposureAlternative
   {:confirms #{Reference}, :zen/desc "What comparison exposure?"},
   :date
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "Date last changed"},
   :effectEstimate
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc "What was the estimated effect",
     :keys
     {:precisionEstimate
      {:type zen/vector,
       :every
       {:confirms #{BackboneElement},
        :type zen/map,
        :zen/desc "How precise the estimate is",
        :keys
        {:level
         {:confirms #{decimal},
          :type zen/number,
          :zen/desc "Level of confidence interval"},
         :from
         {:confirms #{decimal},
          :type zen/number,
          :zen/desc "Lower bound"},
         :to
         {:confirms #{decimal},
          :type zen/number,
          :zen/desc "Upper bound"},
         :type
         {:confirms #{CodeableConcept},
          :zen/desc "Type of precision estimate"}}}},
      :type
      {:confirms #{CodeableConcept},
       :zen/desc "Type of efffect estimate"},
      :variantState
      {:confirms #{CodeableConcept},
       :zen/desc "Variant exposure states"},
      :value
      {:confirms #{decimal},
       :type zen/number,
       :zen/desc "Point estimate"},
      :unitOfMeasure
      {:confirms #{CodeableConcept},
       :zen/desc "What unit is the outcome described in?"},
      :description
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Description of effect estimate"}}}},
   :endorser
   {:type zen/vector,
    :every
    {:confirms #{ContactDetail},
     :zen/desc "Who endorsed the content"}},
   :publisher
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name of the publisher (organization or individual)"},
   :approvalDate
   {:confirms #{date},
    :type zen/date,
    :zen/desc
    "When the effect evidence synthesis was approved by publisher"},
   :jurisdiction
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc
     "Intended jurisdiction for effect evidence synthesis (if applicable)"}},
   :sampleSize
   {:confirms #{BackboneElement},
    :type zen/map,
    :zen/desc "What sample size was involved?",
    :keys
    {:description
     {:confirms #{string},
      :type zen/string,
      :zen/desc "Description of sample size"},
     :numberOfStudies
     {:confirms #{integer},
      :type zen/integer,
      :zen/desc "How many studies?"},
     :numberOfParticipants
     {:confirms #{integer},
      :type zen/integer,
      :zen/desc "How many participants?"}}},
   :name
   {:confirms #{string},
    :type zen/string,
    :zen/desc
    "Name for this effect evidence synthesis (computer friendly)"},
   :useContext
   {:type zen/vector,
    :every
    {:confirms #{UsageContext},
     :zen/desc "The context that the content is intended to support"}},
   :copyright
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc "Use and/or publishing restrictions"},
   :studyType
   {:confirms #{CodeableConcept}, :zen/desc "Type of study"},
   :outcome {:confirms #{Reference}, :zen/desc "What outcome?"},
   :topic
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc
     "The category of the EffectEvidenceSynthesis, such as Education, Treatment, Assessment, etc."}},
   :resourceType
   {:type zen/string, :const {:value "EffectEvidenceSynthesis"}},
   :title
   {:confirms #{string},
    :type zen/string,
    :zen/desc
    "Name for this effect evidence synthesis (human friendly)"},
   :note
   {:type zen/vector,
    :every
    {:confirms #{Annotation},
     :zen/desc "Used for footnotes or explanatory notes"}},
   :author
   {:type zen/vector,
    :every
    {:confirms #{ContactDetail},
     :zen/desc "Who authored the content"}},
   :synthesisType
   {:confirms #{CodeableConcept}, :zen/desc "Type of synthesis"},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc "draft | active | retired | unknown"},
   :population {:confirms #{Reference}, :zen/desc "What population?"},
   :url
   {:confirms #{uri},
    :type zen/string,
    :zen/desc
    "Canonical identifier for this effect evidence synthesis, represented as a URI (globally unique)"},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier},
     :zen/desc
     "Additional identifier for the effect evidence synthesis"}},
   :lastReviewDate
   {:confirms #{date},
    :type zen/date,
    :zen/desc "When the effect evidence synthesis was last reviewed"},
   :editor
   {:type zen/vector,
    :every
    {:confirms #{ContactDetail}, :zen/desc "Who edited the content"}},
   :certainty
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc "How certain is the effect",
     :keys
     {:rating
      {:type zen/vector,
       :every
       {:confirms #{CodeableConcept}, :zen/desc "Certainty rating"}},
      :note
      {:type zen/vector,
       :every
       {:confirms #{Annotation},
        :zen/desc "Used for footnotes or explanatory notes"}},
      :certaintySubcomponent
      {:type zen/vector,
       :every
       {:confirms #{BackboneElement},
        :type zen/map,
        :zen/desc
        "A component that contributes to the overall certainty",
        :keys
        {:note
         {:type zen/vector,
          :every
          {:confirms #{Annotation},
           :zen/desc "Used for footnotes or explanatory notes"}},
         :type
         {:confirms #{CodeableConcept},
          :zen/desc "Type of subcomponent of certainty rating"},
         :rating
         {:type zen/vector,
          :every
          {:confirms #{CodeableConcept},
           :zen/desc "Subcomponent certainty rating"}}}}}}}},
   :reviewer
   {:type zen/vector,
    :every
    {:confirms #{ContactDetail},
     :zen/desc "Who reviewed the content"}},
   :exposure {:confirms #{Reference}, :zen/desc "What exposure?"},
   :resultsByExposure
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:riskEvidenceSynthesis},
     :type zen/map,
     :zen/desc "What was the result per exposure?",
     :keys
     {:variantState
      {:confirms #{CodeableConcept},
       :zen/desc "Variant exposure states"},
      :description
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Description of results by exposure"},
      :riskEvidenceSynthesis
      {:confirms #{Reference}, :zen/desc "Risk evidence synthesis"},
      :exposureState
      {:confirms #{code},
       :type zen/string,
       :zen/desc "exposure | exposure-alternative"}}}},
   :version
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Business version of the effect evidence synthesis"},
   :relatedArtifact
   {:type zen/vector,
    :every
    {:confirms #{RelatedArtifact},
     :zen/desc "Additional documentation, citations, etc."}},
   :contact
   {:type zen/vector,
    :every
    {:confirms #{ContactDetail},
     :zen/desc "Contact details for the publisher"}},
   :effectivePeriod
   {:confirms #{Period},
    :zen/desc
    "When the effect evidence synthesis is expected to be used"}}},
 Encounter
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "Encounter",
  :require #{:status :class},
  :type zen/map,
  :zen/desc
  "An interaction between a patient and healthcare provider(s) for the purpose of providing healthcare service(s) or assessing the health status of a patient.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/Encounter",
  :keys
  {:appointment
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "The appointment that scheduled this encounter"}},
   :diagnosis
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:condition},
     :type zen/map,
     :zen/desc "The list of diagnosis relevant to this encounter",
     :keys
     {:condition
      {:confirms #{Reference},
       :zen/desc
       "The diagnosis or procedure relevant to the encounter"},
      :rank
      {:confirms #{positiveInt},
       :type zen/integer,
       :zen/desc "Ranking of the diagnosis (for each role type)"},
      :use
      {:confirms #{CodeableConcept},
       :zen/desc
       "Role that this diagnosis has within the encounter (e.g. admission, billing, discharge …)"}}}},
   :serviceProvider
   {:confirms #{Reference},
    :zen/desc
    "The organization (facility) responsible for this encounter"},
   :episodeOfCare
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc
     "Episode(s) of care that this encounter should be recorded against"}},
   :reasonCode
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "Coded reason the encounter takes place"}},
   :type
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "Specific type of encounter"}},
   :participant
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc "List of participants involved in the encounter",
     :keys
     {:type
      {:type zen/vector,
       :every
       {:confirms #{CodeableConcept},
        :zen/desc "Role of participant in encounter"}},
      :individual
      {:confirms #{Reference},
       :zen/desc
       "Persons involved in the encounter other than the patient"},
      :period
      {:confirms #{Period},
       :zen/desc
       "Period of time during the encounter that the participant participated"}}}},
   :resourceType {:type zen/string, :const {:value "Encounter"}},
   :serviceType
   {:confirms #{CodeableConcept},
    :zen/desc "Specific type of service"},
   :account
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc
     "The set of accounts that may be used for billing for this Encounter"}},
   :classHistory
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:class :period},
     :type zen/map,
     :zen/desc "List of past encounter classes",
     :keys
     {:class
      {:confirms #{Coding},
       :zen/desc "inpatient | outpatient | ambulatory | emergency +"},
      :period
      {:confirms #{Period},
       :zen/desc
       "The time that the episode was in the specified class"}}}},
   :priority
   {:confirms #{CodeableConcept},
    :zen/desc "Indicates the urgency of the encounter"},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc
    "planned | arrived | triaged | in-progress | onleave | finished | cancelled +"},
   :class
   {:confirms #{Coding},
    :zen/desc "Classification of patient encounter"},
   :length
   {:confirms #{Duration},
    :zen/desc
    "Quantity of time the encounter lasted (less time absent)"},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier},
     :zen/desc "Identifier(s) by which this encounter is known"}},
   :hospitalization
   {:confirms #{BackboneElement},
    :type zen/map,
    :zen/desc "Details about the admission to a healthcare service",
    :keys
    {:dischargeDisposition
     {:confirms #{CodeableConcept},
      :zen/desc "Category or kind of location after discharge"},
     :preAdmissionIdentifier
     {:confirms #{Identifier}, :zen/desc "Pre-admission identifier"},
     :specialArrangement
     {:type zen/vector,
      :every
      {:confirms #{CodeableConcept},
       :zen/desc "Wheelchair, translator, stretcher, etc."}},
     :dietPreference
     {:type zen/vector,
      :every
      {:confirms #{CodeableConcept},
       :zen/desc "Diet preferences reported by the patient"}},
     :admitSource
     {:confirms #{CodeableConcept},
      :zen/desc
      "From where patient was admitted (physician referral, transfer)"},
     :specialCourtesy
     {:type zen/vector,
      :every
      {:confirms #{CodeableConcept},
       :zen/desc "Special courtesies (VIP, board member)"}},
     :reAdmission
     {:confirms #{CodeableConcept},
      :zen/desc
      "The type of hospital re-admission that has occurred (if any). If the value is absent, then this is not identified as a readmission"},
     :origin
     {:confirms #{Reference},
      :zen/desc
      "The location/organization from which the patient came before admission"},
     :destination
     {:confirms #{Reference},
      :zen/desc
      "Location/organization to which the patient is discharged"}}},
   :period
   {:confirms #{Period},
    :zen/desc "The start and end time of the encounter"},
   :basedOn
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "The ServiceRequest that initiated this encounter"}},
   :partOf
   {:confirms #{Reference},
    :zen/desc "Another Encounter this encounter is part of"},
   :location
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:location},
     :type zen/map,
     :zen/desc "List of locations where the patient has been",
     :keys
     {:physicalType
      {:confirms #{CodeableConcept},
       :zen/desc
       "The physical type of the location (usually the level in the location hierachy - bed room ward etc.)"},
      :status
      {:confirms #{code},
       :type zen/string,
       :zen/desc "planned | active | reserved | completed"},
      :location
      {:confirms #{Reference},
       :zen/desc "Location the encounter takes place"},
      :period
      {:confirms #{Period},
       :zen/desc
       "Time period during which the patient was present at the location"}}}},
   :subject
   {:confirms #{Reference},
    :zen/desc "The patient or group present at the encounter"},
   :statusHistory
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:status :period},
     :type zen/map,
     :zen/desc "List of past encounter statuses",
     :keys
     {:period
      {:confirms #{Period},
       :zen/desc
       "The time that the episode was in the specified status"},
      :status
      {:confirms #{code},
       :type zen/string,
       :zen/desc
       "planned | arrived | triaged | in-progress | onleave | finished | cancelled +"}}}},
   :reasonReference
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "Reason the encounter takes place (reference)"}}}},
 Endpoint
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "Endpoint",
  :require #{:connectionType :address :payloadType :status},
  :type zen/map,
  :zen/desc
  "The technical details of an endpoint that can be used for electronic services, such as for web services providing XDS.b or a REST endpoint for another FHIR server. This may include any security context information.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/Endpoint",
  :keys
  {:connectionType
   {:confirms #{Coding},
    :zen/desc
    "Protocol/Profile/Standard to be used with this endpoint connection"},
   :address
   {:confirms #{url},
    :type zen/string,
    :zen/desc
    "The technical base address for connecting to this endpoint"},
   :managingOrganization
   {:confirms #{Reference},
    :zen/desc
    "Organization that manages this endpoint (might not be the organization that exposes the endpoint)"},
   :name
   {:confirms #{string},
    :type zen/string,
    :zen/desc "A name that this endpoint can be identified by"},
   :payloadMimeType
   {:type zen/vector,
    :every
    {:confirms #{code},
     :type zen/string,
     :zen/desc
     "Mimetype to send. If not specified, the content could be anything (including no payload, if the connectionType defined this)"}},
   :resourceType {:type zen/string, :const {:value "Endpoint"}},
   :payloadType
   {:minItems 1,
    :type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc
     "The type of content that may be used at this endpoint (e.g. XDS Discharge summaries)"}},
   :header
   {:type zen/vector,
    :every
    {:confirms #{string},
     :type zen/string,
     :zen/desc "Usage depends on the channel type"}},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc
    "active | suspended | error | off | entered-in-error | test"},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier},
     :zen/desc "Identifies this endpoint across multiple systems"}},
   :period
   {:confirms #{Period},
    :zen/desc "Interval the endpoint is expected to be operational"},
   :contact
   {:type zen/vector,
    :every
    {:confirms #{ContactPoint},
     :zen/desc "Contact details for source (e.g. troubleshooting)"}}}},
 EnrollmentRequest
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "EnrollmentRequest",
  :type zen/map,
  :zen/desc
  "This resource provides the insurance enrollment details to the insurer regarding a specified coverage.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/EnrollmentRequest",
  :keys
  {:created
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "Creation date"},
   :candidate
   {:confirms #{Reference}, :zen/desc "The subject to be enrolled"},
   :identifier
   {:type zen/vector,
    :every {:confirms #{Identifier}, :zen/desc "Business Identifier"}},
   :provider
   {:confirms #{Reference}, :zen/desc "Responsible practitioner"},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc "active | cancelled | draft | entered-in-error"},
   :coverage
   {:confirms #{Reference}, :zen/desc "Insurance information"},
   :insurer {:confirms #{Reference}, :zen/desc "Target"},
   :resourceType
   {:type zen/string, :const {:value "EnrollmentRequest"}}}},
 EnrollmentResponse
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "EnrollmentResponse",
  :type zen/map,
  :zen/desc
  "This resource provides enrollment and plan details from the processing of an EnrollmentRequest resource.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/EnrollmentResponse",
  :keys
  {:request {:confirms #{Reference}, :zen/desc "Claim reference"},
   :requestProvider
   {:confirms #{Reference}, :zen/desc "Responsible practitioner"},
   :created
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "Creation date"},
   :outcome
   {:confirms #{code},
    :type zen/string,
    :zen/desc "queued | complete | error | partial"},
   :organization {:confirms #{Reference}, :zen/desc "Insurer"},
   :resourceType
   {:type zen/string, :const {:value "EnrollmentResponse"}},
   :disposition
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Disposition Message"},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc "active | cancelled | draft | entered-in-error"},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier}, :zen/desc "Business Identifier"}}}},
 EpisodeOfCare
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "EpisodeOfCare",
  :require #{:patient :status},
  :type zen/map,
  :zen/desc
  "An association between a patient and an organization / healthcare provider(s) during which time encounters may occur. The managing organization assumes a level of responsibility for the patient during this time.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/EpisodeOfCare",
  :keys
  {:patient
   {:confirms #{Reference},
    :zen/desc "The patient who is the focus of this episode of care"},
   :diagnosis
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:condition},
     :type zen/map,
     :zen/desc
     "The list of diagnosis relevant to this episode of care",
     :keys
     {:rank
      {:confirms #{positiveInt},
       :type zen/integer,
       :zen/desc "Ranking of the diagnosis (for each role type)"},
      :condition
      {:confirms #{Reference},
       :zen/desc
       "Conditions/problems/diagnoses this episode of care is for"},
      :role
      {:confirms #{CodeableConcept},
       :zen/desc
       "Role that this diagnosis has within the episode of care (e.g. admission, billing, discharge …)"}}}},
   :managingOrganization
   {:confirms #{Reference},
    :zen/desc "Organization that assumes care"},
   :type
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc
     "Type/class  - e.g. specialist referral, disease management"}},
   :resourceType {:type zen/string, :const {:value "EpisodeOfCare"}},
   :account
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc
     "The set of accounts that may be used for billing for this EpisodeOfCare"}},
   :referralRequest
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "Originating Referral Request(s)"}},
   :team
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc
     "Other practitioners facilitating this episode of care"}},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc
    "planned | waitlist | active | onhold | finished | cancelled | entered-in-error"},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier},
     :zen/desc
     "Business Identifier(s) relevant for this EpisodeOfCare"}},
   :period
   {:confirms #{Period},
    :zen/desc "Interval during responsibility is assumed"},
   :careManager
   {:confirms #{Reference},
    :zen/desc "Care manager/care coordinator for the patient"},
   :statusHistory
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:status :period},
     :type zen/map,
     :zen/desc
     "Past list of status codes (the current status may be included to cover the start date of the status)",
     :keys
     {:period
      {:confirms #{Period},
       :zen/desc
       "Duration the EpisodeOfCare was in the specified status"},
      :status
      {:confirms #{code},
       :type zen/string,
       :zen/desc
       "planned | waitlist | active | onhold | finished | cancelled | entered-in-error"}}}}}},
 EventDefinition
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "EventDefinition",
  :require #{:status :trigger},
  :type zen/map,
  :zen/desc
  "The EventDefinition resource provides a reusable description of when a particular event can occur.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/EventDefinition",
  :keys
  {:description
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc "Natural language description of the event definition"},
   :date
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "Date last changed"},
   :endorser
   {:type zen/vector,
    :every
    {:confirms #{ContactDetail},
     :zen/desc "Who endorsed the content"}},
   :publisher
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name of the publisher (organization or individual)"},
   :approvalDate
   {:confirms #{date},
    :type zen/date,
    :zen/desc "When the event definition was approved by publisher"},
   :jurisdiction
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc
     "Intended jurisdiction for event definition (if applicable)"}},
   :purpose
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc "Why this event definition is defined"},
   :name
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name for this event definition (computer friendly)"},
   :useContext
   {:type zen/vector,
    :every
    {:confirms #{UsageContext},
     :zen/desc "The context that the content is intended to support"}},
   :copyright
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc "Use and/or publishing restrictions"},
   :experimental
   {:confirms #{boolean},
    :type zen/boolean,
    :zen/desc "For testing purposes, not real usage"},
   :topic
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "E.g. Education, Treatment, Assessment, etc."}},
   :resourceType {:type zen/string, :const {:value "EventDefinition"}},
   :title
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name for this event definition (human friendly)"},
   :author
   {:type zen/vector,
    :every
    {:confirms #{ContactDetail},
     :zen/desc "Who authored the content"}},
   :usage
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Describes the clinical usage of the event definition"},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc "draft | active | retired | unknown"},
   :subtitle
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Subordinate title of the event definition"},
   :url
   {:confirms #{uri},
    :type zen/string,
    :zen/desc
    "Canonical identifier for this event definition, represented as a URI (globally unique)"},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier},
     :zen/desc "Additional identifier for the event definition"}},
   :lastReviewDate
   {:confirms #{date},
    :type zen/date,
    :zen/desc "When the event definition was last reviewed"},
   :editor
   {:type zen/vector,
    :every
    {:confirms #{ContactDetail}, :zen/desc "Who edited the content"}},
   :reviewer
   {:type zen/vector,
    :every
    {:confirms #{ContactDetail},
     :zen/desc "Who reviewed the content"}},
   :version
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Business version of the event definition"},
   :trigger
   {:minItems 1,
    :type zen/vector,
    :every
    {:confirms #{TriggerDefinition},
     :zen/desc "\"when\" the event occurs (multiple = 'or')"}},
   :relatedArtifact
   {:type zen/vector,
    :every
    {:confirms #{RelatedArtifact},
     :zen/desc "Additional documentation, citations, etc."}},
   :contact
   {:type zen/vector,
    :every
    {:confirms #{ContactDetail},
     :zen/desc "Contact details for the publisher"}},
   :subject
   {:type zen/map,
    :zen/desc "Type of individual the event definition is focused on",
    :keys
    {:CodeableConcept {:confirms #{CodeableConcept}},
     :Reference {:confirms #{Reference}}},
    :exclusive-keys #{#{:CodeableConcept :Reference}}},
   :effectivePeriod
   {:confirms #{Period},
    :zen/desc "When the event definition is expected to be used"}}},
 Evidence
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "Evidence",
  :require #{:status :exposureBackground},
  :type zen/map,
  :zen/desc
  "The Evidence resource describes the conditional state (population and any exposures being compared within the population) and outcome (if specified) that the knowledge (evidence, assertion, recommendation) is about.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/Evidence",
  :keys
  {:description
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc "Natural language description of the evidence"},
   :date
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "Date last changed"},
   :endorser
   {:type zen/vector,
    :every
    {:confirms #{ContactDetail},
     :zen/desc "Who endorsed the content"}},
   :publisher
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name of the publisher (organization or individual)"},
   :approvalDate
   {:confirms #{date},
    :type zen/date,
    :zen/desc "When the evidence was approved by publisher"},
   :jurisdiction
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "Intended jurisdiction for evidence (if applicable)"}},
   :name
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name for this evidence (computer friendly)"},
   :useContext
   {:type zen/vector,
    :every
    {:confirms #{UsageContext},
     :zen/desc "The context that the content is intended to support"}},
   :copyright
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc "Use and/or publishing restrictions"},
   :outcome
   {:type zen/vector,
    :every {:confirms #{Reference}, :zen/desc "What outcome?"}},
   :topic
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc
     "The category of the Evidence, such as Education, Treatment, Assessment, etc."}},
   :resourceType {:type zen/string, :const {:value "Evidence"}},
   :title
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name for this evidence (human friendly)"},
   :note
   {:type zen/vector,
    :every
    {:confirms #{Annotation},
     :zen/desc "Used for footnotes or explanatory notes"}},
   :author
   {:type zen/vector,
    :every
    {:confirms #{ContactDetail},
     :zen/desc "Who authored the content"}},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc "draft | active | retired | unknown"},
   :subtitle
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Subordinate title of the Evidence"},
   :url
   {:confirms #{uri},
    :type zen/string,
    :zen/desc
    "Canonical identifier for this evidence, represented as a URI (globally unique)"},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier},
     :zen/desc "Additional identifier for the evidence"}},
   :lastReviewDate
   {:confirms #{date},
    :type zen/date,
    :zen/desc "When the evidence was last reviewed"},
   :editor
   {:type zen/vector,
    :every
    {:confirms #{ContactDetail}, :zen/desc "Who edited the content"}},
   :reviewer
   {:type zen/vector,
    :every
    {:confirms #{ContactDetail},
     :zen/desc "Who reviewed the content"}},
   :shortTitle
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Title for use in informal contexts"},
   :version
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Business version of the evidence"},
   :relatedArtifact
   {:type zen/vector,
    :every
    {:confirms #{RelatedArtifact},
     :zen/desc "Additional documentation, citations, etc."}},
   :contact
   {:type zen/vector,
    :every
    {:confirms #{ContactDetail},
     :zen/desc "Contact details for the publisher"}},
   :exposureBackground
   {:confirms #{Reference}, :zen/desc "What population?"},
   :effectivePeriod
   {:confirms #{Period},
    :zen/desc "When the evidence is expected to be used"},
   :exposureVariant
   {:type zen/vector,
    :every {:confirms #{Reference}, :zen/desc "What exposure?"}}}},
 EvidenceVariable
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "EvidenceVariable",
  :require #{:characteristic :status},
  :type zen/map,
  :zen/desc
  "The EvidenceVariable resource describes a \"PICO\" element that knowledge (evidence, assertion, recommendation) is about.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/EvidenceVariable",
  :keys
  {:description
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc "Natural language description of the evidence variable"},
   :date
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "Date last changed"},
   :endorser
   {:type zen/vector,
    :every
    {:confirms #{ContactDetail},
     :zen/desc "Who endorsed the content"}},
   :publisher
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name of the publisher (organization or individual)"},
   :approvalDate
   {:confirms #{date},
    :type zen/date,
    :zen/desc "When the evidence variable was approved by publisher"},
   :jurisdiction
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc
     "Intended jurisdiction for evidence variable (if applicable)"}},
   :name
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name for this evidence variable (computer friendly)"},
   :useContext
   {:type zen/vector,
    :every
    {:confirms #{UsageContext},
     :zen/desc "The context that the content is intended to support"}},
   :copyright
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc "Use and/or publishing restrictions"},
   :type
   {:confirms #{code},
    :type zen/string,
    :zen/desc "dichotomous | continuous | descriptive"},
   :topic
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc
     "The category of the EvidenceVariable, such as Education, Treatment, Assessment, etc."}},
   :resourceType
   {:type zen/string, :const {:value "EvidenceVariable"}},
   :title
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name for this evidence variable (human friendly)"},
   :note
   {:type zen/vector,
    :every
    {:confirms #{Annotation},
     :zen/desc "Used for footnotes or explanatory notes"}},
   :author
   {:type zen/vector,
    :every
    {:confirms #{ContactDetail},
     :zen/desc "Who authored the content"}},
   :characteristic
   {:minItems 1,
    :type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:definition},
     :type zen/map,
     :zen/desc "What defines the members of the evidence element",
     :keys
     {:exclude
      {:confirms #{boolean},
       :type zen/boolean,
       :zen/desc
       "Whether the characteristic includes or excludes members"},
      :usageContext
      {:type zen/vector,
       :every
       {:confirms #{UsageContext},
        :zen/desc "What code/value pairs define members?"}},
      :description
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Natural language description of the characteristic"},
      :participantEffective
      {:type zen/map,
       :zen/desc "What time period do participants cover",
       :keys
       {:dateTime {:confirms #{dateTime}, :type zen/datetime},
        :Period {:confirms #{Period}},
        :Duration {:confirms #{Duration}},
        :Timing {:confirms #{Timing}}},
       :exclusive-keys #{#{:dateTime :Period :Timing :Duration}}},
      :groupMeasure
      {:confirms #{code},
       :type zen/string,
       :zen/desc
       "mean | median | mean-of-mean | mean-of-median | median-of-mean | median-of-median"},
      :definition
      {:type zen/map,
       :zen/desc "What code or expression defines members?",
       :keys
       {:Reference {:confirms #{Reference}},
        :canonical {:confirms #{canonical}, :type zen/string},
        :CodeableConcept {:confirms #{CodeableConcept}},
        :Expression {:confirms #{Expression}},
        :DataRequirement {:confirms #{DataRequirement}},
        :TriggerDefinition {:confirms #{TriggerDefinition}}},
       :exclusive-keys
       #{#{:DataRequirement
           :TriggerDefinition
           :Expression
           :canonical
           :CodeableConcept
           :Reference}}},
      :timeFromStart
      {:confirms #{Duration},
       :zen/desc "Observation time from study start"}}}},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc "draft | active | retired | unknown"},
   :subtitle
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Subordinate title of the EvidenceVariable"},
   :url
   {:confirms #{uri},
    :type zen/string,
    :zen/desc
    "Canonical identifier for this evidence variable, represented as a URI (globally unique)"},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier},
     :zen/desc "Additional identifier for the evidence variable"}},
   :lastReviewDate
   {:confirms #{date},
    :type zen/date,
    :zen/desc "When the evidence variable was last reviewed"},
   :editor
   {:type zen/vector,
    :every
    {:confirms #{ContactDetail}, :zen/desc "Who edited the content"}},
   :reviewer
   {:type zen/vector,
    :every
    {:confirms #{ContactDetail},
     :zen/desc "Who reviewed the content"}},
   :shortTitle
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Title for use in informal contexts"},
   :version
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Business version of the evidence variable"},
   :relatedArtifact
   {:type zen/vector,
    :every
    {:confirms #{RelatedArtifact},
     :zen/desc "Additional documentation, citations, etc."}},
   :contact
   {:type zen/vector,
    :every
    {:confirms #{ContactDetail},
     :zen/desc "Contact details for the publisher"}},
   :effectivePeriod
   {:confirms #{Period},
    :zen/desc "When the evidence variable is expected to be used"}}},
 ExampleScenario
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "ExampleScenario",
  :require #{:status},
  :type zen/map,
  :zen/desc "Example of workflow instance.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/ExampleScenario",
  :keys
  {:date
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "Date last changed"},
   :publisher
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name of the publisher (organization or individual)"},
   :instance
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:resourceType :resourceId},
     :type zen/map,
     :zen/desc
     "Each resource and each version that is present in the workflow",
     :keys
     {:version
      {:type zen/vector,
       :every
       {:confirms #{BackboneElement},
        :require #{:description :versionId},
        :type zen/map,
        :zen/desc "A specific version of the resource",
        :keys
        {:description
         {:confirms #{markdown},
          :type zen/string,
          :zen/desc "The description of the resource version"},
         :versionId
         {:confirms #{string},
          :type zen/string,
          :zen/desc
          "The identifier of a specific version of a resource"}}}},
      :name
      {:confirms #{string},
       :type zen/string,
       :zen/desc "A short name for the resource instance"},
      :resourceId
      {:confirms #{string},
       :type zen/string,
       :zen/desc "The id of the resource for referencing"},
      :resourceType
      {:confirms #{code},
       :type zen/string,
       :zen/desc "The type of the resource"},
      :description
      {:confirms #{markdown},
       :type zen/string,
       :zen/desc
       "Human-friendly description of the resource instance"},
      :containedInstance
      {:type zen/vector,
       :every
       {:confirms #{BackboneElement},
        :require #{:resourceId},
        :type zen/map,
        :zen/desc "Resources contained in the instance",
        :keys
        {:versionId
         {:confirms #{string},
          :type zen/string,
          :zen/desc
          "A specific version of a resource contained in the instance"},
         :resourceId
         {:confirms #{string},
          :type zen/string,
          :zen/desc "Each resource contained in the instance"}}}}}}},
   :jurisdiction
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc
     "Intended jurisdiction for example scenario (if applicable)"}},
   :purpose
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc
    "The purpose of the example, e.g. to illustrate a scenario"},
   :name
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name for this example scenario (computer friendly)"},
   :process
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:title},
     :type zen/map,
     :zen/desc "Each major process - a group of operations",
     :keys
     {:description
      {:confirms #{markdown},
       :type zen/string,
       :zen/desc "A longer description of the group of operations"},
      :postConditions
      {:confirms #{markdown},
       :type zen/string,
       :zen/desc "Description of final status after the process ends"},
      :step
      {:type zen/vector,
       :every
       {:confirms #{BackboneElement},
        :type zen/map,
        :zen/desc "Each step of the process",
        :keys
        {:process
         {:type zen/vector, :every #:zen{:desc "Nested process"}},
         :alternative
         {:type zen/vector,
          :every
          {:confirms #{BackboneElement},
           :require #{:title},
           :type zen/map,
           :zen/desc "Alternate non-typical step action",
           :keys
           {:title
            {:confirms #{string},
             :type zen/string,
             :zen/desc "Label for alternative"},
            :description
            {:confirms #{markdown},
             :type zen/string,
             :zen/desc "A human-readable description of each option"},
            :step
            {:type zen/vector,
             :every
             #:zen{:desc
                   "What happens in each alternative option"}}}}},
         :operation
         {:confirms #{BackboneElement},
          :require #{:number},
          :type zen/map,
          :zen/desc "Each interaction or action",
          :keys
          {:response
           #:zen{:desc "Each resource instance used by the responder"},
           :description
           {:confirms #{markdown},
            :type zen/string,
            :zen/desc "A comment to be inserted in the diagram"},
           :request
           #:zen{:desc "Each resource instance used by the initiator"},
           :number
           {:confirms #{string},
            :type zen/string,
            :zen/desc "The sequential number of the interaction"},
           :name
           {:confirms #{string},
            :type zen/string,
            :zen/desc "The human-friendly name of the interaction"},
           :initiator
           {:confirms #{string},
            :type zen/string,
            :zen/desc "Who starts the transaction"},
           :type
           {:confirms #{string},
            :type zen/string,
            :zen/desc "The type of operation - CRUD"},
           :receiverActive
           {:confirms #{boolean},
            :type zen/boolean,
            :zen/desc
            "Whether the receiver is deactivated right after the transaction"},
           :initiatorActive
           {:confirms #{boolean},
            :type zen/boolean,
            :zen/desc
            "Whether the initiator is deactivated right after the transaction"},
           :receiver
           {:confirms #{string},
            :type zen/string,
            :zen/desc "Who receives the transaction"}}},
         :pause
         {:confirms #{boolean},
          :type zen/boolean,
          :zen/desc "If there is a pause in the flow"}}}},
      :title
      {:confirms #{string},
       :type zen/string,
       :zen/desc "The diagram title of the group of operations"},
      :preConditions
      {:confirms #{markdown},
       :type zen/string,
       :zen/desc
       "Description of initial status before the process starts"}}}},
   :useContext
   {:type zen/vector,
    :every
    {:confirms #{UsageContext},
     :zen/desc "The context that the content is intended to support"}},
   :copyright
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc "Use and/or publishing restrictions"},
   :experimental
   {:confirms #{boolean},
    :type zen/boolean,
    :zen/desc "For testing purposes, not real usage"},
   :resourceType {:type zen/string, :const {:value "ExampleScenario"}},
   :workflow
   {:type zen/vector,
    :every
    {:confirms #{canonical},
     :type zen/string,
     :zen/desc "Another nested workflow"}},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc "draft | active | retired | unknown"},
   :url
   {:confirms #{uri},
    :type zen/string,
    :zen/desc
    "Canonical identifier for this example scenario, represented as a URI (globally unique)"},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier},
     :zen/desc "Additional identifier for the example scenario"}},
   :version
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Business version of the example scenario"},
   :contact
   {:type zen/vector,
    :every
    {:confirms #{ContactDetail},
     :zen/desc "Contact details for the publisher"}},
   :actor
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:actorId :type},
     :type zen/map,
     :zen/desc "Actor participating in the resource",
     :keys
     {:type
      {:confirms #{code},
       :type zen/string,
       :zen/desc "person | entity"},
      :actorId
      {:confirms #{string},
       :type zen/string,
       :zen/desc "ID or acronym of the actor"},
      :name
      {:confirms #{string},
       :type zen/string,
       :zen/desc "The name of the actor as shown in the page"},
      :description
      {:confirms #{markdown},
       :type zen/string,
       :zen/desc "The description of the actor"}}}}}},
 ExplanationOfBenefit
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "ExplanationOfBenefit",
  :require
  #{:patient
    :insurance
    :use
    :type
    :created
    :outcome
    :insurer
    :status
    :provider},
  :type zen/map,
  :zen/desc
  "This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/ExplanationOfBenefit",
  :keys
  {:patient
   {:confirms #{Reference},
    :zen/desc "The recipient of the products and services"},
   :claimResponse
   {:confirms #{Reference}, :zen/desc "Claim response reference"},
   :insurance
   {:minItems 1,
    :type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:focal :coverage},
     :type zen/map,
     :zen/desc "Patient insurance information",
     :keys
     {:focal
      {:confirms #{boolean},
       :type zen/boolean,
       :zen/desc "Coverage to be used for adjudication"},
      :preAuthRef
      {:type zen/vector,
       :every
       {:confirms #{string},
        :type zen/string,
        :zen/desc "Prior authorization reference number"}},
      :coverage
      {:confirms #{Reference}, :zen/desc "Insurance information"}}}},
   :benefitBalance
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:category},
     :type zen/map,
     :zen/desc "Balance by Benefit Category",
     :keys
     {:unit
      {:confirms #{CodeableConcept}, :zen/desc "Individual or family"},
      :term
      {:confirms #{CodeableConcept}, :zen/desc "Annual or lifetime"},
      :name
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Short name for the benefit"},
      :financial
      {:type zen/vector,
       :every
       {:confirms #{BackboneElement},
        :require #{:type},
        :type zen/map,
        :zen/desc "Benefit Summary",
        :keys
        {:type
         {:confirms #{CodeableConcept},
          :zen/desc "Benefit classification"},
         :used
         {:type zen/map,
          :zen/desc "Benefits used",
          :keys
          {:unsignedInt {:confirms #{unsignedInt}, :type zen/integer},
           :Money {:confirms #{Money}}},
          :exclusive-keys #{#{:unsignedInt :Money}}},
         :allowed
         {:type zen/map,
          :zen/desc "Benefits allowed",
          :keys
          {:unsignedInt {:confirms #{unsignedInt}, :type zen/integer},
           :string {:confirms #{string}, :type zen/string},
           :Money {:confirms #{Money}}},
          :exclusive-keys #{#{:unsignedInt :string :Money}}}}}},
      :description
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Description of the benefit or services covered"},
      :category
      {:confirms #{CodeableConcept},
       :zen/desc "Benefit classification"},
      :excluded
      {:confirms #{boolean},
       :type zen/boolean,
       :zen/desc "Excluded from the plan"},
      :network
      {:confirms #{CodeableConcept},
       :zen/desc "In or out of network"}}}},
   :facility {:confirms #{Reference}, :zen/desc "Servicing Facility"},
   :processNote
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc "Note concerning adjudication",
     :keys
     {:type
      {:confirms #{code},
       :type zen/string,
       :zen/desc "display | print | printoper"},
      :number
      {:confirms #{positiveInt},
       :type zen/integer,
       :zen/desc "Note instance identifier"},
      :language
      {:confirms #{CodeableConcept}, :zen/desc "Language of the text"},
      :text
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Note explanatory text"}}}},
   :diagnosis
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:diagnosis :sequence},
     :type zen/map,
     :zen/desc "Pertinent diagnosis information",
     :keys
     {:type
      {:type zen/vector,
       :every
       {:confirms #{CodeableConcept},
        :zen/desc "Timing or nature of the diagnosis"}},
      :sequence
      {:confirms #{positiveInt},
       :type zen/integer,
       :zen/desc "Diagnosis instance identifier"},
      :onAdmission
      {:confirms #{CodeableConcept}, :zen/desc "Present on admission"},
      :diagnosis
      {:type zen/map,
       :zen/desc "Nature of illness or problem",
       :keys
       {:CodeableConcept {:confirms #{CodeableConcept}},
        :Reference {:confirms #{Reference}}},
       :exclusive-keys #{#{:CodeableConcept :Reference}}},
      :packageCode
      {:confirms #{CodeableConcept},
       :zen/desc "Package billing code"}}}},
   :preAuthRef
   {:type zen/vector,
    :every
    {:confirms #{string},
     :type zen/string,
     :zen/desc "Preauthorization reference"}},
   :adjudication
   {:type zen/vector, :every #:zen{:desc "Header-level adjudication"}},
   :enterer {:confirms #{Reference}, :zen/desc "Author of the claim"},
   :supportingInfo
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:category :sequence},
     :type zen/map,
     :zen/desc "Supporting information",
     :keys
     {:category
      {:confirms #{CodeableConcept},
       :zen/desc "Classification of the supplied information"},
      :code
      {:confirms #{CodeableConcept}, :zen/desc "Type of information"},
      :sequence
      {:confirms #{positiveInt},
       :type zen/integer,
       :zen/desc "Information instance identifier"},
      :reason
      {:confirms #{Coding},
       :zen/desc "Explanation for the information"},
      :timing
      {:type zen/map,
       :zen/desc "When it occurred",
       :keys
       {:date {:confirms #{date}, :type zen/date},
        :Period {:confirms #{Period}}},
       :exclusive-keys #{#{:date :Period}}},
      :value
      {:type zen/map,
       :zen/desc "Data to be provided",
       :keys
       {:boolean {:confirms #{boolean}, :type zen/boolean},
        :string {:confirms #{string}, :type zen/string},
        :Quantity {:confirms #{Quantity}},
        :Attachment {:confirms #{Attachment}},
        :Reference {:confirms #{Reference}}},
       :exclusive-keys
       #{#{:string :Attachment :Quantity :boolean :Reference}}}}}},
   :use
   {:confirms #{code},
    :type zen/string,
    :zen/desc "claim | preauthorization | predetermination"},
   :payment
   {:confirms #{BackboneElement},
    :type zen/map,
    :zen/desc "Payment Details",
    :keys
    {:identifier
     {:confirms #{Identifier},
      :zen/desc "Business identifier for the payment"},
     :adjustment
     {:confirms #{Money},
      :zen/desc "Payment adjustment for non-claim issues"},
     :adjustmentReason
     {:confirms #{CodeableConcept},
      :zen/desc "Explanation for the variance"},
     :type
     {:confirms #{CodeableConcept},
      :zen/desc "Partial or complete payment"},
     :date
     {:confirms #{date},
      :type zen/date,
      :zen/desc "Expected date of payment"},
     :amount
     {:confirms #{Money},
      :zen/desc "Payable amount after adjustment"}}},
   :item
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:productOrService :sequence},
     :type zen/map,
     :zen/desc "Product or service provided",
     :keys
     {:category
      {:confirms #{CodeableConcept},
       :zen/desc "Benefit classification"},
      :diagnosisSequence
      {:type zen/vector,
       :every
       {:confirms #{positiveInt},
        :type zen/integer,
        :zen/desc "Applicable diagnoses"}},
      :procedureSequence
      {:type zen/vector,
       :every
       {:confirms #{positiveInt},
        :type zen/integer,
        :zen/desc "Applicable procedures"}},
      :modifier
      {:type zen/vector,
       :every
       {:confirms #{CodeableConcept},
        :zen/desc "Product or service billing modifiers"}},
      :revenue
      {:confirms #{CodeableConcept},
       :zen/desc "Revenue or cost center code"},
      :adjudication
      {:type zen/vector,
       :every
       {:confirms #{BackboneElement},
        :require #{:category},
        :type zen/map,
        :zen/desc "Adjudication details",
        :keys
        {:reason
         {:confirms #{CodeableConcept},
          :zen/desc "Explanation of adjudication outcome"},
         :amount {:confirms #{Money}, :zen/desc "Monetary amount"},
         :category
         {:confirms #{CodeableConcept},
          :zen/desc "Type of adjudication information"},
         :value
         {:confirms #{decimal},
          :type zen/number,
          :zen/desc "Non-monitary value"}}}},
      :encounter
      {:type zen/vector,
       :every
       {:confirms #{Reference},
        :zen/desc "Encounters related to this billed item"}},
      :net {:confirms #{Money}, :zen/desc "Total item cost"},
      :serviced
      {:type zen/map,
       :zen/desc "Date or dates of service or product delivery",
       :keys
       {:date {:confirms #{date}, :type zen/date},
        :Period {:confirms #{Period}}},
       :exclusive-keys #{#{:date :Period}}},
      :subSite
      {:type zen/vector,
       :every
       {:confirms #{CodeableConcept},
        :zen/desc "Anatomical sub-location"}},
      :careTeamSequence
      {:type zen/vector,
       :every
       {:confirms #{positiveInt},
        :type zen/integer,
        :zen/desc "Applicable care team members"}},
      :productOrService
      {:confirms #{CodeableConcept},
       :zen/desc "Billing, service, product, or drug code"},
      :udi
      {:type zen/vector,
       :every
       {:confirms #{Reference}, :zen/desc "Unique device identifier"}},
      :informationSequence
      {:type zen/vector,
       :every
       {:confirms #{positiveInt},
        :type zen/integer,
        :zen/desc "Applicable exception and supporting information"}},
      :programCode
      {:type zen/vector,
       :every
       {:confirms #{CodeableConcept},
        :zen/desc "Program the product or service is provided under"}},
      :factor
      {:confirms #{decimal},
       :type zen/number,
       :zen/desc "Price scaling factor"},
      :sequence
      {:confirms #{positiveInt},
       :type zen/integer,
       :zen/desc "Item instance identifier"},
      :bodySite
      {:confirms #{CodeableConcept}, :zen/desc "Anatomical location"},
      :quantity
      {:confirms #{Quantity SimpleQuantity},
       :zen/desc "Count of products or services"},
      :location
      {:type zen/map,
       :zen/desc "Place of service or where product was supplied",
       :keys
       {:CodeableConcept {:confirms #{CodeableConcept}},
        :Address {:confirms #{Address}},
        :Reference {:confirms #{Reference}}},
       :exclusive-keys #{#{:Address :CodeableConcept :Reference}}},
      :noteNumber
      {:type zen/vector,
       :every
       {:confirms #{positiveInt},
        :type zen/integer,
        :zen/desc "Applicable note numbers"}},
      :unitPrice
      {:confirms #{Money}, :zen/desc "Fee, charge or cost per item"},
      :detail
      {:type zen/vector,
       :every
       {:confirms #{BackboneElement},
        :require #{:productOrService :sequence},
        :type zen/map,
        :zen/desc "Additional items",
        :keys
        {:category
         {:confirms #{CodeableConcept},
          :zen/desc "Benefit classification"},
         :modifier
         {:type zen/vector,
          :every
          {:confirms #{CodeableConcept},
           :zen/desc "Service/Product billing modifiers"}},
         :revenue
         {:confirms #{CodeableConcept},
          :zen/desc "Revenue or cost center code"},
         :adjudication
         {:type zen/vector,
          :every #:zen{:desc "Detail level adjudication details"}},
         :net {:confirms #{Money}, :zen/desc "Total item cost"},
         :productOrService
         {:confirms #{CodeableConcept},
          :zen/desc "Billing, service, product, or drug code"},
         :udi
         {:type zen/vector,
          :every
          {:confirms #{Reference},
           :zen/desc "Unique device identifier"}},
         :programCode
         {:type zen/vector,
          :every
          {:confirms #{CodeableConcept},
           :zen/desc
           "Program the product or service is provided under"}},
         :factor
         {:confirms #{decimal},
          :type zen/number,
          :zen/desc "Price scaling factor"},
         :sequence
         {:confirms #{positiveInt},
          :type zen/integer,
          :zen/desc "Product or service provided"},
         :subDetail
         {:type zen/vector,
          :every
          {:confirms #{BackboneElement},
           :require #{:productOrService :sequence},
           :type zen/map,
           :zen/desc "Additional items",
           :keys
           {:category
            {:confirms #{CodeableConcept},
             :zen/desc "Benefit classification"},
            :modifier
            {:type zen/vector,
             :every
             {:confirms #{CodeableConcept},
              :zen/desc "Service/Product billing modifiers"}},
            :revenue
            {:confirms #{CodeableConcept},
             :zen/desc "Revenue or cost center code"},
            :adjudication
            {:type zen/vector,
             :every
             #:zen{:desc "Subdetail level adjudication details"}},
            :net {:confirms #{Money}, :zen/desc "Total item cost"},
            :productOrService
            {:confirms #{CodeableConcept},
             :zen/desc "Billing, service, product, or drug code"},
            :udi
            {:type zen/vector,
             :every
             {:confirms #{Reference},
              :zen/desc "Unique device identifier"}},
            :programCode
            {:type zen/vector,
             :every
             {:confirms #{CodeableConcept},
              :zen/desc
              "Program the product or service is provided under"}},
            :factor
            {:confirms #{decimal},
             :type zen/number,
             :zen/desc "Price scaling factor"},
            :sequence
            {:confirms #{positiveInt},
             :type zen/integer,
             :zen/desc "Product or service provided"},
            :quantity
            {:confirms #{Quantity SimpleQuantity},
             :zen/desc "Count of products or services"},
            :noteNumber
            {:type zen/vector,
             :every
             {:confirms #{positiveInt},
              :type zen/integer,
              :zen/desc "Applicable note numbers"}},
            :unitPrice
            {:confirms #{Money},
             :zen/desc "Fee, charge or cost per item"}}}},
         :quantity
         {:confirms #{Quantity SimpleQuantity},
          :zen/desc "Count of products or services"},
         :noteNumber
         {:type zen/vector,
          :every
          {:confirms #{positiveInt},
           :type zen/integer,
           :zen/desc "Applicable note numbers"}},
         :unitPrice
         {:confirms #{Money},
          :zen/desc "Fee, charge or cost per item"}}}}}}},
   :type
   {:confirms #{CodeableConcept}, :zen/desc "Category or discipline"},
   :created
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "Response creation date"},
   :procedure
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:procedure :sequence},
     :type zen/map,
     :zen/desc "Clinical procedures performed",
     :keys
     {:procedure
      {:type zen/map,
       :zen/desc "Specific clinical procedure",
       :keys
       {:CodeableConcept {:confirms #{CodeableConcept}},
        :Reference {:confirms #{Reference}}},
       :exclusive-keys #{#{:CodeableConcept :Reference}}},
      :type
      {:type zen/vector,
       :every
       {:confirms #{CodeableConcept},
        :zen/desc "Category of Procedure"}},
      :udi
      {:type zen/vector,
       :every
       {:confirms #{Reference}, :zen/desc "Unique device identifier"}},
      :date
      {:confirms #{dateTime},
       :type zen/datetime,
       :zen/desc "When the procedure was performed"},
      :sequence
      {:confirms #{positiveInt},
       :type zen/integer,
       :zen/desc "Procedure instance identifier"}}}},
   :outcome
   {:confirms #{code},
    :type zen/string,
    :zen/desc "queued | complete | error | partial"},
   :related
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc "Prior or corollary claims",
     :keys
     {:claim
      {:confirms #{Reference},
       :zen/desc "Reference to the related claim"},
      :relationship
      {:confirms #{CodeableConcept},
       :zen/desc "How the reference claim is related"},
      :reference
      {:confirms #{Identifier}, :zen/desc "File or case reference"}}}},
   :resourceType
   {:type zen/string, :const {:value "ExplanationOfBenefit"}},
   :disposition
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Disposition Message"},
   :referral {:confirms #{Reference}, :zen/desc "Treatment Referral"},
   :preAuthRefPeriod
   {:type zen/vector,
    :every
    {:confirms #{Period},
     :zen/desc "Preauthorization in-effect period"}},
   :total
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:category :amount},
     :type zen/map,
     :zen/desc "Adjudication totals",
     :keys
     {:amount
      {:confirms #{Money},
       :zen/desc "Financial total for the category"},
      :category
      {:confirms #{CodeableConcept},
       :zen/desc "Type of adjudication information"}}}},
   :insurer
   {:confirms #{Reference},
    :zen/desc "Party responsible for reimbursement"},
   :fundsReserve
   {:confirms #{CodeableConcept}, :zen/desc "Funds reserved status"},
   :priority
   {:confirms #{CodeableConcept},
    :zen/desc "Desired processing urgency"},
   :accident
   {:confirms #{BackboneElement},
    :type zen/map,
    :zen/desc "Details of the event",
    :keys
    {:type
     {:confirms #{CodeableConcept},
      :zen/desc "The nature of the accident"},
     :date
     {:confirms #{date},
      :type zen/date,
      :zen/desc "When the incident occurred"},
     :location
     {:type zen/map,
      :zen/desc "Where the event occurred",
      :keys
      {:Address {:confirms #{Address}},
       :Reference {:confirms #{Reference}}},
      :exclusive-keys #{#{:Address :Reference}}}}},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc "active | cancelled | draft | entered-in-error"},
   :payee
   {:confirms #{BackboneElement},
    :type zen/map,
    :zen/desc "Recipient of benefits payable",
    :keys
    {:type
     {:confirms #{CodeableConcept}, :zen/desc "Category of recipient"},
     :party
     {:confirms #{Reference}, :zen/desc "Recipient reference"}}},
   :prescription
   {:confirms #{Reference},
    :zen/desc "Prescription authorizing services or products"},
   :billablePeriod
   {:confirms #{Period},
    :zen/desc "Relevant time frame for the claim"},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier},
     :zen/desc "Business Identifier for the resource"}},
   :form
   {:confirms #{Attachment},
    :zen/desc "Printed reference or actual form"},
   :subType
   {:confirms #{CodeableConcept},
    :zen/desc "More granular claim type"},
   :fundsReserveRequested
   {:confirms #{CodeableConcept},
    :zen/desc "For whom to reserve funds"},
   :benefitPeriod
   {:confirms #{Period}, :zen/desc "When the benefits are applicable"},
   :precedence
   {:confirms #{positiveInt},
    :type zen/integer,
    :zen/desc "Precedence (primary, secondary, etc.)"},
   :formCode
   {:confirms #{CodeableConcept}, :zen/desc "Printed form identifier"},
   :provider
   {:confirms #{Reference},
    :zen/desc "Party responsible for the claim"},
   :addItem
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:productOrService},
     :type zen/map,
     :zen/desc "Insurer added line items",
     :keys
     {:modifier
      {:type zen/vector,
       :every
       {:confirms #{CodeableConcept},
        :zen/desc "Service/Product billing modifiers"}},
      :adjudication
      {:type zen/vector,
       :every #:zen{:desc "Added items adjudication"}},
      :itemSequence
      {:type zen/vector,
       :every
       {:confirms #{positiveInt},
        :type zen/integer,
        :zen/desc "Item sequence number"}},
      :net {:confirms #{Money}, :zen/desc "Total item cost"},
      :serviced
      {:type zen/map,
       :zen/desc "Date or dates of service or product delivery",
       :keys
       {:date {:confirms #{date}, :type zen/date},
        :Period {:confirms #{Period}}},
       :exclusive-keys #{#{:date :Period}}},
      :detailSequence
      {:type zen/vector,
       :every
       {:confirms #{positiveInt},
        :type zen/integer,
        :zen/desc "Detail sequence number"}},
      :subSite
      {:type zen/vector,
       :every
       {:confirms #{CodeableConcept},
        :zen/desc "Anatomical sub-location"}},
      :productOrService
      {:confirms #{CodeableConcept},
       :zen/desc "Billing, service, product, or drug code"},
      :programCode
      {:type zen/vector,
       :every
       {:confirms #{CodeableConcept},
        :zen/desc "Program the product or service is provided under"}},
      :factor
      {:confirms #{decimal},
       :type zen/number,
       :zen/desc "Price scaling factor"},
      :subDetailSequence
      {:type zen/vector,
       :every
       {:confirms #{positiveInt},
        :type zen/integer,
        :zen/desc "Subdetail sequence number"}},
      :bodySite
      {:confirms #{CodeableConcept}, :zen/desc "Anatomical location"},
      :quantity
      {:confirms #{Quantity SimpleQuantity},
       :zen/desc "Count of products or services"},
      :location
      {:type zen/map,
       :zen/desc "Place of service or where product was supplied",
       :keys
       {:CodeableConcept {:confirms #{CodeableConcept}},
        :Address {:confirms #{Address}},
        :Reference {:confirms #{Reference}}},
       :exclusive-keys #{#{:Address :CodeableConcept :Reference}}},
      :provider
      {:type zen/vector,
       :every
       {:confirms #{Reference}, :zen/desc "Authorized providers"}},
      :noteNumber
      {:type zen/vector,
       :every
       {:confirms #{positiveInt},
        :type zen/integer,
        :zen/desc "Applicable note numbers"}},
      :unitPrice
      {:confirms #{Money}, :zen/desc "Fee, charge or cost per item"},
      :detail
      {:type zen/vector,
       :every
       {:confirms #{BackboneElement},
        :require #{:productOrService},
        :type zen/map,
        :zen/desc "Insurer added line items",
        :keys
        {:modifier
         {:type zen/vector,
          :every
          {:confirms #{CodeableConcept},
           :zen/desc "Service/Product billing modifiers"}},
         :adjudication
         {:type zen/vector,
          :every #:zen{:desc "Added items adjudication"}},
         :net {:confirms #{Money}, :zen/desc "Total item cost"},
         :productOrService
         {:confirms #{CodeableConcept},
          :zen/desc "Billing, service, product, or drug code"},
         :factor
         {:confirms #{decimal},
          :type zen/number,
          :zen/desc "Price scaling factor"},
         :subDetail
         {:type zen/vector,
          :every
          {:confirms #{BackboneElement},
           :require #{:productOrService},
           :type zen/map,
           :zen/desc "Insurer added line items",
           :keys
           {:modifier
            {:type zen/vector,
             :every
             {:confirms #{CodeableConcept},
              :zen/desc "Service/Product billing modifiers"}},
            :adjudication
            {:type zen/vector,
             :every #:zen{:desc "Added items adjudication"}},
            :factor
            {:confirms #{decimal},
             :type zen/number,
             :zen/desc "Price scaling factor"},
            :unitPrice
            {:confirms #{Money},
             :zen/desc "Fee, charge or cost per item"},
            :productOrService
            {:confirms #{CodeableConcept},
             :zen/desc "Billing, service, product, or drug code"},
            :quantity
            {:confirms #{Quantity SimpleQuantity},
             :zen/desc "Count of products or services"},
            :noteNumber
            {:type zen/vector,
             :every
             {:confirms #{positiveInt},
              :type zen/integer,
              :zen/desc "Applicable note numbers"}},
            :net {:confirms #{Money}, :zen/desc "Total item cost"}}}},
         :quantity
         {:confirms #{Quantity SimpleQuantity},
          :zen/desc "Count of products or services"},
         :noteNumber
         {:type zen/vector,
          :every
          {:confirms #{positiveInt},
           :type zen/integer,
           :zen/desc "Applicable note numbers"}},
         :unitPrice
         {:confirms #{Money},
          :zen/desc "Fee, charge or cost per item"}}}}}}},
   :originalPrescription
   {:confirms #{Reference},
    :zen/desc "Original prescription if superceded by fulfiller"},
   :careTeam
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:sequence :provider},
     :type zen/map,
     :zen/desc "Care Team members",
     :keys
     {:role
      {:confirms #{CodeableConcept},
       :zen/desc "Function within the team"},
      :provider
      {:confirms #{Reference},
       :zen/desc "Practitioner or organization"},
      :responsible
      {:confirms #{boolean},
       :type zen/boolean,
       :zen/desc "Indicator of the lead practitioner"},
      :qualification
      {:confirms #{CodeableConcept},
       :zen/desc "Practitioner credential or specialization"},
      :sequence
      {:confirms #{positiveInt},
       :type zen/integer,
       :zen/desc "Order of care team"}}}},
   :claim {:confirms #{Reference}, :zen/desc "Claim reference"}}},
 FamilyMemberHistory
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "FamilyMemberHistory",
  :require #{:patient :relationship :status},
  :type zen/map,
  :zen/desc
  "Significant health conditions for a person related to the patient relevant in the context of care for the patient.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/FamilyMemberHistory",
  :keys
  {:patient
   {:confirms #{Reference}, :zen/desc "Patient history is about"},
   :date
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "When history was recorded or last updated"},
   :instantiatesCanonical
   {:type zen/vector,
    :every
    {:confirms #{canonical},
     :type zen/string,
     :zen/desc "Instantiates FHIR protocol or definition"}},
   :instantiatesUri
   {:type zen/vector,
    :every
    {:confirms #{uri},
     :type zen/string,
     :zen/desc "Instantiates external protocol or definition"}},
   :age
   {:type zen/map,
    :zen/desc "(approximate) age",
    :keys
    {:Age {:confirms #{Age}},
     :Range {:confirms #{Range}},
     :string {:confirms #{string}, :type zen/string}},
    :exclusive-keys #{#{:string :Range :Age}}},
   :sex
   {:confirms #{CodeableConcept},
    :zen/desc "male | female | other | unknown"},
   :name
   {:confirms #{string},
    :type zen/string,
    :zen/desc "The family member described"},
   :relationship
   {:confirms #{CodeableConcept},
    :zen/desc "Relationship to the subject"},
   :reasonCode
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "Why was family member history performed?"}},
   :resourceType
   {:type zen/string, :const {:value "FamilyMemberHistory"}},
   :deceased
   {:type zen/map,
    :zen/desc "Dead? How old/when?",
    :keys
    {:boolean {:confirms #{boolean}, :type zen/boolean},
     :Age {:confirms #{Age}},
     :Range {:confirms #{Range}},
     :date {:confirms #{date}, :type zen/date},
     :string {:confirms #{string}, :type zen/string}},
    :exclusive-keys #{#{:date :string :Range :boolean :Age}}},
   :note
   {:type zen/vector,
    :every
    {:confirms #{Annotation},
     :zen/desc "General note about related person"}},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc
    "partial | completed | entered-in-error | health-unknown"},
   :condition
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:code},
     :type zen/map,
     :zen/desc "Condition that the related person had",
     :keys
     {:note
      {:type zen/vector,
       :every
       {:confirms #{Annotation},
        :zen/desc "Extra information about condition"}},
      :onset
      {:type zen/map,
       :zen/desc "When condition first manifested",
       :keys
       {:Age {:confirms #{Age}},
        :Range {:confirms #{Range}},
        :Period {:confirms #{Period}},
        :string {:confirms #{string}, :type zen/string}},
       :exclusive-keys #{#{:string :Range :Period :Age}}},
      :contributedToDeath
      {:confirms #{boolean},
       :type zen/boolean,
       :zen/desc
       "Whether the condition contributed to the cause of death"},
      :outcome
      {:confirms #{CodeableConcept},
       :zen/desc "deceased | permanent disability | etc."},
      :code
      {:confirms #{CodeableConcept},
       :zen/desc "Condition suffered by relation"}}}},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier},
     :zen/desc "External Id(s) for this record"}},
   :born
   {:type zen/map,
    :zen/desc "(approximate) date of birth",
    :keys
    {:Period {:confirms #{Period}},
     :date {:confirms #{date}, :type zen/date},
     :string {:confirms #{string}, :type zen/string}},
    :exclusive-keys #{#{:date :string :Period}}},
   :dataAbsentReason
   {:confirms #{CodeableConcept},
    :zen/desc
    "subject-unknown | withheld | unable-to-obtain | deferred"},
   :reasonReference
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "Why was family member history performed?"}},
   :estimatedAge
   {:confirms #{boolean},
    :type zen/boolean,
    :zen/desc "Age is estimated?"}}},
 Flag
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "Flag",
  :require #{:status :code :subject},
  :type zen/map,
  :zen/desc
  "Prospective warnings of potential issues when providing care to the patient.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url "http://hl7.org/fhir/StructureDefinition/Flag",
  :keys
  {:category
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "Clinical, administrative, etc."}},
   :encounter
   {:confirms #{Reference},
    :zen/desc "Alert relevant during encounter"},
   :resourceType {:type zen/string, :const {:value "Flag"}},
   :author {:confirms #{Reference}, :zen/desc "Flag creator"},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc "active | inactive | entered-in-error"},
   :code
   {:confirms #{CodeableConcept},
    :zen/desc "Coded or textual message to display to user"},
   :identifier
   {:type zen/vector,
    :every {:confirms #{Identifier}, :zen/desc "Business identifier"}},
   :period
   {:confirms #{Period}, :zen/desc "Time period when flag is active"},
   :subject
   {:confirms #{Reference}, :zen/desc "Who/What is flag about?"}}},
 Goal
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "Goal",
  :require #{:description :subject :lifecycleStatus},
  :type zen/map,
  :zen/desc
  "Describes the intended objective(s) for a patient, group or organization care, for example, weight loss, restoring an activity of daily living, obtaining herd immunity via immunization, meeting a process improvement objective, etc.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url "http://hl7.org/fhir/StructureDefinition/Goal",
  :keys
  {:description
   {:confirms #{CodeableConcept},
    :zen/desc "Code or text describing goal"},
   :category
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "E.g. Treatment, dietary, behavioral, etc."}},
   :addresses
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "Issues addressed by this goal"}},
   :expressedBy
   {:confirms #{Reference},
    :zen/desc "Who's responsible for creating Goal?"},
   :start
   {:type zen/map,
    :zen/desc "When goal pursuit begins",
    :keys
    {:date {:confirms #{date}, :type zen/date},
     :CodeableConcept {:confirms #{CodeableConcept}}},
    :exclusive-keys #{#{:date :CodeableConcept}}},
   :achievementStatus
   {:confirms #{CodeableConcept},
    :zen/desc
    "in-progress | improving | worsening | no-change | achieved | sustaining | not-achieved | no-progress | not-attainable"},
   :statusReason
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Reason for current status"},
   :resourceType {:type zen/string, :const {:value "Goal"}},
   :note
   {:type zen/vector,
    :every
    {:confirms #{Annotation}, :zen/desc "Comments about the goal"}},
   :priority
   {:confirms #{CodeableConcept},
    :zen/desc "high-priority | medium-priority | low-priority"},
   :outcomeCode
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "What result was achieved regarding the goal?"}},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier}, :zen/desc "External Ids for this goal"}},
   :statusDate
   {:confirms #{date},
    :type zen/date,
    :zen/desc "When goal status took effect"},
   :target
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc "Target outcome for the goal",
     :keys
     {:due
      {:type zen/map,
       :zen/desc "Reach goal on or before",
       :keys
       {:date {:confirms #{date}, :type zen/date},
        :Duration {:confirms #{Duration}}},
       :exclusive-keys #{#{:date :Duration}}},
      :measure
      {:confirms #{CodeableConcept},
       :zen/desc "The parameter whose value is being tracked"},
      :detail
      {:type zen/map,
       :zen/desc "The target value to be achieved",
       :keys
       {:Quantity {:confirms #{Quantity}},
        :Range {:confirms #{Range}},
        :CodeableConcept {:confirms #{CodeableConcept}},
        :string {:confirms #{string}, :type zen/string},
        :boolean {:confirms #{boolean}, :type zen/boolean},
        :integer {:confirms #{integer}, :type zen/integer},
        :Ratio {:confirms #{Ratio}}},
       :exclusive-keys
       #{#{:string
           :Range
           :integer
           :Ratio
           :CodeableConcept
           :Quantity
           :boolean}}}}}},
   :outcomeReference
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "Observation that resulted from goal"}},
   :subject
   {:confirms #{Reference}, :zen/desc "Who this goal is intended for"},
   :lifecycleStatus
   {:confirms #{code},
    :type zen/string,
    :zen/desc
    "proposed | planned | accepted | active | on-hold | completed | cancelled | entered-in-error | rejected"}}},
 GraphDefinition
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "GraphDefinition",
  :require #{:name :start :status},
  :type zen/map,
  :zen/desc
  "A formal computable definition of a graph of resources - that is, a coherent set of resources that form a graph by following references. The Graph Definition resource defines a set and makes rules about the set.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/GraphDefinition",
  :keys
  {:description
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc "Natural language description of the graph definition"},
   :date
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "Date last changed"},
   :publisher
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name of the publisher (organization or individual)"},
   :jurisdiction
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc
     "Intended jurisdiction for graph definition (if applicable)"}},
   :purpose
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc "Why this graph definition is defined"},
   :name
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name for this graph definition (computer friendly)"},
   :start
   {:confirms #{code},
    :type zen/string,
    :zen/desc "Type of resource at which the graph starts"},
   :useContext
   {:type zen/vector,
    :every
    {:confirms #{UsageContext},
     :zen/desc "The context that the content is intended to support"}},
   :experimental
   {:confirms #{boolean},
    :type zen/boolean,
    :zen/desc "For testing purposes, not real usage"},
   :resourceType {:type zen/string, :const {:value "GraphDefinition"}},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc "draft | active | retired | unknown"},
   :link
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc "Links this graph makes rules about",
     :keys
     {:description
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Why this link is specified"},
      :max
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Maximum occurrences for this link"},
      :target
      {:type zen/vector,
       :every
       {:confirms #{BackboneElement},
        :require #{:type},
        :type zen/map,
        :zen/desc "Potential target for the link",
        :keys
        {:params
         {:confirms #{string},
          :type zen/string,
          :zen/desc "Criteria for reverse lookup"},
         :type
         {:confirms #{code},
          :type zen/string,
          :zen/desc "Type of resource this link refers to"},
         :profile
         {:confirms #{canonical},
          :type zen/string,
          :zen/desc "Profile for the target resource"},
         :compartment
         {:type zen/vector,
          :every
          {:confirms #{BackboneElement},
           :require #{:use :rule :code},
           :type zen/map,
           :zen/desc "Compartment Consistency Rules",
           :keys
           {:use
            {:confirms #{code},
             :type zen/string,
             :zen/desc "condition | requirement"},
            :code
            {:confirms #{code},
             :type zen/string,
             :zen/desc
             "Patient | Encounter | RelatedPerson | Practitioner | Device"},
            :rule
            {:confirms #{code},
             :type zen/string,
             :zen/desc "identical | matching | different | custom"},
            :expression
            {:confirms #{string},
             :type zen/string,
             :zen/desc "Custom rule, as a FHIRPath expression"},
            :description
            {:confirms #{string},
             :type zen/string,
             :zen/desc "Documentation for FHIRPath expression"}}}},
         :link
         {:type zen/vector,
          :every
          #:zen{:desc "Additional links from target resource"}}}}},
      :sliceName
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Which slice (if profiled)"},
      :path
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Path in the resource that contains the link"},
      :min
      {:confirms #{integer},
       :type zen/integer,
       :zen/desc "Minimum occurrences for this link"}}}},
   :url
   {:confirms #{uri},
    :type zen/string,
    :zen/desc
    "Canonical identifier for this graph definition, represented as a URI (globally unique)"},
   :version
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Business version of the graph definition"},
   :contact
   {:type zen/vector,
    :every
    {:confirms #{ContactDetail},
     :zen/desc "Contact details for the publisher"}},
   :profile
   {:confirms #{canonical},
    :type zen/string,
    :zen/desc "Profile on base resource"}}},
 Group
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "Group",
  :require #{:type :actual},
  :type zen/map,
  :zen/desc
  "Represents a defined collection of entities that may be discussed or acted upon collectively but which are not expected to act collectively, and are not formally or legally recognized; i.e. a collection of entities that isn't an Organization.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url "http://hl7.org/fhir/StructureDefinition/Group",
  :keys
  {:name
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Label for Group"},
   :type
   {:confirms #{code},
    :type zen/string,
    :zen/desc
    "person | animal | practitioner | device | medication | substance"},
   :resourceType {:type zen/string, :const {:value "Group"}},
   :member
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:entity},
     :type zen/map,
     :zen/desc "Who or what is in group",
     :keys
     {:period
      {:confirms #{Period},
       :zen/desc "Period member belonged to the group"},
      :inactive
      {:confirms #{boolean},
       :type zen/boolean,
       :zen/desc "If member is no longer in group"},
      :entity
      {:confirms #{Reference},
       :zen/desc "Reference to the group member"}}}},
   :characteristic
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:exclude :value :code},
     :type zen/map,
     :zen/desc "Include / Exclude group members by Trait",
     :keys
     {:value
      {:type zen/map,
       :zen/desc "Value held by characteristic",
       :keys
       {:CodeableConcept {:confirms #{CodeableConcept}},
        :boolean {:confirms #{boolean}, :type zen/boolean},
        :Quantity {:confirms #{Quantity}},
        :Range {:confirms #{Range}},
        :Reference {:confirms #{Reference}}},
       :exclusive-keys
       #{#{:Range :CodeableConcept :Quantity :boolean :Reference}}},
      :period
      {:confirms #{Period},
       :zen/desc "Period over which characteristic is tested"},
      :exclude
      {:confirms #{boolean},
       :type zen/boolean,
       :zen/desc "Group includes or excludes"},
      :code
      {:confirms #{CodeableConcept},
       :zen/desc "Kind of characteristic"}}}},
   :active
   {:confirms #{boolean},
    :type zen/boolean,
    :zen/desc "Whether this group's record is in active use"},
   :code
   {:confirms #{CodeableConcept}, :zen/desc "Kind of Group members"},
   :identifier
   {:type zen/vector,
    :every {:confirms #{Identifier}, :zen/desc "Unique id"}},
   :quantity
   {:confirms #{unsignedInt},
    :type zen/integer,
    :zen/desc "Number of members"},
   :managingEntity
   {:confirms #{Reference},
    :zen/desc
    "Entity that is the custodian of the Group's definition"},
   :actual
   {:confirms #{boolean},
    :type zen/boolean,
    :zen/desc "Descriptive or actual"}}},
 GuidanceResponse
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "GuidanceResponse",
  :require #{:module :status},
  :type zen/map,
  :zen/desc
  "A guidance response is the formal response to a guidance request, including any output parameters returned by the evaluation, as well as the description of any proposed actions to be taken.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/GuidanceResponse",
  :keys
  {:dataRequirement
   {:type zen/vector,
    :every
    {:confirms #{DataRequirement},
     :zen/desc "Additional required data"}},
   :encounter
   {:confirms #{Reference},
    :zen/desc "Encounter during which the response was returned"},
   :reasonCode
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "Why guidance is needed"}},
   :outputParameters
   {:confirms #{Reference},
    :zen/desc "The output parameters of the evaluation, if any"},
   :evaluationMessage
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc
     "Messages resulting from the evaluation of the artifact or artifacts"}},
   :requestIdentifier
   {:confirms #{Identifier},
    :zen/desc
    "The identifier of the request associated with this response, if any"},
   :resourceType
   {:type zen/string, :const {:value "GuidanceResponse"}},
   :module
   {:type zen/map,
    :zen/desc "What guidance was requested",
    :keys
    {:uri {:confirms #{uri}, :type zen/string},
     :canonical {:confirms #{canonical}, :type zen/string},
     :CodeableConcept {:confirms #{CodeableConcept}}},
    :exclusive-keys #{#{:canonical :uri :CodeableConcept}}},
   :note
   {:type zen/vector,
    :every
    {:confirms #{Annotation},
     :zen/desc "Additional notes about the response"}},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc
    "success | data-requested | data-required | in-progress | failure | entered-in-error"},
   :result
   {:confirms #{Reference}, :zen/desc "Proposed actions, if any"},
   :identifier
   {:type zen/vector,
    :every {:confirms #{Identifier}, :zen/desc "Business identifier"}},
   :occurrenceDateTime
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "When the guidance response was processed"},
   :subject
   {:confirms #{Reference},
    :zen/desc "Patient the request was performed for"},
   :performer
   {:confirms #{Reference}, :zen/desc "Device returning the guidance"},
   :reasonReference
   {:type zen/vector,
    :every
    {:confirms #{Reference}, :zen/desc "Why guidance is needed"}}}},
 HealthcareService
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "HealthcareService",
  :type zen/map,
  :zen/desc
  "The details of a healthcare service available at a location.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/HealthcareService",
  :keys
  {:coverageArea
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "Location(s) service is intended for/available to"}},
   :category
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc
     "Broad category of service being performed or delivered"}},
   :availableTime
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc "Times the Service Site is available",
     :keys
     {:availableStartTime
      {:confirms #{time},
       :type zen/string,
       :zen/desc "Opening time of day (ignored if allDay = true)"},
      :allDay
      {:confirms #{boolean},
       :type zen/boolean,
       :zen/desc "Always available? e.g. 24 hour service"},
      :daysOfWeek
      {:type zen/vector,
       :every
       {:confirms #{code},
        :type zen/string,
        :zen/desc "mon | tue | wed | thu | fri | sat | sun"}},
      :availableEndTime
      {:confirms #{time},
       :type zen/string,
       :zen/desc "Closing time of day (ignored if allDay = true)"}}}},
   :specialty
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "Specialties handled by the HealthcareService"}},
   :name
   {:confirms #{string},
    :type zen/string,
    :zen/desc
    "Description of service as presented to a consumer while searching"},
   :notAvailable
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:description},
     :type zen/map,
     :zen/desc "Not available during this time due to provided reason",
     :keys
     {:during
      {:confirms #{Period},
       :zen/desc "Service not available from this date"},
      :description
      {:confirms #{string},
       :type zen/string,
       :zen/desc
       "Reason presented to the user explaining why time not available"}}}},
   :providedBy
   {:confirms #{Reference},
    :zen/desc "Organization that provides this service"},
   :type
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "Type of service that may be delivered or performed"}},
   :eligibility
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc
     "Specific eligibility requirements required to use the service",
     :keys
     {:code
      {:confirms #{CodeableConcept},
       :zen/desc "Coded value for the eligibility"},
      :comment
      {:confirms #{markdown},
       :type zen/string,
       :zen/desc
       "Describes the eligibility conditions for the service"}}}},
   :resourceType
   {:type zen/string, :const {:value "HealthcareService"}},
   :extraDetails
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc
    "Extra details about the service that can't be placed in the other fields"},
   :characteristic
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "Collection of characteristics (attributes)"}},
   :photo
   {:confirms #{Attachment},
    :zen/desc "Facilitates quick identification of the service"},
   :active
   {:confirms #{boolean},
    :type zen/boolean,
    :zen/desc
    "Whether this HealthcareService record is in active use"},
   :communication
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "The language that this service is offered in"}},
   :comment
   {:confirms #{string},
    :type zen/string,
    :zen/desc
    "Additional description and/or any specific issues not covered elsewhere"},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier},
     :zen/desc "External identifiers for this item"}},
   :serviceProvisionCode
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "Conditions under which service is available/offered"}},
   :availabilityExceptions
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Description of availability exceptions"},
   :appointmentRequired
   {:confirms #{boolean},
    :type zen/boolean,
    :zen/desc
    "If an appointment is required for access to this service"},
   :referralMethod
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "Ways that the service accepts referrals"}},
   :telecom
   {:type zen/vector,
    :every
    {:confirms #{ContactPoint},
     :zen/desc "Contacts related to the healthcare service"}},
   :location
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "Location(s) where service may be provided"}},
   :program
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "Programs that this service is applicable to"}},
   :endpoint
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc
     "Technical endpoints providing access to electronic services operated for the healthcare service"}}}},
 ImagingStudy
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "ImagingStudy",
  :require #{:status :subject},
  :type zen/map,
  :zen/desc
  "Representation of the content produced in a DICOM imaging study. A study comprises a set of series, each of which includes a set of Service-Object Pair Instances (SOP Instances - images or other data) acquired or produced in a common context.  A series is of only one modality (e.g. X-ray, CT, MR, ultrasound), but a study may have multiple series of different modalities.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/ImagingStudy",
  :keys
  {:description
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Institution-generated description"},
   :started
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "When the study was started"},
   :numberOfSeries
   {:confirms #{unsignedInt},
    :type zen/integer,
    :zen/desc "Number of Study Related Series"},
   :interpreter
   {:type zen/vector,
    :every
    {:confirms #{Reference}, :zen/desc "Who interpreted images"}},
   :series
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:uid :modality},
     :type zen/map,
     :zen/desc "Each study has one or more series of instances",
     :keys
     {:description
      {:confirms #{string},
       :type zen/string,
       :zen/desc "A short human readable summary of the series"},
      :started
      {:confirms #{dateTime},
       :type zen/datetime,
       :zen/desc "When the series started"},
      :laterality
      {:confirms #{Coding}, :zen/desc "Body part laterality"},
      :instance
      {:type zen/vector,
       :every
       {:confirms #{BackboneElement},
        :require #{:sopClass :uid},
        :type zen/map,
        :zen/desc "A single SOP instance from the series",
        :keys
        {:title
         {:confirms #{string},
          :type zen/string,
          :zen/desc "Description of instance"},
         :uid
         {:confirms #{id},
          :type zen/string,
          :zen/desc "DICOM SOP Instance UID"},
         :number
         {:confirms #{unsignedInt},
          :type zen/integer,
          :zen/desc "The number of this instance in the series"},
         :sopClass
         {:confirms #{Coding}, :zen/desc "DICOM class type"}}}},
      :number
      {:confirms #{unsignedInt},
       :type zen/integer,
       :zen/desc "Numeric identifier of this series"},
      :uid
      {:confirms #{id},
       :type zen/string,
       :zen/desc "DICOM Series Instance UID for the series"},
      :specimen
      {:type zen/vector,
       :every {:confirms #{Reference}, :zen/desc "Specimen imaged"}},
      :modality
      {:confirms #{Coding},
       :zen/desc "The modality of the instances in the series"},
      :bodySite {:confirms #{Coding}, :zen/desc "Body part examined"},
      :endpoint
      {:type zen/vector,
       :every
       {:confirms #{Reference}, :zen/desc "Series access endpoint"}},
      :numberOfInstances
      {:confirms #{unsignedInt},
       :type zen/integer,
       :zen/desc "Number of Series Related Instances"},
      :performer
      {:type zen/vector,
       :every
       {:confirms #{BackboneElement},
        :require #{:actor},
        :type zen/map,
        :zen/desc "Who performed the series",
        :keys
        {:actor
         {:confirms #{Reference},
          :zen/desc "Who performed the series"},
         :function
         {:confirms #{CodeableConcept},
          :zen/desc "Type of performance"}}}}}}},
   :procedureReference
   {:confirms #{Reference},
    :zen/desc "The performed Procedure reference"},
   :encounter
   {:confirms #{Reference},
    :zen/desc "Encounter with which this imaging study is associated"},
   :reasonCode
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "Why the study was requested"}},
   :modality
   {:type zen/vector,
    :every
    {:confirms #{Coding},
     :zen/desc
     "All series modality if actual acquisition modalities"}},
   :resourceType {:type zen/string, :const {:value "ImagingStudy"}},
   :note
   {:type zen/vector,
    :every
    {:confirms #{Annotation}, :zen/desc "User-defined comments"}},
   :referrer {:confirms #{Reference}, :zen/desc "Referring physician"},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc
    "registered | available | cancelled | entered-in-error | unknown"},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier},
     :zen/desc "Identifiers for the whole study"}},
   :basedOn
   {:type zen/vector,
    :every {:confirms #{Reference}, :zen/desc "Request fulfilled"}},
   :location
   {:confirms #{Reference}, :zen/desc "Where ImagingStudy occurred"},
   :endpoint
   {:type zen/vector,
    :every
    {:confirms #{Reference}, :zen/desc "Study access endpoint"}},
   :subject
   {:confirms #{Reference},
    :zen/desc "Who or what is the subject of the study"},
   :numberOfInstances
   {:confirms #{unsignedInt},
    :type zen/integer,
    :zen/desc "Number of Study Related Instances"},
   :reasonReference
   {:type zen/vector,
    :every
    {:confirms #{Reference}, :zen/desc "Why was study performed"}},
   :procedureCode
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "The performed procedure code"}}}},
 Immunization
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "Immunization",
  :require #{:patient :vaccineCode :status :occurrence},
  :type zen/map,
  :zen/desc
  "Describes the event of a patient being administered a vaccine or a record of an immunization as reported by a patient, a clinician or another party.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/Immunization",
  :keys
  {:patient {:confirms #{Reference}, :zen/desc "Who was immunized"},
   :isSubpotent
   {:confirms #{boolean}, :type zen/boolean, :zen/desc "Dose potency"},
   :reportOrigin
   {:confirms #{CodeableConcept},
    :zen/desc "Indicates the source of a secondarily reported record"},
   :protocolApplied
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:doseNumber},
     :type zen/map,
     :zen/desc "Protocol followed by the provider",
     :keys
     {:series
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Name of vaccine series"},
      :targetDisease
      {:type zen/vector,
       :every
       {:confirms #{CodeableConcept},
        :zen/desc "Vaccine preventatable disease being targetted"}},
      :authority
      {:confirms #{Reference},
       :zen/desc
       "Who is responsible for publishing the recommendations"},
      :seriesDoses
      {:type zen/map,
       :zen/desc "Recommended number of doses for immunity",
       :keys
       {:positiveInt {:confirms #{positiveInt}, :type zen/integer},
        :string {:confirms #{string}, :type zen/string}},
       :exclusive-keys #{#{:string :positiveInt}}},
      :doseNumber
      {:type zen/map,
       :zen/desc "Dose number within series",
       :keys
       {:positiveInt {:confirms #{positiveInt}, :type zen/integer},
        :string {:confirms #{string}, :type zen/string}},
       :exclusive-keys #{#{:string :positiveInt}}}}}},
   :site
   {:confirms #{CodeableConcept},
    :zen/desc "Body site vaccine  was administered"},
   :encounter
   {:confirms #{Reference},
    :zen/desc "Encounter immunization was part of"},
   :vaccineCode
   {:confirms #{CodeableConcept},
    :zen/desc "Vaccine product administered"},
   :doseQuantity
   {:confirms #{Quantity SimpleQuantity},
    :zen/desc "Amount of vaccine administered"},
   :reasonCode
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "Why immunization occurred"}},
   :statusReason
   {:confirms #{CodeableConcept}, :zen/desc "Reason not done"},
   :route
   {:confirms #{CodeableConcept},
    :zen/desc "How vaccine entered body"},
   :resourceType {:type zen/string, :const {:value "Immunization"}},
   :recorded
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc
    "When the immunization was first captured in the subject's record"},
   :programEligibility
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "Patient eligibility for a vaccination program"}},
   :note
   {:type zen/vector,
    :every
    {:confirms #{Annotation},
     :zen/desc "Additional immunization notes"}},
   :primarySource
   {:confirms #{boolean},
    :type zen/boolean,
    :zen/desc "Indicates context the data was recorded in"},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc "completed | entered-in-error | not-done"},
   :lotNumber
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Vaccine lot number"},
   :identifier
   {:type zen/vector,
    :every {:confirms #{Identifier}, :zen/desc "Business identifier"}},
   :manufacturer
   {:confirms #{Reference}, :zen/desc "Vaccine manufacturer"},
   :education
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc "Educational material presented to patient",
     :keys
     {:presentationDate
      {:confirms #{dateTime},
       :type zen/datetime,
       :zen/desc "Educational material presentation date"},
      :publicationDate
      {:confirms #{dateTime},
       :type zen/datetime,
       :zen/desc "Educational material publication date"},
      :reference
      {:confirms #{uri},
       :type zen/string,
       :zen/desc "Educational material reference pointer"},
      :documentType
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Educational material document identifier"}}}},
   :reaction
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc "Details of a reaction that follows immunization",
     :keys
     {:date
      {:confirms #{dateTime},
       :type zen/datetime,
       :zen/desc "When reaction started"},
      :reported
      {:confirms #{boolean},
       :type zen/boolean,
       :zen/desc "Indicates self-reported reaction"},
      :detail
      {:confirms #{Reference},
       :zen/desc "Additional information on reaction"}}}},
   :location
   {:confirms #{Reference}, :zen/desc "Where immunization occurred"},
   :fundingSource
   {:confirms #{CodeableConcept},
    :zen/desc "Funding source for the vaccine"},
   :subpotentReason
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "Reason for being subpotent"}},
   :occurrence
   {:type zen/map,
    :zen/desc "Vaccine administration date",
    :keys
    {:dateTime {:confirms #{dateTime}, :type zen/datetime},
     :string {:confirms #{string}, :type zen/string}},
    :exclusive-keys #{#{:string :dateTime}}},
   :expirationDate
   {:confirms #{date},
    :type zen/date,
    :zen/desc "Vaccine expiration date"},
   :performer
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:actor},
     :type zen/map,
     :zen/desc "Who performed event",
     :keys
     {:actor
      {:confirms #{Reference},
       :zen/desc "Individual or organization who was performing"},
      :function
      {:confirms #{CodeableConcept},
       :zen/desc "What type of performance was done"}}}},
   :reasonReference
   {:type zen/vector,
    :every
    {:confirms #{Reference}, :zen/desc "Why immunization occurred"}}}},
 ImmunizationEvaluation
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "ImmunizationEvaluation",
  :require
  #{:patient :immunizationEvent :status :targetDisease :doseStatus},
  :type zen/map,
  :zen/desc
  "Describes a comparison of an immunization event against published recommendations to determine if the administration is \"valid\" in relation to those  recommendations.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/ImmunizationEvaluation",
  :keys
  {:patient
   {:confirms #{Reference}, :zen/desc "Who this evaluation is for"},
   :description
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Evaluation notes"},
   :date
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "Date evaluation was performed"},
   :series
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name of vaccine series"},
   :doseNumber
   {:type zen/map,
    :zen/desc "Dose number within series",
    :keys
    {:positiveInt {:confirms #{positiveInt}, :type zen/integer},
     :string {:confirms #{string}, :type zen/string}},
    :exclusive-keys #{#{:string :positiveInt}}},
   :authority
   {:confirms #{Reference},
    :zen/desc "Who is responsible for publishing the recommendations"},
   :resourceType
   {:type zen/string, :const {:value "ImmunizationEvaluation"}},
   :seriesDoses
   {:type zen/map,
    :zen/desc "Recommended number of doses for immunity",
    :keys
    {:positiveInt {:confirms #{positiveInt}, :type zen/integer},
     :string {:confirms #{string}, :type zen/string}},
    :exclusive-keys #{#{:string :positiveInt}}},
   :doseStatusReason
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "Reason for the dose status"}},
   :immunizationEvent
   {:confirms #{Reference}, :zen/desc "Immunization being evaluated"},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc "completed | entered-in-error"},
   :identifier
   {:type zen/vector,
    :every {:confirms #{Identifier}, :zen/desc "Business identifier"}},
   :targetDisease
   {:confirms #{CodeableConcept},
    :zen/desc "Evaluation target disease"},
   :doseStatus
   {:confirms #{CodeableConcept},
    :zen/desc
    "Status of the dose relative to published recommendations"}}},
 ImmunizationRecommendation
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "ImmunizationRecommendation",
  :require #{:patient :date :recommendation},
  :type zen/map,
  :zen/desc
  "A patient's point-in-time set of recommendations (i.e. forecasting) according to a published schedule with optional supporting justification.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/ImmunizationRecommendation",
  :keys
  {:patient
   {:confirms #{Reference}, :zen/desc "Who this profile is for"},
   :identifier
   {:type zen/vector,
    :every {:confirms #{Identifier}, :zen/desc "Business identifier"}},
   :authority
   {:confirms #{Reference},
    :zen/desc "Who is responsible for protocol"},
   :recommendation
   {:minItems 1,
    :type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:forecastStatus},
     :type zen/map,
     :zen/desc "Vaccine administration recommendations",
     :keys
     {:description
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Protocol details"},
      :contraindicatedVaccineCode
      {:type zen/vector,
       :every
       {:confirms #{CodeableConcept},
        :zen/desc
        "Vaccine which is contraindicated to fulfill the recommendation"}},
      :series
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Name of vaccination series"},
      :doseNumber
      {:type zen/map,
       :zen/desc "Recommended dose number within series",
       :keys
       {:positiveInt {:confirms #{positiveInt}, :type zen/integer},
        :string {:confirms #{string}, :type zen/string}},
       :exclusive-keys #{#{:string :positiveInt}}},
      :vaccineCode
      {:type zen/vector,
       :every
       {:confirms #{CodeableConcept},
        :zen/desc
        "Vaccine  or vaccine group recommendation applies to"}},
      :seriesDoses
      {:type zen/map,
       :zen/desc "Recommended number of doses for immunity",
       :keys
       {:positiveInt {:confirms #{positiveInt}, :type zen/integer},
        :string {:confirms #{string}, :type zen/string}},
       :exclusive-keys #{#{:string :positiveInt}}},
      :forecastStatus
      {:confirms #{CodeableConcept},
       :zen/desc "Vaccine recommendation status"},
      :forecastReason
      {:type zen/vector,
       :every
       {:confirms #{CodeableConcept},
        :zen/desc "Vaccine administration status reason"}},
      :dateCriterion
      {:type zen/vector,
       :every
       {:confirms #{BackboneElement},
        :require #{:value :code},
        :type zen/map,
        :zen/desc "Dates governing proposed immunization",
        :keys
        {:code
         {:confirms #{CodeableConcept}, :zen/desc "Type of date"},
         :value
         {:confirms #{dateTime},
          :type zen/datetime,
          :zen/desc "Recommended date"}}}},
      :targetDisease
      {:confirms #{CodeableConcept},
       :zen/desc "Disease to be immunized against"},
      :supportingImmunization
      {:type zen/vector,
       :every
       {:confirms #{Reference},
        :zen/desc "Past immunizations supporting recommendation"}},
      :supportingPatientInformation
      {:type zen/vector,
       :every
       {:confirms #{Reference},
        :zen/desc
        "Patient observations supporting recommendation"}}}}},
   :date
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "Date recommendation(s) created"},
   :resourceType
   {:type zen/string, :const {:value "ImmunizationRecommendation"}}}},
 ImplementationGuide
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "ImplementationGuide",
  :require #{:fhirVersion :name :status :url :packageId},
  :type zen/map,
  :zen/desc
  "A set of rules of how a particular interoperability or standards problem is solved - typically through the use of FHIR resources. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/ImplementationGuide",
  :keys
  {:description
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc
    "Natural language description of the implementation guide"},
   :definition
   {:confirms #{BackboneElement},
    :require #{:resource},
    :type zen/map,
    :zen/desc "Information needed to build the IG",
    :keys
    {:parameter
     {:type zen/vector,
      :every
      {:confirms #{BackboneElement},
       :require #{:value :code},
       :type zen/map,
       :zen/desc "Defines how IG is built by tools",
       :keys
       {:code
        {:confirms #{code},
         :type zen/string,
         :zen/desc
         "apply | path-resource | path-pages | path-tx-cache | expansion-parameter | rule-broken-links | generate-xml | generate-json | generate-turtle | html-template"},
        :value
        {:confirms #{string},
         :type zen/string,
         :zen/desc "Value for named type"}}}},
     :grouping
     {:type zen/vector,
      :every
      {:confirms #{BackboneElement},
       :require #{:name},
       :type zen/map,
       :zen/desc
       "Grouping used to present related resources in the IG",
       :keys
       {:name
        {:confirms #{string},
         :type zen/string,
         :zen/desc "Descriptive name for the package"},
        :description
        {:confirms #{string},
         :type zen/string,
         :zen/desc "Human readable text describing the package"}}}},
     :page
     {:confirms #{BackboneElement},
      :require #{:generation :name :title},
      :type zen/map,
      :zen/desc "Page/Section in the Guide",
      :keys
      {:page
       {:type zen/vector,
        :every #:zen{:desc "Nested Pages / Sections"}},
       :generation
       {:confirms #{code},
        :type zen/string,
        :zen/desc "html | markdown | xml | generated"},
       :title
       {:confirms #{string},
        :type zen/string,
        :zen/desc "Short title shown for navigational assistance"},
       :name
       {:type zen/map,
        :zen/desc "Where to find that page",
        :keys
        {:url {:confirms #{url}, :type zen/string},
         :Reference {:confirms #{Reference}}},
        :exclusive-keys #{#{:url :Reference}}}}},
     :resource
     {:minItems 1,
      :type zen/vector,
      :every
      {:confirms #{BackboneElement},
       :require #{:reference},
       :type zen/map,
       :zen/desc "Resource in the implementation guide",
       :keys
       {:groupingId
        {:confirms #{id},
         :type zen/string,
         :zen/desc "Grouping this is part of"},
        :example
        {:type zen/map,
         :zen/desc "Is an example/What is this an example of?",
         :keys
         {:boolean {:confirms #{boolean}, :type zen/boolean},
          :canonical {:confirms #{canonical}, :type zen/string}},
         :exclusive-keys #{#{:canonical :boolean}}},
        :fhirVersion
        {:type zen/vector,
         :every
         {:confirms #{code},
          :type zen/string,
          :zen/desc "Versions this applies to (if different to IG)"}},
        :name
        {:confirms #{string},
         :type zen/string,
         :zen/desc "Human Name for the resource"},
        :reference
        {:confirms #{Reference}, :zen/desc "Location of the resource"},
        :description
        {:confirms #{string},
         :type zen/string,
         :zen/desc "Reason why included in guide"}}}},
     :template
     {:type zen/vector,
      :every
      {:confirms #{BackboneElement},
       :require #{:source :code},
       :type zen/map,
       :zen/desc "A template for building resources",
       :keys
       {:source
        {:confirms #{string},
         :type zen/string,
         :zen/desc "The source location for the template"},
        :code
        {:confirms #{code},
         :type zen/string,
         :zen/desc "Type of template specified"},
        :scope
        {:confirms #{string},
         :type zen/string,
         :zen/desc "The scope in which the template applies"}}}}}},
   :date
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "Date last changed"},
   :publisher
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name of the publisher (organization or individual)"},
   :fhirVersion
   {:minItems 1,
    :type zen/vector,
    :every
    {:confirms #{code},
     :type zen/string,
     :zen/desc "FHIR Version(s) this Implementation Guide targets"}},
   :license
   {:confirms #{code},
    :type zen/string,
    :zen/desc "SPDX license code for this IG (or not-open-source)"},
   :jurisdiction
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc
     "Intended jurisdiction for implementation guide (if applicable)"}},
   :global
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:type :profile},
     :type zen/map,
     :zen/desc "Profiles that apply globally",
     :keys
     {:type
      {:confirms #{code},
       :type zen/string,
       :zen/desc "Type this profile applies to"},
      :profile
      {:confirms #{canonical},
       :type zen/string,
       :zen/desc "Profile that all resources must conform to"}}}},
   :dependsOn
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:uri},
     :type zen/map,
     :zen/desc "Another Implementation guide this depends on",
     :keys
     {:uri
      {:confirms #{canonical},
       :type zen/string,
       :zen/desc "Identity of the IG that this depends on"},
      :packageId
      {:confirms #{id},
       :type zen/string,
       :zen/desc "NPM Package name for IG this depends on"},
      :version
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Version of the IG"}}}},
   :name
   {:confirms #{string},
    :type zen/string,
    :zen/desc
    "Name for this implementation guide (computer friendly)"},
   :useContext
   {:type zen/vector,
    :every
    {:confirms #{UsageContext},
     :zen/desc "The context that the content is intended to support"}},
   :copyright
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc "Use and/or publishing restrictions"},
   :experimental
   {:confirms #{boolean},
    :type zen/boolean,
    :zen/desc "For testing purposes, not real usage"},
   :manifest
   {:confirms #{BackboneElement},
    :require #{:resource},
    :type zen/map,
    :zen/desc "Information about an assembled IG",
    :keys
    {:rendering
     {:confirms #{url},
      :type zen/string,
      :zen/desc "Location of rendered implementation guide"},
     :resource
     {:minItems 1,
      :type zen/vector,
      :every
      {:confirms #{BackboneElement},
       :require #{:reference},
       :type zen/map,
       :zen/desc "Resource in the implementation guide",
       :keys
       {:reference
        {:confirms #{Reference}, :zen/desc "Location of the resource"},
        :example
        {:type zen/map,
         :zen/desc "Is an example/What is this an example of?",
         :keys
         {:boolean {:confirms #{boolean}, :type zen/boolean},
          :canonical {:confirms #{canonical}, :type zen/string}},
         :exclusive-keys #{#{:canonical :boolean}}},
        :relativePath
        {:confirms #{url},
         :type zen/string,
         :zen/desc "Relative path for page in IG"}}}},
     :other
     {:type zen/vector,
      :every
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Additional linkable file in IG"}},
     :image
     {:type zen/vector,
      :every
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Image within the IG"}},
     :page
     {:type zen/vector,
      :every
      {:confirms #{BackboneElement},
       :require #{:name},
       :type zen/map,
       :zen/desc "HTML page within the parent IG",
       :keys
       {:anchor
        {:type zen/vector,
         :every
         {:confirms #{string},
          :type zen/string,
          :zen/desc "Anchor available on the page"}},
        :title
        {:confirms #{string},
         :type zen/string,
         :zen/desc "Title of the page, for references"},
        :name
        {:confirms #{string},
         :type zen/string,
         :zen/desc "HTML page name"}}}}}},
   :resourceType
   {:type zen/string, :const {:value "ImplementationGuide"}},
   :title
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name for this implementation guide (human friendly)"},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc "draft | active | retired | unknown"},
   :url
   {:confirms #{uri},
    :type zen/string,
    :zen/desc
    "Canonical identifier for this implementation guide, represented as a URI (globally unique)"},
   :version
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Business version of the implementation guide"},
   :packageId
   {:confirms #{id},
    :type zen/string,
    :zen/desc "NPM Package name for IG"},
   :contact
   {:type zen/vector,
    :every
    {:confirms #{ContactDetail},
     :zen/desc "Contact details for the publisher"}}}},
 InsurancePlan
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "InsurancePlan",
  :type zen/map,
  :zen/desc
  "Details of a Health Insurance product/plan provided by an organization.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/InsurancePlan",
  :keys
  {:coverageArea
   {:type zen/vector,
    :every
    {:confirms #{Reference}, :zen/desc "Where product applies"}},
   :name
   {:confirms #{string}, :type zen/string, :zen/desc "Official name"},
   :coverage
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:type :benefit},
     :type zen/map,
     :zen/desc "Coverage details",
     :keys
     {:benefit
      {:minItems 1,
       :type zen/vector,
       :every
       {:confirms #{BackboneElement},
        :require #{:type},
        :type zen/map,
        :zen/desc "List of benefits",
        :keys
        {:requirement
         {:confirms #{string},
          :type zen/string,
          :zen/desc "Referral requirements"},
         :limit
         {:type zen/vector,
          :every
          {:confirms #{BackboneElement},
           :type zen/map,
           :zen/desc "Benefit limits",
           :keys
           {:code
            {:confirms #{CodeableConcept},
             :zen/desc "Benefit limit details"},
            :value
            {:confirms #{Quantity},
             :zen/desc "Maximum value allowed"}}}},
         :type
         {:confirms #{CodeableConcept},
          :zen/desc "Type of benefit"}}}},
      :type
      {:confirms #{CodeableConcept}, :zen/desc "Type of coverage"},
      :network
      {:type zen/vector,
       :every
       {:confirms #{Reference},
        :zen/desc "What networks provide coverage"}}}}},
   :type
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept}, :zen/desc "Kind of product"}},
   :resourceType {:type zen/string, :const {:value "InsurancePlan"}},
   :alias
   {:type zen/vector,
    :every
    {:confirms #{string},
     :type zen/string,
     :zen/desc "Alternate names"}},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc "draft | active | retired | unknown"},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier},
     :zen/desc "Business Identifier for Product"}},
   :administeredBy
   {:confirms #{Reference}, :zen/desc "Product administrator"},
   :ownedBy {:confirms #{Reference}, :zen/desc "Plan issuer"},
   :network
   {:type zen/vector,
    :every
    {:confirms #{Reference}, :zen/desc "What networks are Included"}},
   :period
   {:confirms #{Period}, :zen/desc "When the product is available"},
   :plan
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc "Plan details",
     :keys
     {:network
      {:type zen/vector,
       :every
       {:confirms #{Reference},
        :zen/desc "What networks provide coverage"}},
      :generalCost
      {:type zen/vector,
       :every
       {:confirms #{BackboneElement},
        :type zen/map,
        :zen/desc "Overall costs",
        :keys
        {:comment
         {:confirms #{string},
          :type zen/string,
          :zen/desc "Additional cost information"},
         :groupSize
         {:confirms #{positiveInt},
          :type zen/integer,
          :zen/desc "Number of enrollees"},
         :cost {:confirms #{Money}, :zen/desc "Cost value"},
         :type
         {:confirms #{CodeableConcept}, :zen/desc "Type of cost"}}}},
      :specificCost
      {:type zen/vector,
       :every
       {:confirms #{BackboneElement},
        :require #{:category},
        :type zen/map,
        :zen/desc "Specific costs",
        :keys
        {:benefit
         {:type zen/vector,
          :every
          {:confirms #{BackboneElement},
           :require #{:type},
           :type zen/map,
           :zen/desc "Benefits list",
           :keys
           {:cost
            {:type zen/vector,
             :every
             {:confirms #{BackboneElement},
              :require #{:type},
              :type zen/map,
              :zen/desc "List of the costs",
              :keys
              {:qualifiers
               {:type zen/vector,
                :every
                {:confirms #{CodeableConcept},
                 :zen/desc "Additional information about the cost"}},
               :applicability
               {:confirms #{CodeableConcept},
                :zen/desc "in-network | out-of-network | other"},
               :value
               {:confirms #{Quantity},
                :zen/desc "The actual cost value"},
               :type
               {:confirms #{CodeableConcept},
                :zen/desc "Type of cost"}}}},
            :type
            {:confirms #{CodeableConcept},
             :zen/desc "Type of specific benefit"}}}},
         :category
         {:confirms #{CodeableConcept},
          :zen/desc "General category of benefit"}}}},
      :identifier
      {:type zen/vector,
       :every
       {:confirms #{Identifier},
        :zen/desc "Business Identifier for Product"}},
      :coverageArea
      {:type zen/vector,
       :every
       {:confirms #{Reference}, :zen/desc "Where product applies"}},
      :type
      {:confirms #{CodeableConcept}, :zen/desc "Type of plan"}}}},
   :endpoint
   {:type zen/vector,
    :every {:confirms #{Reference}, :zen/desc "Technical endpoint"}},
   :contact
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc "Contact for the product",
     :keys
     {:purpose
      {:confirms #{CodeableConcept}, :zen/desc "The type of contact"},
      :name
      {:confirms #{HumanName},
       :zen/desc "A name associated with the contact"},
      :address
      {:confirms #{Address},
       :zen/desc "Visiting or postal addresses for the contact"},
      :telecom
      {:type zen/vector,
       :every
       {:confirms #{ContactPoint},
        :zen/desc
        "Contact details (telephone, email, etc.)  for a contact"}}}}}}},
 Invoice
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "Invoice",
  :require #{:status},
  :type zen/map,
  :zen/desc
  "Invoice containing collected ChargeItems from an Account with calculated individual and total price for Billing purpose.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/Invoice",
  :keys
  {:date
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "Invoice date / posting date"},
   :totalNet
   {:confirms #{Money}, :zen/desc "Net total of this Invoice"},
   :recipient
   {:confirms #{Reference}, :zen/desc "Recipient of this invoice"},
   :totalPriceComponent
   {:type zen/vector,
    :every #:zen{:desc "Components of Invoice total"}},
   :type {:confirms #{CodeableConcept}, :zen/desc "Type of Invoice"},
   :totalGross
   {:confirms #{Money}, :zen/desc "Gross total of this Invoice"},
   :participant
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:actor},
     :type zen/map,
     :zen/desc "Participant in creation of this Invoice",
     :keys
     {:role
      {:confirms #{CodeableConcept},
       :zen/desc "Type of involvement in creation of this Invoice"},
      :actor
      {:confirms #{Reference},
       :zen/desc "Individual who was involved"}}}},
   :resourceType {:type zen/string, :const {:value "Invoice"}},
   :note
   {:type zen/vector,
    :every
    {:confirms #{Annotation},
     :zen/desc "Comments made about the invoice"}},
   :account
   {:confirms #{Reference},
    :zen/desc "Account that is being balanced"},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc
    "draft | issued | balanced | cancelled | entered-in-error"},
   :lineItem
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:chargeItem},
     :type zen/map,
     :zen/desc "Line items of this Invoice",
     :keys
     {:priceComponent
      {:type zen/vector,
       :every
       {:confirms #{BackboneElement},
        :require #{:type},
        :type zen/map,
        :zen/desc "Components of total line item price",
        :keys
        {:factor
         {:confirms #{decimal},
          :type zen/number,
          :zen/desc "Factor used for calculating this component"},
         :code
         {:confirms #{CodeableConcept},
          :zen/desc "Code identifying the specific component"},
         :amount
         {:confirms #{Money},
          :zen/desc "Monetary amount associated with this component"},
         :type
         {:confirms #{code},
          :type zen/string,
          :zen/desc
          "base | surcharge | deduction | discount | tax | informational"}}}},
      :sequence
      {:confirms #{positiveInt},
       :type zen/integer,
       :zen/desc "Sequence number of line item"},
      :chargeItem
      {:type zen/map,
       :zen/desc
       "Reference to ChargeItem containing details of this line item or an inline billing code",
       :keys
       {:Reference {:confirms #{Reference}},
        :CodeableConcept {:confirms #{CodeableConcept}}},
       :exclusive-keys #{#{:CodeableConcept :Reference}}}}}},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier},
     :zen/desc "Business Identifier for item"}},
   :issuer
   {:confirms #{Reference},
    :zen/desc "Issuing Organization of Invoice"},
   :cancelledReason
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Reason for cancellation of this Invoice"},
   :paymentTerms
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc "Payment details"},
   :subject
   {:confirms #{Reference},
    :zen/desc "Recipient(s) of goods and services"}}},
 Library
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "Library",
  :require #{:type :status},
  :type zen/map,
  :zen/desc
  "The Library resource is a general-purpose container for knowledge asset definitions. It can be used to describe and expose existing knowledge assets such as logic libraries and information model descriptions, as well as to describe a collection of knowledge assets.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/Library",
  :keys
  {:description
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc "Natural language description of the library"},
   :date
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "Date last changed"},
   :dataRequirement
   {:type zen/vector,
    :every
    {:confirms #{DataRequirement},
     :zen/desc "What data is referenced by this library"}},
   :endorser
   {:type zen/vector,
    :every
    {:confirms #{ContactDetail},
     :zen/desc "Who endorsed the content"}},
   :publisher
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name of the publisher (organization or individual)"},
   :approvalDate
   {:confirms #{date},
    :type zen/date,
    :zen/desc "When the library was approved by publisher"},
   :jurisdiction
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "Intended jurisdiction for library (if applicable)"}},
   :purpose
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc "Why this library is defined"},
   :content
   {:type zen/vector,
    :every
    {:confirms #{Attachment},
     :zen/desc
     "Contents of the library, either embedded or referenced"}},
   :name
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name for this library (computer friendly)"},
   :useContext
   {:type zen/vector,
    :every
    {:confirms #{UsageContext},
     :zen/desc "The context that the content is intended to support"}},
   :copyright
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc "Use and/or publishing restrictions"},
   :type
   {:confirms #{CodeableConcept},
    :zen/desc
    "logic-library | model-definition | asset-collection | module-definition"},
   :experimental
   {:confirms #{boolean},
    :type zen/boolean,
    :zen/desc "For testing purposes, not real usage"},
   :topic
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "E.g. Education, Treatment, Assessment, etc."}},
   :resourceType {:type zen/string, :const {:value "Library"}},
   :title
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name for this library (human friendly)"},
   :author
   {:type zen/vector,
    :every
    {:confirms #{ContactDetail},
     :zen/desc "Who authored the content"}},
   :usage
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Describes the clinical usage of the library"},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc "draft | active | retired | unknown"},
   :subtitle
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Subordinate title of the library"},
   :url
   {:confirms #{uri},
    :type zen/string,
    :zen/desc
    "Canonical identifier for this library, represented as a URI (globally unique)"},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier},
     :zen/desc "Additional identifier for the library"}},
   :lastReviewDate
   {:confirms #{date},
    :type zen/date,
    :zen/desc "When the library was last reviewed"},
   :editor
   {:type zen/vector,
    :every
    {:confirms #{ContactDetail}, :zen/desc "Who edited the content"}},
   :reviewer
   {:type zen/vector,
    :every
    {:confirms #{ContactDetail},
     :zen/desc "Who reviewed the content"}},
   :version
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Business version of the library"},
   :relatedArtifact
   {:type zen/vector,
    :every
    {:confirms #{RelatedArtifact},
     :zen/desc "Additional documentation, citations, etc."}},
   :contact
   {:type zen/vector,
    :every
    {:confirms #{ContactDetail},
     :zen/desc "Contact details for the publisher"}},
   :subject
   {:type zen/map,
    :zen/desc "Type of individual the library content is focused on",
    :keys
    {:CodeableConcept {:confirms #{CodeableConcept}},
     :Reference {:confirms #{Reference}}},
    :exclusive-keys #{#{:CodeableConcept :Reference}}},
   :parameter
   {:type zen/vector,
    :every
    {:confirms #{ParameterDefinition},
     :zen/desc "Parameters defined by the library"}},
   :effectivePeriod
   {:confirms #{Period},
    :zen/desc "When the library is expected to be used"}}},
 Linkage
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "Linkage",
  :require #{:item},
  :type zen/map,
  :zen/desc
  "Identifies two or more records (resource instances) that refer to the same real-world \"occurrence\".",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/Linkage",
  :keys
  {:active
   {:confirms #{boolean},
    :type zen/boolean,
    :zen/desc "Whether this linkage assertion is active or not"},
   :item
   {:minItems 1,
    :type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:type :resource},
     :type zen/map,
     :zen/desc "Item to be linked",
     :keys
     {:type
      {:confirms #{code},
       :type zen/string,
       :zen/desc "source | alternate | historical"},
      :resource
      {:confirms #{Reference}, :zen/desc "Resource being linked"}}}},
   :author
   {:confirms #{Reference},
    :zen/desc "Who is responsible for linkages"},
   :resourceType {:type zen/string, :const {:value "Linkage"}}}},
 List
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "List",
  :require #{:mode :status},
  :type zen/map,
  :zen/desc "A list is a curated collection of resources.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url "http://hl7.org/fhir/StructureDefinition/List",
  :keys
  {:date
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "When the list was prepared"},
   :encounter
   {:confirms #{Reference}, :zen/desc "Context in which list created"},
   :orderedBy
   {:confirms #{CodeableConcept}, :zen/desc "What order the list has"},
   :mode
   {:confirms #{code},
    :type zen/string,
    :zen/desc "working | snapshot | changes"},
   :resourceType {:type zen/string, :const {:value "List"}},
   :source
   {:confirms #{Reference},
    :zen/desc
    "Who and/or what defined the list contents (aka Author)"},
   :title
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Descriptive name for the list"},
   :note
   {:type zen/vector,
    :every
    {:confirms #{Annotation}, :zen/desc "Comments about the list"}},
   :emptyReason
   {:confirms #{CodeableConcept}, :zen/desc "Why list is empty"},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc "current | retired | entered-in-error"},
   :code
   {:confirms #{CodeableConcept},
    :zen/desc "What the purpose of this list is"},
   :identifier
   {:type zen/vector,
    :every {:confirms #{Identifier}, :zen/desc "Business identifier"}},
   :entry
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:item},
     :type zen/map,
     :zen/desc "Entries in the list",
     :keys
     {:flag
      {:confirms #{CodeableConcept},
       :zen/desc "Status/Workflow information about this item"},
      :date
      {:confirms #{dateTime},
       :type zen/datetime,
       :zen/desc "When item added to list"},
      :deleted
      {:confirms #{boolean},
       :type zen/boolean,
       :zen/desc "If this item is actually marked as deleted"},
      :item {:confirms #{Reference}, :zen/desc "Actual entry"}}}},
   :subject
   {:confirms #{Reference},
    :zen/desc "If all resources have the same subject"}}},
 Location
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "Location",
  :type zen/map,
  :zen/desc
  "Details and position information for a physical place where services are provided and resources and participants may be stored, found, contained, or accommodated.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/Location",
  :keys
  {:description
   {:confirms #{string},
    :type zen/string,
    :zen/desc
    "Additional details about the location that could be displayed as further information to identify the location beyond its name"},
   :address {:confirms #{Address}, :zen/desc "Physical location"},
   :managingOrganization
   {:confirms #{Reference},
    :zen/desc "Organization responsible for provisioning and upkeep"},
   :name
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name of the location as used by humans"},
   :mode
   {:confirms #{code}, :type zen/string, :zen/desc "instance | kind"},
   :type
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "Type of function performed"}},
   :resourceType {:type zen/string, :const {:value "Location"}},
   :alias
   {:type zen/vector,
    :every
    {:confirms #{string},
     :type zen/string,
     :zen/desc
     "A list of alternate names that the location is known as, or was known as, in the past"}},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc "active | suspended | inactive"},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier},
     :zen/desc
     "Unique code or number identifying the location to its users"}},
   :hoursOfOperation
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc
     "What days/times during a week is this location usually open",
     :keys
     {:allDay
      {:confirms #{boolean},
       :type zen/boolean,
       :zen/desc "The Location is open all day"},
      :closingTime
      {:confirms #{time},
       :type zen/string,
       :zen/desc "Time that the Location closes"},
      :openingTime
      {:confirms #{time},
       :type zen/string,
       :zen/desc "Time that the Location opens"},
      :daysOfWeek
      {:type zen/vector,
       :every
       {:confirms #{code},
        :type zen/string,
        :zen/desc "mon | tue | wed | thu | fri | sat | sun"}}}}},
   :availabilityExceptions
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Description of availability exceptions"},
   :position
   {:confirms #{BackboneElement},
    :require #{:longitude :latitude},
    :type zen/map,
    :zen/desc "The absolute geographic location",
    :keys
    {:latitude
     {:confirms #{decimal},
      :type zen/number,
      :zen/desc "Latitude with WGS84 datum"},
     :longitude
     {:confirms #{decimal},
      :type zen/number,
      :zen/desc "Longitude with WGS84 datum"},
     :altitude
     {:confirms #{decimal},
      :type zen/number,
      :zen/desc "Altitude with WGS84 datum"}}},
   :telecom
   {:type zen/vector,
    :every
    {:confirms #{ContactPoint},
     :zen/desc "Contact details of the location"}},
   :operationalStatus
   {:confirms #{Coding},
    :zen/desc
    "The operational status of the location (typically only for a bed/room)"},
   :partOf
   {:confirms #{Reference},
    :zen/desc "Another Location this one is physically a part of"},
   :physicalType
   {:confirms #{CodeableConcept},
    :zen/desc "Physical form of the location"},
   :endpoint
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc
     "Technical endpoints providing access to services operated for the location"}}}},
 Measure
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "Measure",
  :require #{:status},
  :type zen/map,
  :zen/desc
  "The Measure resource provides the definition of a quality measure.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/Measure",
  :keys
  {:description
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc "Natural language description of the measure"},
   :definition
   {:type zen/vector,
    :every
    {:confirms #{markdown},
     :type zen/string,
     :zen/desc "Defined terms used in the measure documentation"}},
   :date
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "Date last changed"},
   :group
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc "Population criteria group",
     :keys
     {:description
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Summary description"},
      :population
      {:type zen/vector,
       :every
       {:confirms #{BackboneElement},
        :require #{:criteria},
        :type zen/map,
        :zen/desc "Population criteria",
        :keys
        {:description
         {:confirms #{string},
          :type zen/string,
          :zen/desc
          "The human readable description of this population criteria"},
         :criteria
         {:confirms #{Expression},
          :zen/desc "The criteria that defines this population"},
         :code
         {:confirms #{CodeableConcept},
          :zen/desc
          "initial-population | numerator | numerator-exclusion | denominator | denominator-exclusion | denominator-exception | measure-population | measure-population-exclusion | measure-observation"}}}},
      :code
      {:confirms #{CodeableConcept}, :zen/desc "Meaning of the group"},
      :stratifier
      {:type zen/vector,
       :every
       {:confirms #{BackboneElement},
        :type zen/map,
        :zen/desc "Stratifier criteria for the measure",
        :keys
        {:component
         {:type zen/vector,
          :every
          {:confirms #{BackboneElement},
           :require #{:criteria},
           :type zen/map,
           :zen/desc "Stratifier criteria component for the measure",
           :keys
           {:code
            {:confirms #{CodeableConcept},
             :zen/desc "Meaning of the stratifier component"},
            :criteria
            {:confirms #{Expression},
             :zen/desc
             "Component of how the measure should be stratified"},
            :description
            {:confirms #{string},
             :type zen/string,
             :zen/desc
             "The human readable description of this stratifier component"}}}},
         :criteria
         {:confirms #{Expression},
          :zen/desc "How the measure should be stratified"},
         :code
         {:confirms #{CodeableConcept},
          :zen/desc "Meaning of the stratifier"},
         :description
         {:confirms #{string},
          :type zen/string,
          :zen/desc
          "The human readable description of this stratifier"}}}}}}},
   :endorser
   {:type zen/vector,
    :every
    {:confirms #{ContactDetail},
     :zen/desc "Who endorsed the content"}},
   :publisher
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name of the publisher (organization or individual)"},
   :approvalDate
   {:confirms #{date},
    :type zen/date,
    :zen/desc "When the measure was approved by publisher"},
   :compositeScoring
   {:confirms #{CodeableConcept},
    :zen/desc "opportunity | all-or-nothing | linear | weighted"},
   :disclaimer
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc
    "Disclaimer for use of the measure or its referenced content"},
   :jurisdiction
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "Intended jurisdiction for measure (if applicable)"}},
   :purpose
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc "Why this measure is defined"},
   :name
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name for this measure (computer friendly)"},
   :useContext
   {:type zen/vector,
    :every
    {:confirms #{UsageContext},
     :zen/desc "The context that the content is intended to support"}},
   :copyright
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc "Use and/or publishing restrictions"},
   :guidance
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc "Additional guidance for implementers"},
   :type
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc
     "process | outcome | structure | patient-reported-outcome | composite"}},
   :experimental
   {:confirms #{boolean},
    :type zen/boolean,
    :zen/desc "For testing purposes, not real usage"},
   :topic
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc
     "The category of the measure, such as Education, Treatment, Assessment, etc."}},
   :resourceType {:type zen/string, :const {:value "Measure"}},
   :title
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name for this measure (human friendly)"},
   :supplementalData
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:criteria},
     :type zen/map,
     :zen/desc "What other data should be reported with the measure",
     :keys
     {:usage
      {:type zen/vector,
       :every
       {:confirms #{CodeableConcept},
        :zen/desc "supplemental-data | risk-adjustment-factor"}},
      :criteria
      {:confirms #{Expression},
       :zen/desc
       "Expression describing additional data to be reported"},
      :code
      {:confirms #{CodeableConcept},
       :zen/desc "Meaning of the supplemental data"},
      :description
      {:confirms #{string},
       :type zen/string,
       :zen/desc
       "The human readable description of this supplemental data"}}}},
   :library
   {:type zen/vector,
    :every
    {:confirms #{canonical},
     :type zen/string,
     :zen/desc "Logic used by the measure"}},
   :author
   {:type zen/vector,
    :every
    {:confirms #{ContactDetail},
     :zen/desc "Who authored the content"}},
   :usage
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Describes the clinical usage of the measure"},
   :rationale
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc "Detailed description of why the measure exists"},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc "draft | active | retired | unknown"},
   :subtitle
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Subordinate title of the measure"},
   :url
   {:confirms #{uri},
    :type zen/string,
    :zen/desc
    "Canonical identifier for this measure, represented as a URI (globally unique)"},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier},
     :zen/desc "Additional identifier for the measure"}},
   :lastReviewDate
   {:confirms #{date},
    :type zen/date,
    :zen/desc "When the measure was last reviewed"},
   :editor
   {:type zen/vector,
    :every
    {:confirms #{ContactDetail}, :zen/desc "Who edited the content"}},
   :riskAdjustment
   {:confirms #{string},
    :type zen/string,
    :zen/desc "How risk adjustment is applied for this measure"},
   :scoring
   {:confirms #{CodeableConcept},
    :zen/desc "proportion | ratio | continuous-variable | cohort"},
   :reviewer
   {:type zen/vector,
    :every
    {:confirms #{ContactDetail},
     :zen/desc "Who reviewed the content"}},
   :version
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Business version of the measure"},
   :relatedArtifact
   {:type zen/vector,
    :every
    {:confirms #{RelatedArtifact},
     :zen/desc "Additional documentation, citations, etc."}},
   :contact
   {:type zen/vector,
    :every
    {:confirms #{ContactDetail},
     :zen/desc "Contact details for the publisher"}},
   :improvementNotation
   {:confirms #{CodeableConcept}, :zen/desc "increase | decrease"},
   :subject
   {:type zen/map,
    :zen/desc
    "E.g. Patient, Practitioner, RelatedPerson, Organization, Location, Device",
    :keys
    {:CodeableConcept {:confirms #{CodeableConcept}},
     :Reference {:confirms #{Reference}}},
    :exclusive-keys #{#{:CodeableConcept :Reference}}},
   :rateAggregation
   {:confirms #{string},
    :type zen/string,
    :zen/desc "How is rate aggregation performed for this measure"},
   :effectivePeriod
   {:confirms #{Period},
    :zen/desc "When the measure is expected to be used"},
   :clinicalRecommendationStatement
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc "Summary of clinical guidelines"}}},
 MeasureReport
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "MeasureReport",
  :require #{:type :measure :status :period},
  :type zen/map,
  :zen/desc
  "The MeasureReport resource contains the results of the calculation of a measure; and optionally a reference to the resources involved in that calculation.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/MeasureReport",
  :keys
  {:evaluatedResource
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "What data was used to calculate the measure score"}},
   :date
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "When the report was generated"},
   :group
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc "Measure results for each group",
     :keys
     {:stratifier
      {:type zen/vector,
       :every
       {:confirms #{BackboneElement},
        :type zen/map,
        :zen/desc "Stratification results",
        :keys
        {:code
         {:type zen/vector,
          :every
          {:confirms #{CodeableConcept},
           :zen/desc "What stratifier of the group"}},
         :stratum
         {:type zen/vector,
          :every
          {:confirms #{BackboneElement},
           :type zen/map,
           :zen/desc
           "Stratum results, one for each unique value, or set of values, in the stratifier, or stratifier components",
           :keys
           {:measureScore
            {:confirms #{Quantity},
             :zen/desc "What score this stratum achieved"},
            :component
            {:type zen/vector,
             :every
             {:confirms #{BackboneElement},
              :require #{:value :code},
              :type zen/map,
              :zen/desc "Stratifier component values",
              :keys
              {:code
               {:confirms #{CodeableConcept},
                :zen/desc "What stratifier component of the group"},
               :value
               {:confirms #{CodeableConcept},
                :zen/desc "The stratum component value, e.g. male"}}}},
            :population
            {:type zen/vector,
             :every
             {:confirms #{BackboneElement},
              :type zen/map,
              :zen/desc "Population results in this stratum",
              :keys
              {:subjectResults
               {:confirms #{Reference},
                :zen/desc
                "For subject-list reports, the subject results in this population"},
               :code
               {:confirms #{CodeableConcept},
                :zen/desc
                "initial-population | numerator | numerator-exclusion | denominator | denominator-exclusion | denominator-exception | measure-population | measure-population-exclusion | measure-observation"},
               :count
               {:confirms #{integer},
                :type zen/integer,
                :zen/desc "Size of the population"}}}},
            :value
            {:confirms #{CodeableConcept},
             :zen/desc "The stratum value, e.g. male"}}}}}}},
      :population
      {:type zen/vector,
       :every
       {:confirms #{BackboneElement},
        :type zen/map,
        :zen/desc "The populations in the group",
        :keys
        {:code
         {:confirms #{CodeableConcept},
          :zen/desc
          "initial-population | numerator | numerator-exclusion | denominator | denominator-exclusion | denominator-exception | measure-population | measure-population-exclusion | measure-observation"},
         :count
         {:confirms #{integer},
          :type zen/integer,
          :zen/desc "Size of the population"},
         :subjectResults
         {:confirms #{Reference},
          :zen/desc
          "For subject-list reports, the subject results in this population"}}}},
      :measureScore
      {:confirms #{Quantity},
       :zen/desc "What score this group achieved"},
      :code
      {:confirms #{CodeableConcept},
       :zen/desc "Meaning of the group"}}}},
   :type
   {:confirms #{code},
    :type zen/string,
    :zen/desc "individual | subject-list | summary | data-collection"},
   :resourceType {:type zen/string, :const {:value "MeasureReport"}},
   :measure
   {:confirms #{canonical},
    :type zen/string,
    :zen/desc "What measure was calculated"},
   :reporter
   {:confirms #{Reference}, :zen/desc "Who is reporting the data"},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc "complete | pending | error"},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier},
     :zen/desc "Additional identifier for the MeasureReport"}},
   :period
   {:confirms #{Period}, :zen/desc "What period the report covers"},
   :improvementNotation
   {:confirms #{CodeableConcept}, :zen/desc "increase | decrease"},
   :subject
   {:confirms #{Reference},
    :zen/desc "What individual(s) the report is for"}}},
 Media
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "Media",
  :require #{:content :status},
  :type zen/map,
  :zen/desc
  "A photo, video, or audio recording acquired or used in healthcare. The actual content may be inline or provided by direct reference.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url "http://hl7.org/fhir/StructureDefinition/Media",
  :keys
  {:deviceName
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name of the device/manufacturer"},
   :encounter
   {:confirms #{Reference},
    :zen/desc "Encounter associated with media"},
   :content
   {:confirms #{Attachment},
    :zen/desc "Actual Media - reference or data"},
   :frames
   {:confirms #{positiveInt},
    :type zen/integer,
    :zen/desc "Number of frames if > 1 (photo)"},
   :width
   {:confirms #{positiveInt},
    :type zen/integer,
    :zen/desc "Width of the image in pixels (photo/video)"},
   :reasonCode
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "Why was event performed?"}},
   :type
   {:confirms #{CodeableConcept},
    :zen/desc "Classification of media as image, video, or audio"},
   :created
   {:type zen/map,
    :zen/desc "When Media was collected",
    :keys
    {:dateTime {:confirms #{dateTime}, :type zen/datetime},
     :Period {:confirms #{Period}}},
    :exclusive-keys #{#{:dateTime :Period}}},
   :modality
   {:confirms #{CodeableConcept},
    :zen/desc "The type of acquisition equipment/process"},
   :duration
   {:confirms #{decimal},
    :type zen/number,
    :zen/desc "Length in seconds (audio / video)"},
   :resourceType {:type zen/string, :const {:value "Media"}},
   :note
   {:type zen/vector,
    :every
    {:confirms #{Annotation},
     :zen/desc "Comments made about the media"}},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc
    "preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown"},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier},
     :zen/desc "Identifier(s) for the image"}},
   :operator
   {:confirms #{Reference},
    :zen/desc "The person who generated the image"},
   :bodySite
   {:confirms #{CodeableConcept}, :zen/desc "Observed body part"},
   :issued
   {:confirms #{instant},
    :type zen/string,
    :zen/desc "Date/Time this version was made available"},
   :device {:confirms #{Reference}, :zen/desc "Observing Device"},
   :basedOn
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "Procedure that caused this media to be created"}},
   :partOf
   {:type zen/vector,
    :every
    {:confirms #{Reference}, :zen/desc "Part of referenced event"}},
   :subject
   {:confirms #{Reference},
    :zen/desc "Who/What this Media is a record of"},
   :view
   {:confirms #{CodeableConcept},
    :zen/desc "Imaging view, e.g. Lateral or Antero-posterior"},
   :height
   {:confirms #{positiveInt},
    :type zen/integer,
    :zen/desc "Height of the image in pixels (photo/video)"}}},
 Medication
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "Medication",
  :type zen/map,
  :zen/desc
  "This resource is primarily used for the identification and definition of a medication for the purposes of prescribing, dispensing, and administering a medication as well as for making statements about medication use.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/Medication",
  :keys
  {:amount {:confirms #{Ratio}, :zen/desc "Amount of drug in package"},
   :resourceType {:type zen/string, :const {:value "Medication"}},
   :batch
   {:confirms #{BackboneElement},
    :type zen/map,
    :zen/desc "Details about packaged medications",
    :keys
    {:lotNumber
     {:confirms #{string},
      :type zen/string,
      :zen/desc "Identifier assigned to batch"},
     :expirationDate
     {:confirms #{dateTime},
      :type zen/datetime,
      :zen/desc "When batch will expire"}}},
   :ingredient
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:item},
     :type zen/map,
     :zen/desc "Active or inactive ingredient",
     :keys
     {:item
      {:type zen/map,
       :zen/desc "The actual ingredient or content",
       :keys
       {:CodeableConcept {:confirms #{CodeableConcept}},
        :Reference {:confirms #{Reference}}},
       :exclusive-keys #{#{:CodeableConcept :Reference}}},
      :strength
      {:confirms #{Ratio}, :zen/desc "Quantity of ingredient present"},
      :isActive
      {:confirms #{boolean},
       :type zen/boolean,
       :zen/desc "Active ingredient indicator"}}}},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc "active | inactive | entered-in-error"},
   :code
   {:confirms #{CodeableConcept},
    :zen/desc "Codes that identify this medication"},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier},
     :zen/desc "Business identifier for this medication"}},
   :manufacturer
   {:confirms #{Reference}, :zen/desc "Manufacturer of the item"},
   :form
   {:confirms #{CodeableConcept},
    :zen/desc "powder | tablets | capsule +"}}},
 MedicationAdministration
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "MedicationAdministration",
  :require #{:status :effective :subject :medication},
  :type zen/map,
  :zen/desc
  "Describes the event of a patient consuming or otherwise being administered a medication.  This may be as simple as swallowing a tablet or it may be a long running infusion.  Related resources tie this event to the authorizing prescription, and the specific encounter between patient and health care practitioner.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/MedicationAdministration",
  :keys
  {:category
   {:confirms #{CodeableConcept},
    :zen/desc "Type of medication usage"},
   :request
   {:confirms #{Reference},
    :zen/desc "Request administration performed against"},
   :eventHistory
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "A list of events of interest in the lifecycle"}},
   :dosage
   {:confirms #{BackboneElement},
    :type zen/map,
    :zen/desc "Details of how medication was taken",
    :keys
    {:text
     {:confirms #{string},
      :type zen/string,
      :zen/desc "Free text dosage instructions e.g. SIG"},
     :route
     {:confirms #{CodeableConcept},
      :zen/desc "Path of substance into body"},
     :rate
     {:type zen/map,
      :zen/desc "Dose quantity per unit of time",
      :keys
      {:Ratio {:confirms #{Ratio}}, :Quantity {:confirms #{Quantity}}},
      :exclusive-keys #{#{:Ratio :Quantity}}},
     :method
     {:confirms #{CodeableConcept},
      :zen/desc "How drug was administered"},
     :dose
     {:confirms #{Quantity SimpleQuantity},
      :zen/desc "Amount of medication per dose"},
     :site
     {:confirms #{CodeableConcept},
      :zen/desc "Body site administered to"}}},
   :instantiates
   {:type zen/vector,
    :every
    {:confirms #{uri},
     :type zen/string,
     :zen/desc "Instantiates protocol or definition"}},
   :reasonCode
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "Reason administration performed"}},
   :statusReason
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "Reason administration not performed"}},
   :resourceType
   {:type zen/string, :const {:value "MedicationAdministration"}},
   :note
   {:type zen/vector,
    :every
    {:confirms #{Annotation},
     :zen/desc "Information about the administration"}},
   :supportingInformation
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "Additional information to support administration"}},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc
    "in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown"},
   :effective
   {:type zen/map,
    :zen/desc "Start and end time of administration",
    :keys
    {:dateTime {:confirms #{dateTime}, :type zen/datetime},
     :Period {:confirms #{Period}}},
    :exclusive-keys #{#{:dateTime :Period}}},
   :identifier
   {:type zen/vector,
    :every {:confirms #{Identifier}, :zen/desc "External identifier"}},
   :context
   {:confirms #{Reference},
    :zen/desc "Encounter or Episode of Care administered as part of"},
   :device
   {:type zen/vector,
    :every
    {:confirms #{Reference}, :zen/desc "Device used to administer"}},
   :partOf
   {:type zen/vector,
    :every
    {:confirms #{Reference}, :zen/desc "Part of referenced event"}},
   :subject
   {:confirms #{Reference}, :zen/desc "Who received medication"},
   :performer
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:actor},
     :type zen/map,
     :zen/desc
     "Who performed the medication administration and what they did",
     :keys
     {:actor
      {:confirms #{Reference},
       :zen/desc "Who performed the medication administration"},
      :function
      {:confirms #{CodeableConcept},
       :zen/desc "Type of performance"}}}},
   :medication
   {:type zen/map,
    :zen/desc "What was administered",
    :keys
    {:CodeableConcept {:confirms #{CodeableConcept}},
     :Reference {:confirms #{Reference}}},
    :exclusive-keys #{#{:CodeableConcept :Reference}}},
   :reasonReference
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc
     "Condition or observation that supports why the medication was administered"}}}},
 MedicationDispense
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "MedicationDispense",
  :require #{:status :medication},
  :type zen/map,
  :zen/desc
  "Indicates that a medication product is to be or has been dispensed for a named person/patient.  This includes a description of the medication product (supply) provided and the instructions for administering the medication.  The medication dispense is the result of a pharmacy system responding to a medication order.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/MedicationDispense",
  :keys
  {:category
   {:confirms #{CodeableConcept},
    :zen/desc "Type of medication dispense"},
   :whenHandedOver
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "When product was given out"},
   :whenPrepared
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "When product was packaged and reviewed"},
   :eventHistory
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "A list of relevant lifecycle events"}},
   :substitution
   {:confirms #{BackboneElement},
    :require #{:wasSubstituted},
    :type zen/map,
    :zen/desc "Whether a substitution was performed on the dispense",
    :keys
    {:wasSubstituted
     {:confirms #{boolean},
      :type zen/boolean,
      :zen/desc
      "Whether a substitution was or was not performed on the dispense"},
     :reason
     {:type zen/vector,
      :every
      {:confirms #{CodeableConcept},
       :zen/desc "Why was substitution made"}},
     :type
     {:confirms #{CodeableConcept},
      :zen/desc
      "Code signifying whether a different drug was dispensed from what was prescribed"},
     :responsibleParty
     {:type zen/vector,
      :every
      {:confirms #{Reference},
       :zen/desc "Who is responsible for the substitution"}}}},
   :detectedIssue
   {:type zen/vector,
    :every
    {:confirms #{Reference}, :zen/desc "Clinical issue with action"}},
   :type
   {:confirms #{CodeableConcept},
    :zen/desc "Trial fill, partial fill, emergency fill, etc."},
   :statusReason
   {:type zen/map,
    :zen/desc "Why a dispense was not performed",
    :keys
    {:CodeableConcept {:confirms #{CodeableConcept}},
     :Reference {:confirms #{Reference}}},
    :exclusive-keys #{#{:CodeableConcept :Reference}}},
   :resourceType
   {:type zen/string, :const {:value "MedicationDispense"}},
   :note
   {:type zen/vector,
    :every
    {:confirms #{Annotation},
     :zen/desc "Information about the dispense"}},
   :supportingInformation
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc
     "Information that supports the dispensing of the medication"}},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc
    "preparation | in-progress | cancelled | on-hold | completed | entered-in-error | stopped | declined | unknown"},
   :dosageInstruction
   {:type zen/vector,
    :every
    {:confirms #{Dosage},
     :zen/desc
     "How the medication is to be used by the patient or administered by the caregiver"}},
   :daysSupply
   {:confirms #{Quantity SimpleQuantity},
    :zen/desc "Amount of medication expressed as a timing amount"},
   :identifier
   {:type zen/vector,
    :every {:confirms #{Identifier}, :zen/desc "External identifier"}},
   :context
   {:confirms #{Reference},
    :zen/desc "Encounter / Episode associated with event"},
   :quantity
   {:confirms #{Quantity SimpleQuantity},
    :zen/desc "Amount dispensed"},
   :partOf
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "Event that dispense is part of"}},
   :location
   {:confirms #{Reference}, :zen/desc "Where the dispense occurred"},
   :authorizingPrescription
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "Medication order that authorizes the dispense"}},
   :receiver
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "Who collected the medication"}},
   :subject
   {:confirms #{Reference}, :zen/desc "Who the dispense is for"},
   :destination
   {:confirms #{Reference}, :zen/desc "Where the medication was sent"},
   :performer
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:actor},
     :type zen/map,
     :zen/desc "Who performed event",
     :keys
     {:actor
      {:confirms #{Reference},
       :zen/desc "Individual who was performing"},
      :function
      {:confirms #{CodeableConcept},
       :zen/desc "Who performed the dispense and what they did"}}}},
   :medication
   {:type zen/map,
    :zen/desc "What medication was supplied",
    :keys
    {:CodeableConcept {:confirms #{CodeableConcept}},
     :Reference {:confirms #{Reference}}},
    :exclusive-keys #{#{:CodeableConcept :Reference}}}}},
 MedicationKnowledge
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "MedicationKnowledge",
  :type zen/map,
  :zen/desc
  "Information about a medication that is used to support knowledge.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/MedicationKnowledge",
  :keys
  {:preparationInstruction
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc "The instructions for preparing the medication"},
   :amount
   {:confirms #{Quantity SimpleQuantity},
    :zen/desc "Amount of drug in package"},
   :monograph
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc "Associated documentation about the medication",
     :keys
     {:source
      {:confirms #{Reference},
       :zen/desc "Associated documentation about the medication"},
      :type
      {:confirms #{CodeableConcept},
       :zen/desc "The category of medication document"}}}},
   :regulatory
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:regulatoryAuthority},
     :type zen/map,
     :zen/desc "Regulatory information about a medication",
     :keys
     {:maxDispense
      {:confirms #{BackboneElement},
       :require #{:quantity},
       :type zen/map,
       :zen/desc
       "The maximum number of units of the medication that can be dispensed in a period",
       :keys
       {:period
        {:confirms #{Duration},
         :zen/desc
         "The period that applies to the maximum number of units"},
        :quantity
        {:confirms #{Quantity SimpleQuantity},
         :zen/desc
         "The maximum number of units of the medication that can be dispensed"}}},
      :schedule
      {:type zen/vector,
       :every
       {:confirms #{BackboneElement},
        :require #{:schedule},
        :type zen/map,
        :zen/desc
        "Specifies the schedule of a medication in jurisdiction",
        :keys
        {:schedule
         {:confirms #{CodeableConcept},
          :zen/desc "Specifies the specific drug schedule"}}}},
      :substitution
      {:type zen/vector,
       :every
       {:confirms #{BackboneElement},
        :require #{:type :allowed},
        :type zen/map,
        :zen/desc
        "Specifies if changes are allowed when dispensing a medication from a regulatory perspective",
        :keys
        {:allowed
         {:confirms #{boolean},
          :type zen/boolean,
          :zen/desc
          "Specifies if regulation allows for changes in the medication when dispensing"},
         :type
         {:confirms #{CodeableConcept},
          :zen/desc "Specifies the type of substitution allowed"}}}},
      :regulatoryAuthority
      {:confirms #{Reference},
       :zen/desc "Specifies the authority of the regulation"}}}},
   :doseForm
   {:confirms #{CodeableConcept},
    :zen/desc "powder | tablets | capsule +"},
   :intendedRoute
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "The intended or approved route of administration"}},
   :drugCharacteristic
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc "Specifies descriptive properties of the medicine",
     :keys
     {:type
      {:confirms #{CodeableConcept},
       :zen/desc
       "Code specifying the type of characteristic of medication"},
      :value
      {:type zen/map,
       :zen/desc "Description of the characteristic",
       :keys
       {:CodeableConcept {:confirms #{CodeableConcept}},
        :string {:confirms #{string}, :type zen/string},
        :Quantity {:confirms #{Quantity}},
        :base64Binary {:confirms #{base64Binary}, :type zen/string}},
       :exclusive-keys
       #{#{:base64Binary :string :CodeableConcept :Quantity}}}}}},
   :packaging
   {:confirms #{BackboneElement},
    :type zen/map,
    :zen/desc "Details about packaged medications",
    :keys
    {:quantity
     {:confirms #{Quantity SimpleQuantity},
      :zen/desc
      "The number of product units the package would contain if fully loaded"},
     :type
     {:confirms #{CodeableConcept},
      :zen/desc
      "A code that defines the specific type of packaging that the medication can be found in"}}},
   :relatedMedicationKnowledge
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:type :reference},
     :type zen/map,
     :zen/desc "Associated or related medication information",
     :keys
     {:type
      {:confirms #{CodeableConcept},
       :zen/desc "Category of medicationKnowledge"},
      :reference
      {:minItems 1,
       :type zen/vector,
       :every
       {:confirms #{Reference},
        :zen/desc
        "Associated documentation about the associated medication knowledge"}}}}},
   :medicineClassification
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:type},
     :type zen/map,
     :zen/desc
     "Categorization of the medication within a formulary or classification system",
     :keys
     {:type
      {:confirms #{CodeableConcept},
       :zen/desc
       "The type of category for the medication (for example, therapeutic classification, therapeutic sub-classification)"},
      :classification
      {:type zen/vector,
       :every
       {:confirms #{CodeableConcept},
        :zen/desc "Specific category assigned to the medication"}}}}},
   :resourceType
   {:type zen/string, :const {:value "MedicationKnowledge"}},
   :kinetics
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc
     "The time course of drug absorption, distribution, metabolism and excretion of a medication from the body",
     :keys
     {:lethalDose50
      {:type zen/vector,
       :every
       {:confirms #{Quantity SimpleQuantity},
        :zen/desc "The median lethal dose of a drug"}},
      :halfLifePeriod
      {:confirms #{Duration},
       :zen/desc
       "Time required for concentration in the body to decrease by half"},
      :areaUnderCurve
      {:type zen/vector,
       :every
       {:confirms #{Quantity SimpleQuantity},
        :zen/desc
        "The drug concentration measured at certain discrete points in time"}}}}},
   :associatedMedication
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc
     "A medication resource that is associated with this medication"}},
   :ingredient
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:item},
     :type zen/map,
     :zen/desc "Active or inactive ingredient",
     :keys
     {:isActive
      {:confirms #{boolean},
       :type zen/boolean,
       :zen/desc "Active ingredient indicator"},
      :item
      {:type zen/map,
       :zen/desc
       "Medication(s) or substance(s) contained in the medication",
       :keys
       {:CodeableConcept {:confirms #{CodeableConcept}},
        :Reference {:confirms #{Reference}}},
       :exclusive-keys #{#{:CodeableConcept :Reference}}},
      :strength
      {:confirms #{Ratio},
       :zen/desc "Quantity of ingredient present"}}}},
   :monitoringProgram
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc "Program under which a medication is reviewed",
     :keys
     {:name
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Name of the reviewing program"},
      :type
      {:confirms #{CodeableConcept},
       :zen/desc
       "Type of program under which the medication is monitored"}}}},
   :contraindication
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc
     "Potential clinical issue with or between medication(s)"}},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc "active | inactive | entered-in-error"},
   :productType
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "Category of the medication or product"}},
   :synonym
   {:type zen/vector,
    :every
    {:confirms #{string},
     :type zen/string,
     :zen/desc "Additional names for a medication"}},
   :code
   {:confirms #{CodeableConcept},
    :zen/desc "Code that identifies this medication"},
   :administrationGuidelines
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc "Guidelines for administration of the medication",
     :keys
     {:dosage
      {:type zen/vector,
       :every
       {:confirms #{BackboneElement},
        :require #{:dosage :type},
        :type zen/map,
        :zen/desc
        "Dosage for the medication for the specific guidelines",
        :keys
        {:dosage
         {:minItems 1,
          :type zen/vector,
          :every
          {:confirms #{Dosage},
           :zen/desc
           "Dosage for the medication for the specific guidelines"}},
         :type
         {:confirms #{CodeableConcept}, :zen/desc "Type of dosage"}}}},
      :indication
      {:type zen/map,
       :zen/desc
       "Indication for use that apply to the specific administration guidelines",
       :keys
       {:CodeableConcept {:confirms #{CodeableConcept}},
        :Reference {:confirms #{Reference}}},
       :exclusive-keys #{#{:CodeableConcept :Reference}}},
      :patientCharacteristics
      {:type zen/vector,
       :every
       {:confirms #{BackboneElement},
        :require #{:characteristic},
        :type zen/map,
        :zen/desc
        "Characteristics of the patient that are relevant to the administration guidelines",
        :keys
        {:value
         {:type zen/vector,
          :every
          {:confirms #{string},
           :type zen/string,
           :zen/desc "The specific characteristic"}},
         :characteristic
         {:type zen/map,
          :zen/desc
          "Specific characteristic that is relevant to the administration guideline",
          :keys
          {:CodeableConcept {:confirms #{CodeableConcept}},
           :Quantity {:confirms #{Quantity}}},
          :exclusive-keys #{#{:CodeableConcept :Quantity}}}}}}}}},
   :manufacturer
   {:confirms #{Reference}, :zen/desc "Manufacturer of the item"},
   :cost
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:type :cost},
     :type zen/map,
     :zen/desc "The pricing of the medication",
     :keys
     {:type
      {:confirms #{CodeableConcept},
       :zen/desc "The category of the cost information"},
      :cost
      {:confirms #{Money}, :zen/desc "The price of the medication"},
      :source
      {:confirms #{string},
       :type zen/string,
       :zen/desc "The source or owner for the price information"}}}}}},
 MedicationRequest
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "MedicationRequest",
  :require #{:status :intent :subject :medication},
  :type zen/map,
  :zen/desc
  "An order or request for both supply of the medication and the instructions for administration of the medication to a patient. The resource is called \"MedicationRequest\" rather than \"MedicationPrescription\" or \"MedicationOrder\" to generalize the use across inpatient and outpatient settings, including care plans, etc., and to harmonize with workflow patterns.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/MedicationRequest",
  :keys
  {:performerType
   {:confirms #{CodeableConcept},
    :zen/desc
    "Desired kind of performer of the medication administration"},
   :category
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "Type of medication usage"}},
   :insurance
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "Associated insurance coverage"}},
   :instantiatesCanonical
   {:type zen/vector,
    :every
    {:confirms #{canonical},
     :type zen/string,
     :zen/desc "Instantiates FHIR protocol or definition"}},
   :eventHistory
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "A list of events of interest in the lifecycle"}},
   :instantiatesUri
   {:type zen/vector,
    :every
    {:confirms #{uri},
     :type zen/string,
     :zen/desc "Instantiates external protocol or definition"}},
   :substitution
   {:confirms #{BackboneElement},
    :require #{:allowed},
    :type zen/map,
    :zen/desc "Any restrictions on medication substitution",
    :keys
    {:allowed
     {:type zen/map,
      :zen/desc "Whether substitution is allowed or not",
      :keys
      {:boolean {:confirms #{boolean}, :type zen/boolean},
       :CodeableConcept {:confirms #{CodeableConcept}}},
      :exclusive-keys #{#{:CodeableConcept :boolean}}},
     :reason
     {:confirms #{CodeableConcept},
      :zen/desc "Why should (not) substitution be made"}}},
   :detectedIssue
   {:type zen/vector,
    :every
    {:confirms #{Reference}, :zen/desc "Clinical Issue with action"}},
   :encounter
   {:confirms #{Reference},
    :zen/desc "Encounter created as part of encounter/admission/stay"},
   :dispenseRequest
   {:confirms #{BackboneElement},
    :type zen/map,
    :zen/desc "Medication supply authorization",
    :keys
    {:quantity
     {:confirms #{Quantity SimpleQuantity},
      :zen/desc "Amount of medication to supply per dispense"},
     :dispenseInterval
     {:confirms #{Duration},
      :zen/desc "Minimum period of time between dispenses"},
     :expectedSupplyDuration
     {:confirms #{Duration},
      :zen/desc "Number of days supply per dispense"},
     :numberOfRepeatsAllowed
     {:confirms #{unsignedInt},
      :type zen/integer,
      :zen/desc "Number of refills authorized"},
     :performer
     {:confirms #{Reference}, :zen/desc "Intended dispenser"},
     :validityPeriod
     {:confirms #{Period},
      :zen/desc "Time period supply is authorized for"},
     :initialFill
     {:confirms #{BackboneElement},
      :type zen/map,
      :zen/desc "First fill details",
      :keys
      {:duration
       {:confirms #{Duration}, :zen/desc "First fill duration"},
       :quantity
       {:confirms #{Quantity SimpleQuantity},
        :zen/desc "First fill quantity"}}}}},
   :reported
   {:type zen/map,
    :zen/desc "Reported rather than primary record",
    :keys
    {:boolean {:confirms #{boolean}, :type zen/boolean},
     :Reference {:confirms #{Reference}}},
    :exclusive-keys #{#{:boolean :Reference}}},
   :reasonCode
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc
     "Reason or indication for ordering or not ordering the medication"}},
   :statusReason
   {:confirms #{CodeableConcept},
    :zen/desc "Reason for current status"},
   :authoredOn
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "When request was initially authored"},
   :resourceType
   {:type zen/string, :const {:value "MedicationRequest"}},
   :note
   {:type zen/vector,
    :every
    {:confirms #{Annotation},
     :zen/desc "Information about the prescription"}},
   :requester
   {:confirms #{Reference},
    :zen/desc "Who/What requested the Request"},
   :supportingInformation
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "Information to support ordering of the medication"}},
   :priority
   {:confirms #{code},
    :type zen/string,
    :zen/desc "routine | urgent | asap | stat"},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc
    "active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown"},
   :dosageInstruction
   {:type zen/vector,
    :every
    {:confirms #{Dosage},
     :zen/desc "How the medication should be taken"}},
   :groupIdentifier
   {:confirms #{Identifier},
    :zen/desc "Composite request this is part of"},
   :recorder
   {:confirms #{Reference},
    :zen/desc "Person who entered the request"},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier},
     :zen/desc "External ids for this request"}},
   :doNotPerform
   {:confirms #{boolean},
    :type zen/boolean,
    :zen/desc "True if request is prohibiting action"},
   :intent
   {:confirms #{code},
    :type zen/string,
    :zen/desc
    "proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option"},
   :basedOn
   {:type zen/vector,
    :every
    {:confirms #{Reference}, :zen/desc "What request fulfills"}},
   :priorPrescription
   {:confirms #{Reference},
    :zen/desc "An order/prescription that is being replaced"},
   :courseOfTherapyType
   {:confirms #{CodeableConcept},
    :zen/desc "Overall pattern of medication administration"},
   :subject
   {:confirms #{Reference},
    :zen/desc "Who or group medication request is for"},
   :performer
   {:confirms #{Reference},
    :zen/desc "Intended performer of administration"},
   :medication
   {:type zen/map,
    :zen/desc "Medication to be taken",
    :keys
    {:CodeableConcept {:confirms #{CodeableConcept}},
     :Reference {:confirms #{Reference}}},
    :exclusive-keys #{#{:CodeableConcept :Reference}}},
   :reasonReference
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc
     "Condition or observation that supports why the prescription is being written"}}}},
 MedicationStatement
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "MedicationStatement",
  :require #{:status :subject :medication},
  :type zen/map,
  :zen/desc
  "A record of a medication that is being consumed by a patient.   A MedicationStatement may indicate that the patient may be taking the medication now or has taken the medication in the past or will be taking the medication in the future.  The source of this information can be the patient, significant other (such as a family member or spouse), or a clinician.  A common scenario where this information is captured is during the history taking process during a patient visit or stay.   The medication information may come from sources such as the patient's memory, from a prescription bottle,  or from a list of medications the patient, clinician or other party maintains. \n\nThe primary difference between a medication statement and a medication administration is that the medication administration has complete administration information and is based on actual administration information from the person who administered the medication.  A medication statement is often, if not always, less specific.  There is no required date/time when the medication was administered, in fact we only know that a source has reported the patient is taking this medication, where details such as time, quantity, or rate or even medication product may be incomplete or missing or less precise.  As stated earlier, the medication statement information may come from the patient's memory, from a prescription bottle or from a list of medications the patient, clinician or other party maintains.  Medication administration is more formal and is not missing detailed information.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/MedicationStatement",
  :keys
  {:category
   {:confirms #{CodeableConcept},
    :zen/desc "Type of medication usage"},
   :dosage
   {:type zen/vector,
    :every
    {:confirms #{Dosage},
     :zen/desc
     "Details of how medication is/was taken or should be taken"}},
   :derivedFrom
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "Additional supporting information"}},
   :reasonCode
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "Reason for why the medication is being/was taken"}},
   :statusReason
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "Reason for current status"}},
   :resourceType
   {:type zen/string, :const {:value "MedicationStatement"}},
   :note
   {:type zen/vector,
    :every
    {:confirms #{Annotation},
     :zen/desc "Further information about the statement"}},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc
    "active | completed | entered-in-error | intended | stopped | on-hold | unknown | not-taken"},
   :effective
   {:type zen/map,
    :zen/desc
    "The date/time or interval when the medication is/was/will be taken",
    :keys
    {:dateTime {:confirms #{dateTime}, :type zen/datetime},
     :Period {:confirms #{Period}}},
    :exclusive-keys #{#{:dateTime :Period}}},
   :identifier
   {:type zen/vector,
    :every {:confirms #{Identifier}, :zen/desc "External identifier"}},
   :context
   {:confirms #{Reference},
    :zen/desc
    "Encounter / Episode associated with MedicationStatement"},
   :dateAsserted
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "When the statement was asserted?"},
   :basedOn
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "Fulfils plan, proposal or order"}},
   :partOf
   {:type zen/vector,
    :every
    {:confirms #{Reference}, :zen/desc "Part of referenced event"}},
   :informationSource
   {:confirms #{Reference},
    :zen/desc
    "Person or organization that provided the information about the taking of this medication"},
   :subject
   {:confirms #{Reference},
    :zen/desc "Who is/was taking  the medication"},
   :medication
   {:type zen/map,
    :zen/desc "What medication was taken",
    :keys
    {:CodeableConcept {:confirms #{CodeableConcept}},
     :Reference {:confirms #{Reference}}},
    :exclusive-keys #{#{:CodeableConcept :Reference}}},
   :reasonReference
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc
     "Condition or observation that supports why the medication is being/was taken"}}}},
 MedicinalProduct
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "MedicinalProduct",
  :require #{:name},
  :type zen/map,
  :zen/desc
  "Detailed definition of a medicinal product, typically for uses other than direct patient care (e.g. regulatory use).",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/MedicinalProduct",
  :keys
  {:additionalMonitoringIndicator
   {:confirms #{CodeableConcept},
    :zen/desc
    "Whether the Medicinal Product is subject to additional monitoring for regulatory reasons"},
   :manufacturingBusinessOperation
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc
     "An operation applied to the product, for manufacturing or adminsitrative purpose",
     :keys
     {:manufacturer
      {:type zen/vector,
       :every
       {:confirms #{Reference},
        :zen/desc
        "The manufacturer or establishment associated with the process"}},
      :regulator
      {:confirms #{Reference},
       :zen/desc "A regulator which oversees the operation"},
      :operationType
      {:confirms #{CodeableConcept},
       :zen/desc "The type of manufacturing operation"},
      :confidentialityIndicator
      {:confirms #{CodeableConcept},
       :zen/desc
       "To indicate if this proces is commercially confidential"},
      :effectiveDate
      {:confirms #{dateTime},
       :type zen/datetime,
       :zen/desc "Regulatory authorization date"},
      :authorisationReferenceNumber
      {:confirms #{Identifier},
       :zen/desc "Regulatory authorization reference number"}}}},
   :combinedPharmaceuticalDoseForm
   {:confirms #{CodeableConcept},
    :zen/desc
    "The dose form for a single part product, or combined form of a multiple part product"},
   :clinicalTrial
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc
     "Clinical trials or studies that this product is involved in"}},
   :productClassification
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc
     "Allows the product to be classified by various systems"}},
   :name
   {:minItems 1,
    :type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:productName},
     :type zen/map,
     :zen/desc
     "The product's name, including full name and possibly coded parts",
     :keys
     {:namePart
      {:type zen/vector,
       :every
       {:confirms #{BackboneElement},
        :require #{:part :type},
        :type zen/map,
        :zen/desc "Coding words or phrases of the name",
        :keys
        {:type
         {:confirms #{Coding},
          :zen/desc
          "Idenifying type for this part of the name (e.g. strength part)"},
         :part
         {:confirms #{string},
          :type zen/string,
          :zen/desc "A fragment of a product name"}}}},
      :productName
      {:confirms #{string},
       :type zen/string,
       :zen/desc "The full product name"},
      :countryLanguage
      {:type zen/vector,
       :every
       {:confirms #{BackboneElement},
        :require #{:language :country},
        :type zen/map,
        :zen/desc "Country where the name applies",
        :keys
        {:jurisdiction
         {:confirms #{CodeableConcept},
          :zen/desc "Jurisdiction code for where this name applies"},
         :language
         {:confirms #{CodeableConcept},
          :zen/desc "Language code for this name"},
         :country
         {:confirms #{CodeableConcept},
          :zen/desc "Country code for where this name applies"}}}}}}},
   :masterFile
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc
     "A master file for to the medicinal product (e.g. Pharmacovigilance System Master File)"}},
   :pharmaceuticalProduct
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "Pharmaceutical aspects of product"}},
   :type
   {:confirms #{CodeableConcept},
    :zen/desc "Regulatory type, e.g. Investigational or Authorized"},
   :resourceType
   {:type zen/string, :const {:value "MedicinalProduct"}},
   :marketingStatus
   {:type zen/vector,
    :every
    {:confirms #{MarketingStatus},
     :zen/desc
     "Marketing status of the medicinal product, in contrast to marketing authorizaton"}},
   :specialMeasures
   {:type zen/vector,
    :every
    {:confirms #{string},
     :type zen/string,
     :zen/desc
     "Whether the Medicinal Product is subject to special measures for regulatory reasons"}},
   :specialDesignation
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc
     "Indicates if the medicinal product has an orphan designation for the treatment of a rare disease",
     :keys
     {:type
      {:confirms #{CodeableConcept},
       :zen/desc
       "The type of special designation, e.g. orphan drug, minor use"},
      :species
      {:confirms #{CodeableConcept},
       :zen/desc "Animal species for which this applies"},
      :identifier
      {:type zen/vector,
       :every
       {:confirms #{Identifier},
        :zen/desc
        "Identifier for the designation, or procedure number"}},
      :indication
      {:type zen/map,
       :zen/desc "Condition for which the medicinal use applies",
       :keys
       {:CodeableConcept {:confirms #{CodeableConcept}},
        :Reference {:confirms #{Reference}}},
       :exclusive-keys #{#{:CodeableConcept :Reference}}},
      :intendedUse
      {:confirms #{CodeableConcept},
       :zen/desc
       "The intended use of the product, e.g. prevention, treatment"},
      :status
      {:confirms #{CodeableConcept},
       :zen/desc "For example granted, pending, expired or withdrawn"},
      :date
      {:confirms #{dateTime},
       :type zen/datetime,
       :zen/desc "Date when the designation was granted"}}}},
   :packagedMedicinalProduct
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "Package representation for the product"}},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier},
     :zen/desc
     "Business identifier for this product. Could be an MPID"}},
   :crossReference
   {:type zen/vector,
    :every
    {:confirms #{Identifier},
     :zen/desc
     "Reference to another product, e.g. for linking authorised to investigational product"}},
   :attachedDocument
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc
     "Supporting documentation, typically for regulatory submission"}},
   :domain
   {:confirms #{Coding},
    :zen/desc "If this medicine applies to human or veterinary uses"},
   :legalStatusOfSupply
   {:confirms #{CodeableConcept},
    :zen/desc
    "The legal status of supply of the medicinal product as classified by the regulator"},
   :paediatricUseIndicator
   {:confirms #{CodeableConcept},
    :zen/desc "If authorised for use in children"},
   :contact
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc
     "A product specific contact, person (in a role), or an organization"}}}},
 MedicinalProductAuthorization
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "MedicinalProductAuthorization",
  :type zen/map,
  :zen/desc "The regulatory authorization of a medicinal product.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/MedicinalProductAuthorization",
  :keys
  {:dataExclusivityPeriod
   {:confirms #{Period},
    :zen/desc
    "A period of time after authorization before generic product applicatiosn can be submitted"},
   :restoreDate
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc
    "The date when a suspended the marketing or the marketing authorization of the product is anticipated to be restored"},
   :jurisdiction
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "Jurisdiction within a country"}},
   :jurisdictionalAuthorization
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc "Authorization in areas within a country",
     :keys
     {:validityPeriod
      {:confirms #{Period},
       :zen/desc
       "The start and expected end date of the authorization"},
      :country
      {:confirms #{CodeableConcept},
       :zen/desc "Country of authorization"},
      :jurisdiction
      {:type zen/vector,
       :every
       {:confirms #{CodeableConcept},
        :zen/desc "Jurisdiction within a country"}},
      :identifier
      {:type zen/vector,
       :every
       {:confirms #{Identifier},
        :zen/desc
        "The assigned number for the marketing authorization"}},
      :legalStatusOfSupply
      {:confirms #{CodeableConcept},
       :zen/desc
       "The legal status of supply in a jurisdiction or region"}}}},
   :procedure
   {:confirms #{BackboneElement},
    :require #{:type},
    :type zen/map,
    :zen/desc
    "The regulatory procedure for granting or amending a marketing authorization",
    :keys
    {:application
     {:type zen/vector,
      :every
      #:zen{:desc
            "Applcations submitted to obtain a marketing authorization"}},
     :type
     {:confirms #{CodeableConcept}, :zen/desc "Type of procedure"},
     :date
     {:type zen/map,
      :zen/desc "Date of procedure",
      :keys
      {:Period {:confirms #{Period}},
       :dateTime {:confirms #{dateTime}, :type zen/datetime}},
      :exclusive-keys #{#{:dateTime :Period}}},
     :identifier
     {:confirms #{Identifier},
      :zen/desc "Identifier for this procedure"}}},
   :legalBasis
   {:confirms #{CodeableConcept},
    :zen/desc
    "The legal framework against which this authorization is granted"},
   :resourceType
   {:type zen/string, :const {:value "MedicinalProductAuthorization"}},
   :validityPeriod
   {:confirms #{Period},
    :zen/desc
    "The beginning of the time period in which the marketing authorization is in the specific status shall be specified A complete date consisting of day, month and year shall be specified using the ISO 8601 date format"},
   :regulator
   {:confirms #{Reference}, :zen/desc "Medicines Regulatory Agency"},
   :status
   {:confirms #{CodeableConcept},
    :zen/desc "The status of the marketing authorization"},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier},
     :zen/desc
     "Business identifier for the marketing authorization, as assigned by a regulator"}},
   :statusDate
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc
    "The date at which the given status has become applicable"},
   :dateOfFirstAuthorization
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc
    "The date when the first authorization was granted by a Medicines Regulatory Agency"},
   :internationalBirthDate
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc
    "Date of first marketing authorization for a company's new medicinal product in any country in the World"},
   :holder
   {:confirms #{Reference},
    :zen/desc "Marketing Authorization Holder"},
   :country
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc
     "The country in which the marketing authorization has been granted"}},
   :subject
   {:confirms #{Reference},
    :zen/desc "The medicinal product that is being authorized"}}},
 MedicinalProductContraindication
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "MedicinalProductContraindication",
  :type zen/map,
  :zen/desc
  "The clinical particulars - indications, contraindications etc. of a medicinal product, including for regulatory purposes.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/MedicinalProductContraindication",
  :keys
  {:comorbidity
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "A comorbidity (concurrent condition) or coinfection"}},
   :disease
   {:confirms #{CodeableConcept},
    :zen/desc
    "The disease, symptom or procedure for the contraindication"},
   :therapeuticIndication
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc
     "Information about the use of the medicinal product in relation to other therapies as part of the indication"}},
   :diseaseStatus
   {:confirms #{CodeableConcept},
    :zen/desc
    "The status of the disease or symptom for the contraindication"},
   :otherTherapy
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:therapyRelationshipType :medication},
     :type zen/map,
     :zen/desc
     "Information about the use of the medicinal product in relation to other therapies described as part of the indication",
     :keys
     {:therapyRelationshipType
      {:confirms #{CodeableConcept},
       :zen/desc
       "The type of relationship between the medicinal product indication or contraindication and another therapy"},
      :medication
      {:type zen/map,
       :zen/desc
       "Reference to a specific medication (active substance, medicinal product or class of products) as part of an indication or contraindication",
       :keys
       {:CodeableConcept {:confirms #{CodeableConcept}},
        :Reference {:confirms #{Reference}}},
       :exclusive-keys #{#{:CodeableConcept :Reference}}}}}},
   :subject
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "The medication for which this is an indication"}},
   :population
   {:type zen/vector,
    :every
    {:confirms #{Population},
     :zen/desc "The population group to which this applies"}},
   :resourceType
   {:type zen/string,
    :const {:value "MedicinalProductContraindication"}}}},
 MedicinalProductIndication
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "MedicinalProductIndication",
  :type zen/map,
  :zen/desc "Indication for the Medicinal Product.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/MedicinalProductIndication",
  :keys
  {:diseaseSymptomProcedure
   {:confirms #{CodeableConcept},
    :zen/desc
    "The disease, symptom or procedure that is the indication for treatment"},
   :undesirableEffect
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc
     "Describe the undesirable effects of the medicinal product"}},
   :duration
   {:confirms #{Quantity},
    :zen/desc
    "Timing or duration information as part of the indication"},
   :resourceType
   {:type zen/string, :const {:value "MedicinalProductIndication"}},
   :otherTherapy
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:therapyRelationshipType :medication},
     :type zen/map,
     :zen/desc
     "Information about the use of the medicinal product in relation to other therapies described as part of the indication",
     :keys
     {:therapyRelationshipType
      {:confirms #{CodeableConcept},
       :zen/desc
       "The type of relationship between the medicinal product indication or contraindication and another therapy"},
      :medication
      {:type zen/map,
       :zen/desc
       "Reference to a specific medication (active substance, medicinal product or class of products) as part of an indication or contraindication",
       :keys
       {:CodeableConcept {:confirms #{CodeableConcept}},
        :Reference {:confirms #{Reference}}},
       :exclusive-keys #{#{:CodeableConcept :Reference}}}}}},
   :comorbidity
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc
     "Comorbidity (concurrent condition) or co-infection as part of the indication"}},
   :intendedEffect
   {:confirms #{CodeableConcept},
    :zen/desc
    "The intended effect, aim or strategy to be achieved by the indication"},
   :population
   {:type zen/vector,
    :every
    {:confirms #{Population},
     :zen/desc "The population group to which this applies"}},
   :diseaseStatus
   {:confirms #{CodeableConcept},
    :zen/desc
    "The status of the disease or symptom for which the indication applies"},
   :subject
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "The medication for which this is an indication"}}}},
 MedicinalProductIngredient
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "MedicinalProductIngredient",
  :require #{:role},
  :type zen/map,
  :zen/desc
  "An ingredient of a manufactured item or pharmaceutical product.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/MedicinalProductIngredient",
  :keys
  {:manufacturer
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "Manufacturer of this Ingredient"}},
   :specifiedSubstance
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:group :code},
     :type zen/map,
     :zen/desc "A specified substance that comprises this ingredient",
     :keys
     {:code
      {:confirms #{CodeableConcept},
       :zen/desc "The specified substance"},
      :group
      {:confirms #{CodeableConcept},
       :zen/desc
       "The group of specified substance, e.g. group 1 to 4"},
      :confidentiality
      {:confirms #{CodeableConcept},
       :zen/desc
       "Confidentiality level of the specified substance as the ingredient"},
      :strength
      {:type zen/vector,
       :every
       {:confirms #{BackboneElement},
        :require #{:presentation},
        :type zen/map,
        :zen/desc
        "Quantity of the substance or specified substance present in the manufactured item or pharmaceutical product",
        :keys
        {:measurementPoint
         {:confirms #{string},
          :type zen/string,
          :zen/desc
          "For when strength is measured at a particular point or distance"},
         :presentationLowLimit
         {:confirms #{Ratio},
          :zen/desc
          "A lower limit for the quantity of substance in the unit of presentation. For use when there is a range of strengths, this is the lower limit, with the presentation attribute becoming the upper limit"},
         :country
         {:type zen/vector,
          :every
          {:confirms #{CodeableConcept},
           :zen/desc
           "The country or countries for which the strength range applies"}},
         :concentration
         {:confirms #{Ratio},
          :zen/desc "The strength per unitary volume (or mass)"},
         :referenceStrength
         {:type zen/vector,
          :every
          {:confirms #{BackboneElement},
           :require #{:strength},
           :type zen/map,
           :zen/desc
           "Strength expressed in terms of a reference substance",
           :keys
           {:strengthLowLimit
            {:confirms #{Ratio},
             :zen/desc
             "Strength expressed in terms of a reference substance"},
            :substance
            {:confirms #{CodeableConcept},
             :zen/desc "Relevant reference substance"},
            :measurementPoint
            {:confirms #{string},
             :type zen/string,
             :zen/desc
             "For when strength is measured at a particular point or distance"},
            :strength
            {:confirms #{Ratio},
             :zen/desc
             "Strength expressed in terms of a reference substance"},
            :country
            {:type zen/vector,
             :every
             {:confirms #{CodeableConcept},
              :zen/desc
              "The country or countries for which the strength range applies"}}}}},
         :presentation
         {:confirms #{Ratio},
          :zen/desc
          "The quantity of substance in the unit of presentation, or in the volume (or mass) of the single pharmaceutical product or manufactured item"},
         :concentrationLowLimit
         {:confirms #{Ratio},
          :zen/desc
          "A lower limit for the strength per unitary volume (or mass), for when there is a range. The concentration attribute then becomes the upper limit"}}}}}}},
   :allergenicIndicator
   {:confirms #{boolean},
    :type zen/boolean,
    :zen/desc "If the ingredient is a known or suspected allergen"},
   :role
   {:confirms #{CodeableConcept},
    :zen/desc "Ingredient role e.g. Active ingredient, excipient"},
   :identifier
   {:confirms #{Identifier},
    :zen/desc "Identifier for the ingredient"},
   :substance
   {:confirms #{BackboneElement},
    :require #{:code},
    :type zen/map,
    :zen/desc "The ingredient substance",
    :keys
    {:strength
     {:type zen/vector,
      :every
      #:zen{:desc
            "Quantity of the substance or specified substance present in the manufactured item or pharmaceutical product"}},
     :code
     {:confirms #{CodeableConcept},
      :zen/desc "The ingredient substance"}}},
   :resourceType
   {:type zen/string, :const {:value "MedicinalProductIngredient"}}}},
 MedicinalProductInteraction
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "MedicinalProductInteraction",
  :type zen/map,
  :zen/desc
  "The interactions of the medicinal product with other medicinal products, or other forms of interactions.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/MedicinalProductInteraction",
  :keys
  {:type
   {:confirms #{CodeableConcept},
    :zen/desc
    "The type of the interaction e.g. drug-drug interaction, drug-food interaction, drug-lab test interaction"},
   :incidence
   {:confirms #{CodeableConcept},
    :zen/desc
    "The incidence of the interaction, e.g. theoretical, observed"},
   :effect
   {:confirms #{CodeableConcept},
    :zen/desc
    "The effect of the interaction, for example \"reduced gastric absorption of primary medication\""},
   :management
   {:confirms #{CodeableConcept},
    :zen/desc "Actions for managing the interaction"},
   :description
   {:confirms #{string},
    :type zen/string,
    :zen/desc "The interaction described"},
   :interactant
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:item},
     :type zen/map,
     :zen/desc
     "The specific medication, food or laboratory test that interacts",
     :keys
     {:item
      {:type zen/map,
       :zen/desc
       "The specific medication, food or laboratory test that interacts",
       :keys
       {:Reference {:confirms #{Reference}},
        :CodeableConcept {:confirms #{CodeableConcept}}},
       :exclusive-keys #{#{:CodeableConcept :Reference}}}}}},
   :subject
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc
     "The medication for which this is a described interaction"}},
   :resourceType
   {:type zen/string, :const {:value "MedicinalProductInteraction"}}}},
 MedicinalProductManufactured
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "MedicinalProductManufactured",
  :require #{:manufacturedDoseForm :quantity},
  :type zen/map,
  :zen/desc
  "The manufactured item as contained in the packaged medicinal product.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/MedicinalProductManufactured",
  :keys
  {:manufacturer
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc
     "Manufacturer of the item (Note that this should be named \"manufacturer\" but it currently causes technical issues)"}},
   :unitOfPresentation
   {:confirms #{CodeableConcept},
    :zen/desc
    "The “real world” units in which the quantity of the manufactured item is described"},
   :physicalCharacteristics
   {:confirms #{ProdCharacteristic},
    :zen/desc "Dimensions, color etc."},
   :quantity
   {:confirms #{Quantity},
    :zen/desc
    "The quantity or \"count number\" of the manufactured item"},
   :otherCharacteristics
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "Other codeable characteristics"}},
   :ingredient
   {:type zen/vector,
    :every {:confirms #{Reference}, :zen/desc "Ingredient"}},
   :manufacturedDoseForm
   {:confirms #{CodeableConcept},
    :zen/desc
    "Dose form as manufactured and before any transformation into the pharmaceutical product"},
   :resourceType
   {:type zen/string,
    :const {:value "MedicinalProductManufactured"}}}},
 MedicinalProductPackaged
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "MedicinalProductPackaged",
  :require #{:packageItem},
  :type zen/map,
  :zen/desc "A medicinal product in a container or package.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/MedicinalProductPackaged",
  :keys
  {:description
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Textual description"},
   :resourceType
   {:type zen/string, :const {:value "MedicinalProductPackaged"}},
   :marketingStatus
   {:type zen/vector,
    :every
    {:confirms #{MarketingStatus}, :zen/desc "Marketing information"}},
   :marketingAuthorization
   {:confirms #{Reference},
    :zen/desc "Manufacturer of this Package Item"},
   :identifier
   {:type zen/vector,
    :every {:confirms #{Identifier}, :zen/desc "Unique identifier"}},
   :manufacturer
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "Manufacturer of this Package Item"}},
   :legalStatusOfSupply
   {:confirms #{CodeableConcept},
    :zen/desc
    "The legal status of supply of the medicinal product as classified by the regulator"},
   :batchIdentifier
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:outerPackaging},
     :type zen/map,
     :zen/desc "Batch numbering",
     :keys
     {:outerPackaging
      {:confirms #{Identifier},
       :zen/desc
       "A number appearing on the outer packaging of a specific batch"},
      :immediatePackaging
      {:confirms #{Identifier},
       :zen/desc
       "A number appearing on the immediate packaging (and not the outer packaging)"}}}},
   :subject
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "The product with this is a pack for"}},
   :packageItem
   {:minItems 1,
    :type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:type :quantity},
     :type zen/map,
     :zen/desc
     "A packaging item, as a contained for medicine, possibly with other packaging items within",
     :keys
     {:manufacturedItem
      {:type zen/vector,
       :every
       {:confirms #{Reference},
        :zen/desc
        "The manufactured item as contained in the packaged medicinal product"}},
      :otherCharacteristics
      {:type zen/vector,
       :every
       {:confirms #{CodeableConcept},
        :zen/desc "Other codeable characteristics"}},
      :shelfLifeStorage
      {:type zen/vector,
       :every
       {:confirms #{ProductShelfLife},
        :zen/desc "Shelf Life and storage information"}},
      :alternateMaterial
      {:type zen/vector,
       :every
       {:confirms #{CodeableConcept},
        :zen/desc "A possible alternate material for the packaging"}},
      :type
      {:confirms #{CodeableConcept},
       :zen/desc "The physical type of the container of the medicine"},
      :material
      {:type zen/vector,
       :every
       {:confirms #{CodeableConcept},
        :zen/desc "Material type of the package item"}},
      :identifier
      {:type zen/vector,
       :every
       {:confirms #{Identifier},
        :zen/desc "Including possibly Data Carrier Identifier"}},
      :manufacturer
      {:type zen/vector,
       :every
       {:confirms #{Reference},
        :zen/desc "Manufacturer of this Package Item"}},
      :device
      {:type zen/vector,
       :every
       {:confirms #{Reference},
        :zen/desc "A device accompanying a medicinal product"}},
      :quantity
      {:confirms #{Quantity},
       :zen/desc
       "The quantity of this package in the medicinal product, at the current level of packaging. The outermost is always 1"},
      :physicalCharacteristics
      {:confirms #{ProdCharacteristic},
       :zen/desc "Dimensions, color etc."},
      :packageItem
      {:type zen/vector,
       :every #:zen{:desc "Allows containers within containers"}}}}}}},
 MedicinalProductPharmaceutical
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "MedicinalProductPharmaceutical",
  :require #{:routeOfAdministration :administrableDoseForm},
  :type zen/map,
  :zen/desc
  "A pharmaceutical product described in terms of its composition and dose form.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/MedicinalProductPharmaceutical",
  :keys
  {:identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier},
     :zen/desc
     "An identifier for the pharmaceutical medicinal product"}},
   :administrableDoseForm
   {:confirms #{CodeableConcept},
    :zen/desc
    "The administrable dose form, after necessary reconstitution"},
   :ingredient
   {:type zen/vector,
    :every {:confirms #{Reference}, :zen/desc "Ingredient"}},
   :unitOfPresentation
   {:confirms #{CodeableConcept}, :zen/desc "Todo"},
   :routeOfAdministration
   {:minItems 1,
    :type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:code},
     :type zen/map,
     :zen/desc
     "The path by which the pharmaceutical product is taken into or makes contact with the body",
     :keys
     {:maxSingleDose
      {:confirms #{Quantity},
       :zen/desc
       "The maximum single dose that can be administered as per the protocol of a clinical trial can be specified using a numerical value and its unit of measurement"},
      :maxDosePerDay
      {:confirms #{Quantity},
       :zen/desc
       "The maximum dose per day (maximum dose quantity to be administered in any one 24-h period) that can be administered as per the protocol referenced in the clinical trial authorisation"},
      :maxDosePerTreatmentPeriod
      {:confirms #{Ratio},
       :zen/desc
       "The maximum dose per treatment period that can be administered as per the protocol referenced in the clinical trial authorisation"},
      :maxTreatmentPeriod
      {:confirms #{Duration},
       :zen/desc
       "The maximum treatment period during which an Investigational Medicinal Product can be administered as per the protocol referenced in the clinical trial authorisation"},
      :firstDose
      {:confirms #{Quantity},
       :zen/desc
       "The first dose (dose quantity) administered in humans can be specified, for a product under investigation, using a numerical value and its unit of measurement"},
      :targetSpecies
      {:type zen/vector,
       :every
       {:confirms #{BackboneElement},
        :require #{:code},
        :type zen/map,
        :zen/desc "A species for which this route applies",
        :keys
        {:withdrawalPeriod
         {:type zen/vector,
          :every
          {:confirms #{BackboneElement},
           :require #{:tissue :value},
           :type zen/map,
           :zen/desc
           "A species specific time during which consumption of animal product is not appropriate",
           :keys
           {:value
            {:confirms #{Quantity}, :zen/desc "A value for the time"},
            :tissue
            {:confirms #{CodeableConcept},
             :zen/desc
             "Coded expression for the type of tissue for which the withdrawal period applues, e.g. meat, milk"},
            :supportingInformation
            {:confirms #{string},
             :type zen/string,
             :zen/desc
             "Extra information about the withdrawal period"}}}},
         :code
         {:confirms #{CodeableConcept},
          :zen/desc "Coded expression for the species"}}}},
      :code
      {:confirms #{CodeableConcept},
       :zen/desc "Coded expression for the route"}}}},
   :device
   {:type zen/vector,
    :every {:confirms #{Reference}, :zen/desc "Accompanying device"}},
   :characteristics
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:code},
     :type zen/map,
     :zen/desc "Characteristics e.g. a products onset of action",
     :keys
     {:code
      {:confirms #{CodeableConcept},
       :zen/desc "A coded characteristic"},
      :status
      {:confirms #{CodeableConcept},
       :zen/desc
       "The status of characteristic e.g. assigned or pending"}}}},
   :resourceType
   {:type zen/string,
    :const {:value "MedicinalProductPharmaceutical"}}}},
 MedicinalProductUndesirableEffect
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "MedicinalProductUndesirableEffect",
  :type zen/map,
  :zen/desc
  "Describe the undesirable effects of the medicinal product.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/MedicinalProductUndesirableEffect",
  :keys
  {:population
   {:type zen/vector,
    :every
    {:confirms #{Population},
     :zen/desc "The population group to which this applies"}},
   :subject
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "The medication for which this is an indication"}},
   :symptomConditionEffect
   {:confirms #{CodeableConcept},
    :zen/desc "The symptom, condition or undesirable effect"},
   :frequencyOfOccurrence
   {:confirms #{CodeableConcept},
    :zen/desc "The frequency of occurrence of the effect"},
   :classification
   {:confirms #{CodeableConcept},
    :zen/desc "Classification of the effect"},
   :resourceType
   {:type zen/string,
    :const {:value "MedicinalProductUndesirableEffect"}}}},
 MessageDefinition
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "MessageDefinition",
  :require #{:date :event :status},
  :type zen/map,
  :zen/desc
  "Defines the characteristics of a message that can be shared between systems, including the type of event that initiates the message, the content to be transmitted and what response(s), if any, are permitted.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/MessageDefinition",
  :keys
  {:description
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc
    "Natural language description of the message definition"},
   :category
   {:confirms #{code},
    :type zen/string,
    :zen/desc "consequence | currency | notification"},
   :date
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "Date last changed"},
   :publisher
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name of the publisher (organization or individual)"},
   :parent
   {:type zen/vector,
    :every
    {:confirms #{canonical},
     :type zen/string,
     :zen/desc "Protocol/workflow this is part of"}},
   :jurisdiction
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc
     "Intended jurisdiction for message definition (if applicable)"}},
   :purpose
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc "Why this message definition is defined"},
   :name
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name for this message definition (computer friendly)"},
   :useContext
   {:type zen/vector,
    :every
    {:confirms #{UsageContext},
     :zen/desc "The context that the content is intended to support"}},
   :copyright
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc "Use and/or publishing restrictions"},
   :experimental
   {:confirms #{boolean},
    :type zen/boolean,
    :zen/desc "For testing purposes, not real usage"},
   :resourceType
   {:type zen/string, :const {:value "MessageDefinition"}},
   :title
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name for this message definition (human friendly)"},
   :event
   {:type zen/map,
    :zen/desc "Event code  or link to the EventDefinition",
    :keys
    {:Coding {:confirms #{Coding}},
     :uri {:confirms #{uri}, :type zen/string}},
    :exclusive-keys #{#{:Coding :uri}}},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc "draft | active | retired | unknown"},
   :allowedResponse
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:message},
     :type zen/map,
     :zen/desc "Responses to this message",
     :keys
     {:situation
      {:confirms #{markdown},
       :type zen/string,
       :zen/desc "When should this response be used"},
      :message
      {:confirms #{canonical},
       :type zen/string,
       :zen/desc
       "Reference to allowed message definition response"}}}},
   :graph
   {:type zen/vector,
    :every
    {:confirms #{canonical},
     :type zen/string,
     :zen/desc "Canonical reference to a GraphDefinition"}},
   :url
   {:confirms #{uri},
    :type zen/string,
    :zen/desc "Business Identifier for a given MessageDefinition"},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier},
     :zen/desc
     "Primary key for the message definition on a given server"}},
   :focus
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:min :code},
     :type zen/map,
     :zen/desc "Resource(s) that are the subject of the event",
     :keys
     {:min
      {:confirms #{unsignedInt},
       :type zen/integer,
       :zen/desc "Minimum number of focuses of this type"},
      :code
      {:confirms #{code},
       :type zen/string,
       :zen/desc "Type of resource"},
      :profile
      {:confirms #{canonical},
       :type zen/string,
       :zen/desc "Profile that must be adhered to by focus"},
      :max
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Maximum number of focuses of this type"}}}},
   :replaces
   {:type zen/vector,
    :every
    {:confirms #{canonical},
     :type zen/string,
     :zen/desc "Takes the place of"}},
   :responseRequired
   {:confirms #{code},
    :type zen/string,
    :zen/desc "always | on-error | never | on-success"},
   :base
   {:confirms #{canonical},
    :type zen/string,
    :zen/desc "Definition this one is based on"},
   :version
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Business version of the message definition"},
   :contact
   {:type zen/vector,
    :every
    {:confirms #{ContactDetail},
     :zen/desc "Contact details for the publisher"}}}},
 MessageHeader
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "MessageHeader",
  :require #{:source :event},
  :type zen/map,
  :zen/desc
  "The header for a message exchange that is either requesting or responding to an action.  The reference(s) that are the subject of the action as well as other information related to the action are typically transmitted in a bundle in which the MessageHeader resource instance is the first resource in the bundle.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/MessageHeader",
  :keys
  {:response
   {:confirms #{BackboneElement},
    :require #{:code :identifier},
    :type zen/map,
    :zen/desc "If this is a reply to prior message",
    :keys
    {:code
     {:confirms #{code},
      :type zen/string,
      :zen/desc "ok | transient-error | fatal-error"},
     :identifier
     {:confirms #{id},
      :type zen/string,
      :zen/desc "Id of original message"},
     :details
     {:confirms #{Reference},
      :zen/desc "Specific list of hints/warnings/errors"}}},
   :definition
   {:confirms #{canonical},
    :type zen/string,
    :zen/desc "Link to the definition for this message"},
   :enterer
   {:confirms #{Reference}, :zen/desc "The source of the data entry"},
   :resourceType {:type zen/string, :const {:value "MessageHeader"}},
   :source
   {:confirms #{BackboneElement},
    :require #{:endpoint},
    :type zen/map,
    :zen/desc "Message source application",
    :keys
    {:software
     {:confirms #{string},
      :type zen/string,
      :zen/desc "Name of software running the system"},
     :version
     {:confirms #{string},
      :type zen/string,
      :zen/desc "Version of software running"},
     :contact
     {:confirms #{ContactPoint},
      :zen/desc "Human contact for problems"},
     :endpoint
     {:confirms #{url},
      :type zen/string,
      :zen/desc "Actual message source address or id"},
     :name
     {:confirms #{string},
      :type zen/string,
      :zen/desc "Name of system"}}},
   :author
   {:confirms #{Reference}, :zen/desc "The source of the decision"},
   :reason {:confirms #{CodeableConcept}, :zen/desc "Cause of event"},
   :responsible
   {:confirms #{Reference},
    :zen/desc "Final responsibility for event"},
   :event
   {:type zen/map,
    :zen/desc
    "Code for the event this message represents or link to event definition",
    :keys
    {:Coding {:confirms #{Coding}},
     :uri {:confirms #{uri}, :type zen/string}},
    :exclusive-keys #{#{:Coding :uri}}},
   :sender
   {:confirms #{Reference},
    :zen/desc "Real world sender of the message"},
   :focus
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "The actual content of the message"}},
   :destination
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:endpoint},
     :type zen/map,
     :zen/desc "Message destination application(s)",
     :keys
     {:endpoint
      {:confirms #{url},
       :type zen/string,
       :zen/desc "Actual destination address or id"},
      :receiver
      {:confirms #{Reference},
       :zen/desc "Intended \"real-world\" recipient for the data"},
      :name
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Name of system"},
      :target
      {:confirms #{Reference},
       :zen/desc
       "Particular delivery destination within the destination"}}}}}},
 MolecularSequence
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "MolecularSequence",
  :require #{:coordinateSystem},
  :type zen/map,
  :zen/desc "Raw data describing a biological sequence.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/MolecularSequence",
  :keys
  {:patient
   {:confirms #{Reference}, :zen/desc "Who and/or what this is about"},
   :structureVariant
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc "Structural variant",
     :keys
     {:exact
      {:confirms #{boolean},
       :type zen/boolean,
       :zen/desc
       "Does the structural variant have base pair resolution breakpoints?"},
      :inner
      {:confirms #{BackboneElement},
       :type zen/map,
       :zen/desc "Structural variant inner",
       :keys
       {:start
        {:confirms #{integer},
         :type zen/integer,
         :zen/desc "Structural variant inner start"},
        :end
        {:confirms #{integer},
         :type zen/integer,
         :zen/desc "Structural variant inner end"}}},
      :length
      {:confirms #{integer},
       :type zen/integer,
       :zen/desc "Structural variant length"},
      :variantType
      {:confirms #{CodeableConcept},
       :zen/desc "Structural variant change type"},
      :outer
      {:confirms #{BackboneElement},
       :type zen/map,
       :zen/desc "Structural variant outer",
       :keys
       {:start
        {:confirms #{integer},
         :type zen/integer,
         :zen/desc "Structural variant outer start"},
        :end
        {:confirms #{integer},
         :type zen/integer,
         :zen/desc "Structural variant outer end"}}}}}},
   :repository
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:type},
     :type zen/map,
     :zen/desc
     "External repository which contains detailed report related with observedSeq in this resource",
     :keys
     {:name
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Repository's name"},
      :variantsetId
      {:confirms #{string},
       :type zen/string,
       :zen/desc
       "Id of the variantset that used to call for variantset in repository"},
      :readsetId
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Id of the read"},
      :url
      {:confirms #{uri},
       :type zen/string,
       :zen/desc "URI of the repository"},
      :type
      {:confirms #{code},
       :type zen/string,
       :zen/desc "directlink | openapi | login | oauth | other"},
      :datasetId
      {:confirms #{string},
       :type zen/string,
       :zen/desc
       "Id of the dataset that used to call for dataset in repository"}}}},
   :variant
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc "Variant in sequence",
     :keys
     {:end
      {:confirms #{integer},
       :type zen/integer,
       :zen/desc
       "End position of the variant on the reference sequence"},
      :cigar
      {:confirms #{string},
       :type zen/string,
       :zen/desc
       "Extended CIGAR string for aligning the sequence with reference bases"},
      :start
      {:confirms #{integer},
       :type zen/integer,
       :zen/desc
       "Start position of the variant on the  reference sequence"},
      :referenceAllele
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Allele in the reference sequence"},
      :variantPointer
      {:confirms #{Reference},
       :zen/desc "Pointer to observed variant information"},
      :observedAllele
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Allele that was observed"}}}},
   :specimen
   {:confirms #{Reference}, :zen/desc "Specimen used for sequencing"},
   :type
   {:confirms #{code}, :type zen/string, :zen/desc "aa | dna | rna"},
   :resourceType
   {:type zen/string, :const {:value "MolecularSequence"}},
   :pointer
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "Pointer to next atomic sequence"}},
   :observedSeq
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Sequence that was observed"},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier},
     :zen/desc
     "Unique ID for this particular sequence. This is a FHIR-defined id"}},
   :quality
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:type},
     :type zen/map,
     :zen/desc "An set of value as quality of sequence",
     :keys
     {:truthTP
      {:confirms #{decimal},
       :type zen/number,
       :zen/desc
       "True positives from the perspective of the truth data"},
      :fScore
      {:confirms #{decimal}, :type zen/number, :zen/desc "F-score"},
      :truthFN
      {:confirms #{decimal},
       :type zen/number,
       :zen/desc "False negatives"},
      :queryFP
      {:confirms #{decimal},
       :type zen/number,
       :zen/desc "False positives"},
      :method
      {:confirms #{CodeableConcept},
       :zen/desc "Method to get quality"},
      :precision
      {:confirms #{decimal},
       :type zen/number,
       :zen/desc "Precision of comparison"},
      :start
      {:confirms #{integer},
       :type zen/integer,
       :zen/desc "Start position of the sequence"},
      :queryTP
      {:confirms #{decimal},
       :type zen/number,
       :zen/desc
       "True positives from the perspective of the query data"},
      :type
      {:confirms #{code},
       :type zen/string,
       :zen/desc "indel | snp | unknown"},
      :recall
      {:confirms #{decimal},
       :type zen/number,
       :zen/desc "Recall of comparison"},
      :roc
      {:confirms #{BackboneElement},
       :type zen/map,
       :zen/desc "Receiver Operator Characteristic (ROC) Curve",
       :keys
       {:score
        {:type zen/vector,
         :every
         {:confirms #{integer},
          :type zen/integer,
          :zen/desc "Genotype quality score"}},
        :numTP
        {:type zen/vector,
         :every
         {:confirms #{integer},
          :type zen/integer,
          :zen/desc "Roc score true positive numbers"}},
        :numFN
        {:type zen/vector,
         :every
         {:confirms #{integer},
          :type zen/integer,
          :zen/desc "Roc score false negative numbers"}},
        :numFP
        {:type zen/vector,
         :every
         {:confirms #{integer},
          :type zen/integer,
          :zen/desc "Roc score false positive numbers"}},
        :fMeasure
        {:type zen/vector,
         :every
         {:confirms #{decimal},
          :type zen/number,
          :zen/desc "FScore of the GQ score"}},
        :precision
        {:type zen/vector,
         :every
         {:confirms #{decimal},
          :type zen/number,
          :zen/desc "Precision of the GQ score"}},
        :sensitivity
        {:type zen/vector,
         :every
         {:confirms #{decimal},
          :type zen/number,
          :zen/desc "Sensitivity of the GQ score"}}}},
      :score
      {:confirms #{Quantity},
       :zen/desc "Quality score for the comparison"},
      :end
      {:confirms #{integer},
       :type zen/integer,
       :zen/desc "End position of the sequence"},
      :standardSequence
      {:confirms #{CodeableConcept},
       :zen/desc "Standard sequence for comparison"},
      :gtFP
      {:confirms #{decimal},
       :type zen/number,
       :zen/desc
       "False positives where the non-REF alleles in the Truth and Query Call Sets match"}}}},
   :device
   {:confirms #{Reference}, :zen/desc "The method for sequencing"},
   :quantity
   {:confirms #{Quantity},
    :zen/desc
    "The number of copies of the sequence of interest.  (RNASeq)"},
   :coordinateSystem
   {:confirms #{integer},
    :type zen/integer,
    :zen/desc
    "Base number of coordinate system (0 for 0-based numbering or coordinates, inclusive start, exclusive end, 1 for 1-based numbering, inclusive start, inclusive end)"},
   :referenceSeq
   {:confirms #{BackboneElement},
    :type zen/map,
    :zen/desc "A sequence used as reference",
    :keys
    {:chromosome
     {:confirms #{CodeableConcept},
      :zen/desc "Chromosome containing genetic finding"},
     :referenceSeqId
     {:confirms #{CodeableConcept}, :zen/desc "Reference identifier"},
     :windowEnd
     {:confirms #{integer},
      :type zen/integer,
      :zen/desc
      "End position of the window on the reference sequence"},
     :strand
     {:confirms #{code}, :type zen/string, :zen/desc "watson | crick"},
     :genomeBuild
     {:confirms #{string},
      :type zen/string,
      :zen/desc
      "The Genome Build used for reference, following GRCh build versions e.g. 'GRCh 37'"},
     :orientation
     {:confirms #{code},
      :type zen/string,
      :zen/desc "sense | antisense"},
     :referenceSeqPointer
     {:confirms #{Reference},
      :zen/desc
      "A pointer to another MolecularSequence entity as reference sequence"},
     :referenceSeqString
     {:confirms #{string},
      :type zen/string,
      :zen/desc "A string to represent reference sequence"},
     :windowStart
     {:confirms #{integer},
      :type zen/integer,
      :zen/desc
      "Start position of the window on the  reference sequence"}}},
   :performer
   {:confirms #{Reference},
    :zen/desc "Who should be responsible for test result"},
   :readCoverage
   {:confirms #{integer},
    :type zen/integer,
    :zen/desc
    "Average number of reads representing a given nucleotide in the reconstructed sequence"}}},
 NamingSystem
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "NamingSystem",
  :require #{:date :name :status :kind :uniqueId},
  :type zen/map,
  :zen/desc
  "A curated namespace that issues unique symbols within that namespace for the identification of concepts, people, devices, etc.  Represents a \"System\" used within the Identifier and Coding data types.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/NamingSystem",
  :keys
  {:description
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc "Natural language description of the naming system"},
   :date
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "Date last changed"},
   :publisher
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name of the publisher (organization or individual)"},
   :jurisdiction
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc
     "Intended jurisdiction for naming system (if applicable)"}},
   :name
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name for this naming system (computer friendly)"},
   :useContext
   {:type zen/vector,
    :every
    {:confirms #{UsageContext},
     :zen/desc "The context that the content is intended to support"}},
   :type
   {:confirms #{CodeableConcept},
    :zen/desc "e.g. driver,  provider,  patient, bank etc."},
   :resourceType {:type zen/string, :const {:value "NamingSystem"}},
   :responsible
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Who maintains system namespace?"},
   :usage
   {:confirms #{string},
    :type zen/string,
    :zen/desc "How/where is it used"},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc "draft | active | retired | unknown"},
   :kind
   {:confirms #{code},
    :type zen/string,
    :zen/desc "codesystem | identifier | root"},
   :uniqueId
   {:minItems 1,
    :type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:value :type},
     :type zen/map,
     :zen/desc "Unique identifiers used for system",
     :keys
     {:period
      {:confirms #{Period}, :zen/desc "When is identifier valid?"},
      :type
      {:confirms #{code},
       :type zen/string,
       :zen/desc "oid | uuid | uri | other"},
      :comment
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Notes about identifier usage"},
      :preferred
      {:confirms #{boolean},
       :type zen/boolean,
       :zen/desc "Is this the id that should be used for this type"},
      :value
      {:confirms #{string},
       :type zen/string,
       :zen/desc "The unique identifier"}}}},
   :contact
   {:type zen/vector,
    :every
    {:confirms #{ContactDetail},
     :zen/desc "Contact details for the publisher"}}}},
 NutritionOrder
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "NutritionOrder",
  :require #{:patient :dateTime :status :intent},
  :type zen/map,
  :zen/desc
  "A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a patient/resident.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/NutritionOrder",
  :keys
  {:patient
   {:confirms #{Reference},
    :zen/desc
    "The person who requires the diet, formula or nutritional supplement"},
   :oralDiet
   {:confirms #{BackboneElement},
    :type zen/map,
    :zen/desc "Oral diet components",
    :keys
    {:instruction
     {:confirms #{string},
      :type zen/string,
      :zen/desc
      "Instructions or additional information about the oral diet"},
     :type
     {:type zen/vector,
      :every
      {:confirms #{CodeableConcept},
       :zen/desc
       "Type of oral diet or diet restrictions that describe what can be consumed orally"}},
     :schedule
     {:type zen/vector,
      :every
      {:confirms #{Timing}, :zen/desc "Scheduled frequency of diet"}},
     :nutrient
     {:type zen/vector,
      :every
      {:confirms #{BackboneElement},
       :type zen/map,
       :zen/desc "Required  nutrient modifications",
       :keys
       {:amount
        {:confirms #{Quantity SimpleQuantity},
         :zen/desc "Quantity of the specified nutrient"},
        :modifier
        {:confirms #{CodeableConcept},
         :zen/desc "Type of nutrient that is being modified"}}}},
     :fluidConsistencyType
     {:type zen/vector,
      :every
      {:confirms #{CodeableConcept},
       :zen/desc
       "The required consistency of fluids and liquids provided to the patient"}},
     :texture
     {:type zen/vector,
      :every
      {:confirms #{BackboneElement},
       :type zen/map,
       :zen/desc "Required  texture modifications",
       :keys
       {:modifier
        {:confirms #{CodeableConcept},
         :zen/desc
         "Code to indicate how to alter the texture of the foods, e.g. pureed"},
        :foodType
        {:confirms #{CodeableConcept},
         :zen/desc
         "Concepts that are used to identify an entity that is ingested for nutritional purposes"}}}}}},
   :instantiatesCanonical
   {:type zen/vector,
    :every
    {:confirms #{canonical},
     :type zen/string,
     :zen/desc "Instantiates FHIR protocol or definition"}},
   :instantiatesUri
   {:type zen/vector,
    :every
    {:confirms #{uri},
     :type zen/string,
     :zen/desc "Instantiates external protocol or definition"}},
   :instantiates
   {:type zen/vector,
    :every
    {:confirms #{uri},
     :type zen/string,
     :zen/desc "Instantiates protocol or definition"}},
   :encounter
   {:confirms #{Reference},
    :zen/desc "The encounter associated with this nutrition order"},
   :resourceType {:type zen/string, :const {:value "NutritionOrder"}},
   :note
   {:type zen/vector,
    :every {:confirms #{Annotation}, :zen/desc "Comments"}},
   :dateTime
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "Date and time the nutrition order was requested"},
   :enteralFormula
   {:confirms #{BackboneElement},
    :type zen/map,
    :zen/desc "Enteral formula components",
    :keys
    {:additiveType
     {:confirms #{CodeableConcept},
      :zen/desc "Type of modular component to add to the feeding"},
     :maxVolumeToDeliver
     {:confirms #{Quantity SimpleQuantity},
      :zen/desc "Upper limit on formula volume per unit of time"},
     :baseFormulaType
     {:confirms #{CodeableConcept},
      :zen/desc "Type of enteral or infant formula"},
     :routeofAdministration
     {:confirms #{CodeableConcept},
      :zen/desc
      "How the formula should enter the patient's gastrointestinal tract"},
     :additiveProductName
     {:confirms #{string},
      :type zen/string,
      :zen/desc "Product or brand name of the modular additive"},
     :caloricDensity
     {:confirms #{Quantity SimpleQuantity},
      :zen/desc
      "Amount of energy per specified volume that is required"},
     :administrationInstruction
     {:confirms #{string},
      :type zen/string,
      :zen/desc "Formula feeding instructions expressed as text"},
     :administration
     {:type zen/vector,
      :every
      {:confirms #{BackboneElement},
       :type zen/map,
       :zen/desc "Formula feeding instruction as structured data",
       :keys
       {:quantity
        {:confirms #{Quantity SimpleQuantity},
         :zen/desc "The volume of formula to provide"},
        :schedule
        {:confirms #{Timing},
         :zen/desc "Scheduled frequency of enteral feeding"},
        :rate
        {:confirms #{SimpleQuantity},
         :type zen/map,
         :zen/desc
         "Speed with which the formula is provided per period of time",
         :keys
         {:Quantity {:confirms #{Quantity}},
          :Ratio {:confirms #{Ratio}}},
         :exclusive-keys #{#{:Ratio :Quantity}}}}}},
     :baseFormulaProductName
     {:confirms #{string},
      :type zen/string,
      :zen/desc
      "Product or brand name of the enteral or infant formula"}}},
   :foodPreferenceModifier
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc
     "Order-specific modifier about the type of food that should be given"}},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc
    "draft | active | on-hold | revoked | completed | entered-in-error | unknown"},
   :excludeFoodModifier
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc
     "Order-specific modifier about the type of food that should not be given"}},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier},
     :zen/desc "Identifiers assigned to this order"}},
   :intent
   {:confirms #{code},
    :type zen/string,
    :zen/desc
    "proposal | plan | directive | order | original-order | reflex-order | filler-order | instance-order | option"},
   :orderer
   {:confirms #{Reference},
    :zen/desc
    "Who ordered the diet, formula or nutritional supplement"},
   :supplement
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc "Supplement components",
     :keys
     {:type
      {:confirms #{CodeableConcept},
       :zen/desc "Type of supplement product requested"},
      :productName
      {:confirms #{string},
       :type zen/string,
       :zen/desc
       "Product or brand name of the nutritional supplement"},
      :instruction
      {:confirms #{string},
       :type zen/string,
       :zen/desc
       "Instructions or additional information about the oral supplement"},
      :schedule
      {:type zen/vector,
       :every
       {:confirms #{Timing},
        :zen/desc "Scheduled frequency of supplement"}},
      :quantity
      {:confirms #{Quantity SimpleQuantity},
       :zen/desc "Amount of the nutritional supplement"}}}},
   :allergyIntolerance
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc
     "List of the patient's food and nutrition-related allergies and intolerances"}}}},
 Observation
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "Observation",
  :require #{:status :code},
  :type zen/map,
  :zen/desc
  "Measurements and simple assertions made about a patient, device or other subject.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/Observation",
  :keys
  {:category
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "Classification of  type of observation"}},
   :referenceRange
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc "Provides guide for interpretation",
     :keys
     {:text
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Text based reference range in an observation"},
      :appliesTo
      {:type zen/vector,
       :every
       {:confirms #{CodeableConcept},
        :zen/desc "Reference range population"}},
      :age
      {:confirms #{Range},
       :zen/desc "Applicable age range, if relevant"},
      :low
      {:confirms #{Quantity SimpleQuantity},
       :zen/desc "Low Range, if relevant"},
      :high
      {:confirms #{Quantity SimpleQuantity},
       :zen/desc "High Range, if relevant"},
      :type
      {:confirms #{CodeableConcept},
       :zen/desc "Reference range qualifier"}}}},
   :hasMember
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc
     "Related resource that belongs to the Observation group"}},
   :derivedFrom
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "Related measurements the observation is made from"}},
   :interpretation
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "High, low, normal, etc."}},
   :encounter
   {:confirms #{Reference},
    :zen/desc
    "Healthcare event during which this observation is made"},
   :method {:confirms #{CodeableConcept}, :zen/desc "How it was done"},
   :specimen
   {:confirms #{Reference},
    :zen/desc "Specimen used for this observation"},
   :value
   {:type zen/map,
    :zen/desc "Actual result",
    :keys
    {:time {:confirms #{time}, :type zen/string},
     :SampledData {:confirms #{SampledData}},
     :string {:confirms #{string}, :type zen/string},
     :dateTime {:confirms #{dateTime}, :type zen/datetime},
     :Range {:confirms #{Range}},
     :integer {:confirms #{integer}, :type zen/integer},
     :Ratio {:confirms #{Ratio}},
     :Period {:confirms #{Period}},
     :CodeableConcept {:confirms #{CodeableConcept}},
     :Quantity {:confirms #{Quantity}},
     :boolean {:confirms #{boolean}, :type zen/boolean}},
    :exclusive-keys
    #{#{:time
        :SampledData
        :string
        :dateTime
        :Range
        :integer
        :Ratio
        :Period
        :CodeableConcept
        :Quantity
        :boolean}}},
   :resourceType {:type zen/string, :const {:value "Observation"}},
   :component
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:code},
     :type zen/map,
     :zen/desc "Component results",
     :keys
     {:referenceRange
      {:type zen/vector,
       :every
       #:zen{:desc
             "Provides guide for interpretation of component result"}},
      :code
      {:confirms #{CodeableConcept},
       :zen/desc "Type of component observation (code / type)"},
      :value
      {:type zen/map,
       :zen/desc "Actual component result",
       :keys
       {:time {:confirms #{time}, :type zen/string},
        :SampledData {:confirms #{SampledData}},
        :string {:confirms #{string}, :type zen/string},
        :dateTime {:confirms #{dateTime}, :type zen/datetime},
        :Range {:confirms #{Range}},
        :integer {:confirms #{integer}, :type zen/integer},
        :Ratio {:confirms #{Ratio}},
        :Period {:confirms #{Period}},
        :CodeableConcept {:confirms #{CodeableConcept}},
        :Quantity {:confirms #{Quantity}},
        :boolean {:confirms #{boolean}, :type zen/boolean}},
       :exclusive-keys
       #{#{:time
           :SampledData
           :string
           :dateTime
           :Range
           :integer
           :Ratio
           :Period
           :CodeableConcept
           :Quantity
           :boolean}}},
      :interpretation
      {:type zen/vector,
       :every
       {:confirms #{CodeableConcept},
        :zen/desc "High, low, normal, etc."}},
      :dataAbsentReason
      {:confirms #{CodeableConcept},
       :zen/desc "Why the component result is missing"}}}},
   :note
   {:type zen/vector,
    :every
    {:confirms #{Annotation},
     :zen/desc "Comments about the observation"}},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc "registered | preliminary | final | amended +"},
   :effective
   {:type zen/map,
    :zen/desc "Clinically relevant time/time-period for observation",
    :keys
    {:dateTime {:confirms #{dateTime}, :type zen/datetime},
     :Period {:confirms #{Period}},
     :Timing {:confirms #{Timing}},
     :instant {:confirms #{instant}, :type zen/string}},
    :exclusive-keys #{#{:instant :dateTime :Period :Timing}}},
   :code
   {:confirms #{CodeableConcept},
    :zen/desc "Type of observation (code / type)"},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier},
     :zen/desc "Business Identifier for observation"}},
   :bodySite
   {:confirms #{CodeableConcept}, :zen/desc "Observed body part"},
   :focus
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc
     "What the observation is about, when it is not about the subject of record"}},
   :issued
   {:confirms #{instant},
    :type zen/string,
    :zen/desc "Date/Time this version was made available"},
   :device {:confirms #{Reference}, :zen/desc "(Measurement) Device"},
   :basedOn
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "Fulfills plan, proposal or order"}},
   :partOf
   {:type zen/vector,
    :every
    {:confirms #{Reference}, :zen/desc "Part of referenced event"}},
   :subject
   {:confirms #{Reference},
    :zen/desc "Who and/or what the observation is about"},
   :performer
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "Who is responsible for the observation"}},
   :dataAbsentReason
   {:confirms #{CodeableConcept},
    :zen/desc "Why the result is missing"}}},
 ObservationDefinition
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "ObservationDefinition",
  :require #{:code},
  :type zen/map,
  :zen/desc
  "Set of definitional characteristics for a kind of observation or measurement produced or consumed by an orderable health care service.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/ObservationDefinition",
  :keys
  {:quantitativeDetails
   {:confirms #{BackboneElement},
    :type zen/map,
    :zen/desc "Characteristics of quantitative results",
    :keys
    {:conversionFactor
     {:confirms #{decimal},
      :type zen/number,
      :zen/desc "SI to Customary unit conversion factor"},
     :customaryUnit
     {:confirms #{CodeableConcept},
      :zen/desc "Customary unit for quantitative results"},
     :decimalPrecision
     {:confirms #{integer},
      :type zen/integer,
      :zen/desc
      "Decimal precision of observation quantitative results"},
     :unit
     {:confirms #{CodeableConcept},
      :zen/desc "SI unit for quantitative results"}}},
   :category
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "Category of observation"}},
   :method
   {:confirms #{CodeableConcept},
    :zen/desc "Method used to produce the observation"},
   :resourceType
   {:type zen/string, :const {:value "ObservationDefinition"}},
   :validCodedValueSet
   {:confirms #{Reference},
    :zen/desc
    "Value set of valid coded values for the observations conforming to this ObservationDefinition"},
   :qualifiedInterval
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc
     "Qualified range for continuous and ordinal observation results",
     :keys
     {:context
      {:confirms #{CodeableConcept},
       :zen/desc "Range context qualifier"},
      :condition
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Condition associated with the reference range"},
      :range
      {:confirms #{Range},
       :zen/desc
       "The interval itself, for continuous or ordinal observations"},
      :age
      {:confirms #{Range},
       :zen/desc "Applicable age range, if relevant"},
      :gender
      {:confirms #{code},
       :type zen/string,
       :zen/desc "male | female | other | unknown"},
      :gestationalAge
      {:confirms #{Range},
       :zen/desc "Applicable gestational age range, if relevant"},
      :appliesTo
      {:type zen/vector,
       :every
       {:confirms #{CodeableConcept},
        :zen/desc "Targetted population of the range"}},
      :category
      {:confirms #{code},
       :type zen/string,
       :zen/desc "reference | critical | absolute"}}}},
   :abnormalCodedValueSet
   {:confirms #{Reference},
    :zen/desc
    "Value set of abnormal coded values for the observations conforming to this ObservationDefinition"},
   :code
   {:confirms #{CodeableConcept},
    :zen/desc "Type of observation (code / type)"},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier},
     :zen/desc
     "Business identifier for this ObservationDefinition instance"}},
   :permittedDataType
   {:type zen/vector,
    :every
    {:confirms #{code},
     :type zen/string,
     :zen/desc
     "Quantity | CodeableConcept | string | boolean | integer | Range | Ratio | SampledData | time | dateTime | Period"}},
   :multipleResultsAllowed
   {:confirms #{boolean},
    :type zen/boolean,
    :zen/desc "Multiple results allowed"},
   :normalCodedValueSet
   {:confirms #{Reference},
    :zen/desc
    "Value set of normal coded values for the observations conforming to this ObservationDefinition"},
   :preferredReportName
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Preferred report name"},
   :criticalCodedValueSet
   {:confirms #{Reference},
    :zen/desc
    "Value set of critical coded values for the observations conforming to this ObservationDefinition"}}},
 OperationDefinition
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "OperationDefinition",
  :require #{:system :instance :name :type :status :kind :code},
  :type zen/map,
  :zen/desc
  "A formal computable definition of an operation (on the RESTful interface) or a named query (using the search interaction).",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/OperationDefinition",
  :keys
  {:description
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc
    "Natural language description of the operation definition"},
   :date
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "Date last changed"},
   :system
   {:confirms #{boolean},
    :type zen/boolean,
    :zen/desc "Invoke at the system level?"},
   :publisher
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name of the publisher (organization or individual)"},
   :instance
   {:confirms #{boolean},
    :type zen/boolean,
    :zen/desc "Invoke on an instance?"},
   :jurisdiction
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc
     "Intended jurisdiction for operation definition (if applicable)"}},
   :purpose
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc "Why this operation definition is defined"},
   :name
   {:confirms #{string},
    :type zen/string,
    :zen/desc
    "Name for this operation definition (computer friendly)"},
   :useContext
   {:type zen/vector,
    :every
    {:confirms #{UsageContext},
     :zen/desc "The context that the content is intended to support"}},
   :type
   {:confirms #{boolean},
    :type zen/boolean,
    :zen/desc "Invoke at the type level?"},
   :overload
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc "Define overloaded variants for when  generating code",
     :keys
     {:parameterName
      {:type zen/vector,
       :every
       {:confirms #{string},
        :type zen/string,
        :zen/desc "Name of parameter to include in overload"}},
      :comment
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Comments to go on overload"}}}},
   :experimental
   {:confirms #{boolean},
    :type zen/boolean,
    :zen/desc "For testing purposes, not real usage"},
   :outputProfile
   {:confirms #{canonical},
    :type zen/string,
    :zen/desc "Validation information for out parameters"},
   :resourceType
   {:type zen/string, :const {:value "OperationDefinition"}},
   :title
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name for this operation definition (human friendly)"},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc "draft | active | retired | unknown"},
   :resource
   {:type zen/vector,
    :every
    {:confirms #{code},
     :type zen/string,
     :zen/desc "Types this operation applies to"}},
   :affectsState
   {:confirms #{boolean},
    :type zen/boolean,
    :zen/desc "Whether content is changed by the operation"},
   :kind
   {:confirms #{code},
    :type zen/string,
    :zen/desc "operation | query"},
   :comment
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc "Additional information about use"},
   :url
   {:confirms #{uri},
    :type zen/string,
    :zen/desc
    "Canonical identifier for this operation definition, represented as a URI (globally unique)"},
   :code
   {:confirms #{code},
    :type zen/string,
    :zen/desc "Name used to invoke the operation"},
   :base
   {:confirms #{canonical},
    :type zen/string,
    :zen/desc "Marks this as a profile of the base"},
   :version
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Business version of the operation definition"},
   :contact
   {:type zen/vector,
    :every
    {:confirms #{ContactDetail},
     :zen/desc "Contact details for the publisher"}},
   :inputProfile
   {:confirms #{canonical},
    :type zen/string,
    :zen/desc "Validation information for in parameters"},
   :parameter
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:min :use :name :max},
     :type zen/map,
     :zen/desc "Parameters for the operation/query",
     :keys
     {:min
      {:confirms #{integer},
       :type zen/integer,
       :zen/desc "Minimum Cardinality"},
      :searchType
      {:confirms #{code},
       :type zen/string,
       :zen/desc
       "number | date | string | token | reference | composite | quantity | uri | special"},
      :use {:confirms #{code}, :type zen/string, :zen/desc "in | out"},
      :name
      {:confirms #{code},
       :type zen/string,
       :zen/desc "Name in Parameters.parameter.name or in URL"},
      :part
      {:type zen/vector,
       :every #:zen{:desc "Parts of a nested Parameter"}},
      :type
      {:confirms #{code},
       :type zen/string,
       :zen/desc "What type this parameter has"},
      :referencedFrom
      {:type zen/vector,
       :every
       {:confirms #{BackboneElement},
        :require #{:source},
        :type zen/map,
        :zen/desc "References to this parameter",
        :keys
        {:sourceId
         {:confirms #{string},
          :type zen/string,
          :zen/desc "Element id of reference"},
         :source
         {:confirms #{string},
          :type zen/string,
          :zen/desc "Referencing parameter"}}}},
      :documentation
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Description of meaning/use"},
      :binding
      {:confirms #{BackboneElement},
       :require #{:strength :valueSet},
       :type zen/map,
       :zen/desc "ValueSet details if this is coded",
       :keys
       {:strength
        {:confirms #{code},
         :type zen/string,
         :zen/desc "required | extensible | preferred | example"},
        :valueSet
        {:confirms #{canonical},
         :type zen/string,
         :zen/desc "Source of value set"}}},
      :max
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Maximum Cardinality (a number or *)"},
      :targetProfile
      {:type zen/vector,
       :every
       {:confirms #{canonical},
        :type zen/string,
        :zen/desc
        "If type is Reference | canonical, allowed targets"}}}}}}},
 OperationOutcome
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "OperationOutcome",
  :require #{:issue},
  :type zen/map,
  :zen/desc
  "A collection of error, warning, or information messages that result from a system action.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/OperationOutcome",
  :keys
  {:issue
   {:minItems 1,
    :type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:severity :code},
     :type zen/map,
     :zen/desc "A single issue associated with the action",
     :keys
     {:details
      {:confirms #{CodeableConcept},
       :zen/desc "Additional details about the error"},
      :location
      {:type zen/vector,
       :every
       {:confirms #{string},
        :type zen/string,
        :zen/desc "Deprecated: Path of element(s) related to issue"}},
      :expression
      {:type zen/vector,
       :every
       {:confirms #{string},
        :type zen/string,
        :zen/desc "FHIRPath of element(s) related to issue"}},
      :diagnostics
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Additional diagnostic information about the issue"},
      :code
      {:confirms #{code},
       :type zen/string,
       :zen/desc "Error or warning code"},
      :severity
      {:confirms #{code},
       :type zen/string,
       :zen/desc "fatal | error | warning | information"}}}},
   :resourceType
   {:type zen/string, :const {:value "OperationOutcome"}}}},
 Organization
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "Organization",
  :type zen/map,
  :zen/desc
  "A formally or informally recognized grouping of people or organizations formed for the purpose of achieving some form of collective action.  Includes companies, institutions, corporations, departments, community groups, healthcare practice groups, payer/insurer, etc.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/Organization",
  :keys
  {:address
   {:type zen/vector,
    :every
    {:confirms #{Address},
     :zen/desc "An address for the organization"}},
   :name
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name used for the organization"},
   :type
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept}, :zen/desc "Kind of organization"}},
   :resourceType {:type zen/string, :const {:value "Organization"}},
   :alias
   {:type zen/vector,
    :every
    {:confirms #{string},
     :type zen/string,
     :zen/desc
     "A list of alternate names that the organization is known as, or was known as in the past"}},
   :active
   {:confirms #{boolean},
    :type zen/boolean,
    :zen/desc
    "Whether the organization's record is still in active use"},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier},
     :zen/desc
     "Identifies this organization  across multiple systems"}},
   :telecom
   {:type zen/vector,
    :every
    {:confirms #{ContactPoint},
     :zen/desc "A contact detail for the organization"}},
   :partOf
   {:confirms #{Reference},
    :zen/desc
    "The organization of which this organization forms a part"},
   :endpoint
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc
     "Technical endpoints providing access to services operated for the organization"}},
   :contact
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc "Contact for the organization for a certain purpose",
     :keys
     {:telecom
      {:type zen/vector,
       :every
       {:confirms #{ContactPoint},
        :zen/desc
        "Contact details (telephone, email, etc.)  for a contact"}},
      :purpose
      {:confirms #{CodeableConcept}, :zen/desc "The type of contact"},
      :address
      {:confirms #{Address},
       :zen/desc "Visiting or postal addresses for the contact"},
      :name
      {:confirms #{HumanName},
       :zen/desc "A name associated with the contact"}}}}}},
 OrganizationAffiliation
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "OrganizationAffiliation",
  :type zen/map,
  :zen/desc
  "Defines an affiliation/assotiation/relationship between 2 distinct oganizations, that is not a part-of relationship/sub-division relationship.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/OrganizationAffiliation",
  :keys
  {:specialty
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc
     "Specific specialty of the participatingOrganization in the context of the role"}},
   :organization
   {:confirms #{Reference},
    :zen/desc "Organization where the role is available"},
   :resourceType
   {:type zen/string, :const {:value "OrganizationAffiliation"}},
   :participatingOrganization
   {:confirms #{Reference},
    :zen/desc
    "Organization that provides/performs the role (e.g. providing services or is a member of)"},
   :active
   {:confirms #{boolean},
    :type zen/boolean,
    :zen/desc
    "Whether this organization affiliation record is in active use"},
   :code
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc
     "Definition of the role the participatingOrganization plays"}},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier},
     :zen/desc "Business identifiers that are specific to this role"}},
   :telecom
   {:type zen/vector,
    :every
    {:confirms #{ContactPoint},
     :zen/desc
     "Contact details at the participatingOrganization relevant to this Affiliation"}},
   :network
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc
     "Health insurance provider network in which the participatingOrganization provides the role's services (if defined) at the indicated locations (if defined)"}},
   :period
   {:confirms #{Period},
    :zen/desc
    "The period during which the participatingOrganization is affiliated with the primary organization"},
   :location
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "The location(s) at which the role occurs"}},
   :endpoint
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc
     "Technical endpoints providing access to services operated for this role"}},
   :healthcareService
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "Healthcare services provided through the role"}}}},
 Parameters
 {:confirms #{Resource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "Parameters",
  :type zen/map,
  :zen/desc
  "This resource is a non-persisted resource used to pass information into and back from an [operation](operations.html). It has no other use, and there is no RESTful endpoint associated with it.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/Parameters",
  :keys
  {:parameter
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:name},
     :type zen/map,
     :zen/desc "Operation Parameter",
     :keys
     {:value
      {:type zen/map,
       :zen/desc "If parameter is a data type",
       :keys
       {:unsignedInt {:confirms #{unsignedInt}, :type zen/integer},
        :Signature {:confirms #{Signature}},
        :markdown {:confirms #{markdown}, :type zen/string},
        :date {:confirms #{date}, :type zen/date},
        :Dosage {:confirms #{Dosage}},
        :ContactDetail {:confirms #{ContactDetail}},
        :RelatedArtifact {:confirms #{RelatedArtifact}},
        :instant {:confirms #{instant}, :type zen/string},
        :UsageContext {:confirms #{UsageContext}},
        :time {:confirms #{time}, :type zen/string},
        :DataRequirement {:confirms #{DataRequirement}},
        :base64Binary {:confirms #{base64Binary}, :type zen/string},
        :Meta {:confirms #{Meta}},
        :Distance {:confirms #{Distance}},
        :SampledData {:confirms #{SampledData}},
        :TriggerDefinition {:confirms #{TriggerDefinition}},
        :Identifier {:confirms #{Identifier}},
        :string {:confirms #{string}, :type zen/string},
        :Address {:confirms #{Address}},
        :Expression {:confirms #{Expression}},
        :dateTime {:confirms #{dateTime}, :type zen/datetime},
        :Range {:confirms #{Range}},
        :integer {:confirms #{integer}, :type zen/integer},
        :Ratio {:confirms #{Ratio}},
        :oid {:confirms #{oid}, :type zen/string},
        :ContactPoint {:confirms #{ContactPoint}},
        :Money {:confirms #{Money}},
        :decimal {:confirms #{decimal}, :type zen/number},
        :id {:confirms #{id}, :type zen/string},
        :Attachment {:confirms #{Attachment}},
        :Contributor {:confirms #{Contributor}},
        :Period {:confirms #{Period}},
        :canonical {:confirms #{canonical}, :type zen/string},
        :url {:confirms #{url}, :type zen/string},
        :code {:confirms #{code}, :type zen/string},
        :HumanName {:confirms #{HumanName}},
        :positiveInt {:confirms #{positiveInt}, :type zen/integer},
        :ParameterDefinition {:confirms #{ParameterDefinition}},
        :Coding {:confirms #{Coding}},
        :Timing {:confirms #{Timing}},
        :Duration {:confirms #{Duration}},
        :uri {:confirms #{uri}, :type zen/string},
        :CodeableConcept {:confirms #{CodeableConcept}},
        :uuid {:confirms #{uuid}, :type zen/string},
        :Count {:confirms #{Count}},
        :Quantity {:confirms #{Quantity}},
        :boolean {:confirms #{boolean}, :type zen/boolean},
        :Annotation {:confirms #{Annotation}},
        :Age {:confirms #{Age}},
        :Reference {:confirms #{Reference}}},
       :exclusive-keys
       #{#{:unsignedInt
           :Signature
           :markdown
           :date
           :Dosage
           :ContactDetail
           :RelatedArtifact
           :instant
           :UsageContext
           :time
           :DataRequirement
           :base64Binary
           :Meta
           :Distance
           :SampledData
           :TriggerDefinition
           :Identifier
           :string
           :Address
           :Expression
           :dateTime
           :Range
           :integer
           :Ratio
           :oid
           :ContactPoint
           :Money
           :decimal
           :id
           :Attachment
           :Contributor
           :Period
           :canonical
           :url
           :code
           :HumanName
           :positiveInt
           :ParameterDefinition
           :Coding
           :Timing
           :Duration
           :uri
           :CodeableConcept
           :uuid
           :Count
           :Quantity
           :boolean
           :Annotation
           :Age
           :Reference}}},
      :part
      {:type zen/vector,
       :every #:zen{:desc "Named part of a multi-part parameter"}},
      :name
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Name from the definition"},
      :resource
      {:confirms #{Resource},
       :zen/desc "If parameter is a whole resource"}}}},
   :resourceType {:type zen/string, :const {:value "Parameters"}}}},
 Patient
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "Patient",
  :type zen/map,
  :zen/desc
  "Demographics and other administrative information about an individual or animal receiving care or other health-related services.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/Patient",
  :keys
  {:address
   {:type zen/vector,
    :every
    {:confirms #{Address}, :zen/desc "An address for the individual"}},
   :managingOrganization
   {:confirms #{Reference},
    :zen/desc
    "Organization that is the custodian of the patient record"},
   :name
   {:type zen/vector,
    :every
    {:confirms #{HumanName},
     :zen/desc "A name associated with the patient"}},
   :birthDate
   {:confirms #{date},
    :type zen/date,
    :zen/desc "The date of birth for the individual"},
   :resourceType {:type zen/string, :const {:value "Patient"}},
   :multipleBirth
   {:type zen/map,
    :zen/desc "Whether patient is part of a multiple birth",
    :keys
    {:boolean {:confirms #{boolean}, :type zen/boolean},
     :integer {:confirms #{integer}, :type zen/integer}},
    :exclusive-keys #{#{:integer :boolean}}},
   :deceased
   {:type zen/map,
    :zen/desc "Indicates if the individual is deceased or not",
    :keys
    {:boolean {:confirms #{boolean}, :type zen/boolean},
     :dateTime {:confirms #{dateTime}, :type zen/datetime}},
    :exclusive-keys #{#{:dateTime :boolean}}},
   :photo
   {:type zen/vector,
    :every
    {:confirms #{Attachment}, :zen/desc "Image of the patient"}},
   :link
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:other :type},
     :type zen/map,
     :zen/desc
     "Link to another patient resource that concerns the same actual person",
     :keys
     {:type
      {:confirms #{code},
       :type zen/string,
       :zen/desc "replaced-by | replaces | refer | seealso"},
      :other
      {:confirms #{Reference},
       :zen/desc
       "The other patient or related person resource that the link refers to"}}}},
   :active
   {:confirms #{boolean},
    :type zen/boolean,
    :zen/desc "Whether this patient's record is in active use"},
   :communication
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:language},
     :type zen/map,
     :zen/desc
     "A language which may be used to communicate with the patient about his or her health",
     :keys
     {:language
      {:confirms #{CodeableConcept},
       :zen/desc
       "The language which can be used to communicate with the patient about his or her health"},
      :preferred
      {:confirms #{boolean},
       :type zen/boolean,
       :zen/desc "Language preference indicator"}}}},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier},
     :zen/desc "An identifier for this patient"}},
   :telecom
   {:type zen/vector,
    :every
    {:confirms #{ContactPoint},
     :zen/desc "A contact detail for the individual"}},
   :generalPractitioner
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "Patient's nominated primary care provider"}},
   :gender
   {:confirms #{code},
    :type zen/string,
    :zen/desc "male | female | other | unknown"},
   :maritalStatus
   {:confirms #{CodeableConcept},
    :zen/desc "Marital (civil) status of a patient"},
   :contact
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc
     "A contact party (e.g. guardian, partner, friend) for the patient",
     :keys
     {:period
      {:confirms #{Period},
       :zen/desc
       "The period during which this contact person or organization is valid to be contacted relating to this patient"},
      :relationship
      {:type zen/vector,
       :every
       {:confirms #{CodeableConcept},
        :zen/desc "The kind of relationship"}},
      :gender
      {:confirms #{code},
       :type zen/string,
       :zen/desc "male | female | other | unknown"},
      :name
      {:confirms #{HumanName},
       :zen/desc "A name associated with the contact person"},
      :organization
      {:confirms #{Reference},
       :zen/desc "Organization that is associated with the contact"},
      :telecom
      {:type zen/vector,
       :every
       {:confirms #{ContactPoint},
        :zen/desc "A contact detail for the person"}},
      :address
      {:confirms #{Address},
       :zen/desc "Address for the contact person"}}}}}},
 PaymentNotice
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "PaymentNotice",
  :require #{:amount :payment :recipient :created :status},
  :type zen/map,
  :zen/desc
  "This resource provides the status of the payment for goods and services rendered, and the request and response resource references.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/PaymentNotice",
  :keys
  {:response {:confirms #{Reference}, :zen/desc "Response reference"},
   :amount
   {:confirms #{Money}, :zen/desc "Monetary amount of the payment"},
   :request {:confirms #{Reference}, :zen/desc "Request reference"},
   :payment {:confirms #{Reference}, :zen/desc "Payment reference"},
   :recipient
   {:confirms #{Reference}, :zen/desc "Party being notified"},
   :created
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "Creation date"},
   :resourceType {:type zen/string, :const {:value "PaymentNotice"}},
   :paymentStatus
   {:confirms #{CodeableConcept},
    :zen/desc "Issued or cleared Status of the payment"},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc "active | cancelled | draft | entered-in-error"},
   :payee {:confirms #{Reference}, :zen/desc "Party being paid"},
   :paymentDate
   {:confirms #{date},
    :type zen/date,
    :zen/desc "Payment or clearing date"},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier},
     :zen/desc "Business Identifier for the payment noctice"}},
   :provider
   {:confirms #{Reference}, :zen/desc "Responsible practitioner"}}},
 PaymentReconciliation
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "PaymentReconciliation",
  :require #{:paymentAmount :created :status :paymentDate},
  :type zen/map,
  :zen/desc
  "This resource provides the details including amount of a payment and allocates the payment items being paid.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/PaymentReconciliation",
  :keys
  {:requestor
   {:confirms #{Reference}, :zen/desc "Responsible practitioner"},
   :request
   {:confirms #{Reference},
    :zen/desc "Reference to requesting resource"},
   :paymentAmount
   {:confirms #{Money}, :zen/desc "Total amount of Payment"},
   :processNote
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc "Note concerning processing",
     :keys
     {:type
      {:confirms #{code},
       :type zen/string,
       :zen/desc "display | print | printoper"},
      :text
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Note explanatory text"}}}},
   :created
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "Creation date"},
   :outcome
   {:confirms #{code},
    :type zen/string,
    :zen/desc "queued | complete | error | partial"},
   :resourceType
   {:type zen/string, :const {:value "PaymentReconciliation"}},
   :disposition
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Disposition message"},
   :paymentIdentifier
   {:confirms #{Identifier},
    :zen/desc "Business identifier for the payment"},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc "active | cancelled | draft | entered-in-error"},
   :paymentDate
   {:confirms #{date},
    :type zen/date,
    :zen/desc "When payment issued"},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier},
     :zen/desc "Business Identifier for a payment reconciliation"}},
   :period {:confirms #{Period}, :zen/desc "Period covered"},
   :paymentIssuer
   {:confirms #{Reference}, :zen/desc "Party generating payment"},
   :formCode
   {:confirms #{CodeableConcept}, :zen/desc "Printed form identifier"},
   :detail
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:type},
     :type zen/map,
     :zen/desc "Settlement particulars",
     :keys
     {:response
      {:confirms #{Reference},
       :zen/desc "Response committing to a payment"},
      :amount
      {:confirms #{Money},
       :zen/desc "Amount allocated to this payable"},
      :date
      {:confirms #{date},
       :type zen/date,
       :zen/desc "Date of commitment to pay"},
      :request
      {:confirms #{Reference},
       :zen/desc "Request giving rise to the payment"},
      :type
      {:confirms #{CodeableConcept}, :zen/desc "Category of payment"},
      :responsible
      {:confirms #{Reference}, :zen/desc "Contact for the response"},
      :payee
      {:confirms #{Reference}, :zen/desc "Recipient of the payment"},
      :predecessor
      {:confirms #{Identifier},
       :zen/desc "Business identifier of the prior payment detail"},
      :identifier
      {:confirms #{Identifier},
       :zen/desc "Business identifier of the payment detail"},
      :submitter
      {:confirms #{Reference},
       :zen/desc "Submitter of the request"}}}}}},
 Person
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "Person",
  :type zen/map,
  :zen/desc
  "Demographics and administrative information about a person independent of a specific health-related context.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/Person",
  :keys
  {:address
   {:type zen/vector,
    :every
    {:confirms #{Address},
     :zen/desc "One or more addresses for the person"}},
   :managingOrganization
   {:confirms #{Reference},
    :zen/desc
    "The organization that is the custodian of the person record"},
   :name
   {:type zen/vector,
    :every
    {:confirms #{HumanName},
     :zen/desc "A name associated with the person"}},
   :birthDate
   {:confirms #{date},
    :type zen/date,
    :zen/desc "The date on which the person was born"},
   :resourceType {:type zen/string, :const {:value "Person"}},
   :photo {:confirms #{Attachment}, :zen/desc "Image of the person"},
   :link
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:target},
     :type zen/map,
     :zen/desc
     "Link to a resource that concerns the same actual person",
     :keys
     {:target
      {:confirms #{Reference},
       :zen/desc
       "The resource to which this actual person is associated"},
      :assurance
      {:confirms #{code},
       :type zen/string,
       :zen/desc "level1 | level2 | level3 | level4"}}}},
   :active
   {:confirms #{boolean},
    :type zen/boolean,
    :zen/desc "This person's record is in active use"},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier},
     :zen/desc "A human identifier for this person"}},
   :telecom
   {:type zen/vector,
    :every
    {:confirms #{ContactPoint},
     :zen/desc "A contact detail for the person"}},
   :gender
   {:confirms #{code},
    :type zen/string,
    :zen/desc "male | female | other | unknown"}}},
 PlanDefinition
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "PlanDefinition",
  :require #{:status},
  :type zen/map,
  :zen/desc
  "This resource allows for the definition of various types of plans as a sharable, consumable, and executable artifact. The resource is general enough to support the description of a broad range of clinical artifacts such as clinical decision support rules, order sets and protocols.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/PlanDefinition",
  :keys
  {:description
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc "Natural language description of the plan definition"},
   :date
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "Date last changed"},
   :endorser
   {:type zen/vector,
    :every
    {:confirms #{ContactDetail},
     :zen/desc "Who endorsed the content"}},
   :publisher
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name of the publisher (organization or individual)"},
   :approvalDate
   {:confirms #{date},
    :type zen/date,
    :zen/desc "When the plan definition was approved by publisher"},
   :jurisdiction
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc
     "Intended jurisdiction for plan definition (if applicable)"}},
   :purpose
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc "Why this plan definition is defined"},
   :name
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name for this plan definition (computer friendly)"},
   :useContext
   {:type zen/vector,
    :every
    {:confirms #{UsageContext},
     :zen/desc "The context that the content is intended to support"}},
   :goal
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:description},
     :type zen/map,
     :zen/desc "What the plan is trying to accomplish",
     :keys
     {:addresses
      {:type zen/vector,
       :every
       {:confirms #{CodeableConcept},
        :zen/desc "What does the goal address"}},
      :target
      {:type zen/vector,
       :every
       {:confirms #{BackboneElement},
        :type zen/map,
        :zen/desc "Target outcome for the goal",
        :keys
        {:due {:confirms #{Duration}, :zen/desc "Reach goal within"},
         :detail
         {:type zen/map,
          :zen/desc "The target value to be achieved",
          :keys
          {:Quantity {:confirms #{Quantity}},
           :Range {:confirms #{Range}},
           :CodeableConcept {:confirms #{CodeableConcept}}},
          :exclusive-keys #{#{:Range :CodeableConcept :Quantity}}},
         :measure
         {:confirms #{CodeableConcept},
          :zen/desc "The parameter whose value is to be tracked"}}}},
      :description
      {:confirms #{CodeableConcept},
       :zen/desc "Code or text describing the goal"},
      :priority
      {:confirms #{CodeableConcept},
       :zen/desc "high-priority | medium-priority | low-priority"},
      :category
      {:confirms #{CodeableConcept},
       :zen/desc "E.g. Treatment, dietary, behavioral"},
      :start
      {:confirms #{CodeableConcept},
       :zen/desc "When goal pursuit begins"},
      :documentation
      {:type zen/vector,
       :every
       {:confirms #{RelatedArtifact},
        :zen/desc "Supporting documentation for the goal"}}}}},
   :copyright
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc "Use and/or publishing restrictions"},
   :type
   {:confirms #{CodeableConcept},
    :zen/desc
    "order-set | clinical-protocol | eca-rule | workflow-definition"},
   :experimental
   {:confirms #{boolean},
    :type zen/boolean,
    :zen/desc "For testing purposes, not real usage"},
   :topic
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "E.g. Education, Treatment, Assessment"}},
   :resourceType {:type zen/string, :const {:value "PlanDefinition"}},
   :title
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name for this plan definition (human friendly)"},
   :library
   {:type zen/vector,
    :every
    {:confirms #{canonical},
     :type zen/string,
     :zen/desc "Logic used by the plan definition"}},
   :author
   {:type zen/vector,
    :every
    {:confirms #{ContactDetail},
     :zen/desc "Who authored the content"}},
   :usage
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Describes the clinical usage of the plan"},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc "draft | active | retired | unknown"},
   :subtitle
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Subordinate title of the plan definition"},
   :url
   {:confirms #{uri},
    :type zen/string,
    :zen/desc
    "Canonical identifier for this plan definition, represented as a URI (globally unique)"},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier},
     :zen/desc "Additional identifier for the plan definition"}},
   :lastReviewDate
   {:confirms #{date},
    :type zen/date,
    :zen/desc "When the plan definition was last reviewed"},
   :editor
   {:type zen/vector,
    :every
    {:confirms #{ContactDetail}, :zen/desc "Who edited the content"}},
   :action
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc "Action defined by the plan",
     :keys
     {:description
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Brief description of the action"},
      :definition
      {:type zen/map,
       :zen/desc "Description of the activity to be performed",
       :keys
       {:canonical {:confirms #{canonical}, :type zen/string},
        :uri {:confirms #{uri}, :type zen/string}},
       :exclusive-keys #{#{:canonical :uri}}},
      :transform
      {:confirms #{canonical},
       :type zen/string,
       :zen/desc "Transform to apply the template"},
      :textEquivalent
      {:confirms #{string},
       :type zen/string,
       :zen/desc
       "Static text equivalent of the action, used if the dynamic aspects cannot be interpreted by the receiving system"},
      :goalId
      {:type zen/vector,
       :every
       {:confirms #{id},
        :type zen/string,
        :zen/desc "What goals this action supports"}},
      :relatedAction
      {:type zen/vector,
       :every
       {:confirms #{BackboneElement},
        :require #{:relationship :actionId},
        :type zen/map,
        :zen/desc "Relationship to another action",
        :keys
        {:relationship
         {:confirms #{code},
          :type zen/string,
          :zen/desc
          "before-start | before | before-end | concurrent-with-start | concurrent | concurrent-with-end | after-start | after | after-end"},
         :offset
         {:type zen/map,
          :zen/desc "Time offset for the relationship",
          :keys
          {:Duration {:confirms #{Duration}},
           :Range {:confirms #{Range}}},
          :exclusive-keys #{#{:Range :Duration}}},
         :actionId
         {:confirms #{id},
          :type zen/string,
          :zen/desc "What action is this related to"}}}},
      :type
      {:confirms #{CodeableConcept},
       :zen/desc "create | update | remove | fire-event"},
      :participant
      {:type zen/vector,
       :every
       {:confirms #{BackboneElement},
        :require #{:type},
        :type zen/map,
        :zen/desc "Who should participate in the action",
        :keys
        {:role
         {:confirms #{CodeableConcept},
          :zen/desc "E.g. Nurse, Surgeon, Parent"},
         :type
         {:confirms #{code},
          :type zen/string,
          :zen/desc
          "patient | practitioner | related-person | device"}}}},
      :output
      {:type zen/vector,
       :every
       {:confirms #{DataRequirement},
        :zen/desc "Output data definition"}},
      :title
      {:confirms #{string},
       :type zen/string,
       :zen/desc "User-visible title"},
      :documentation
      {:type zen/vector,
       :every
       {:confirms #{RelatedArtifact},
        :zen/desc
        "Supporting documentation for the intended performer of the action"}},
      :prefix
      {:confirms #{string},
       :type zen/string,
       :zen/desc "User-visible prefix for the action (e.g. 1. or A.)"},
      :selectionBehavior
      {:confirms #{code},
       :type zen/string,
       :zen/desc
       "any | all | all-or-none | exactly-one | at-most-one | one-or-more"},
      :reason
      {:type zen/vector,
       :every
       {:confirms #{CodeableConcept},
        :zen/desc "Why the action should be performed"}},
      :priority
      {:confirms #{code},
       :type zen/string,
       :zen/desc "routine | urgent | asap | stat"},
      :requiredBehavior
      {:confirms #{code},
       :type zen/string,
       :zen/desc "must | could | must-unless-documented"},
      :condition
      {:type zen/vector,
       :every
       {:confirms #{BackboneElement},
        :require #{:kind},
        :type zen/map,
        :zen/desc "Whether or not the action is applicable",
        :keys
        {:expression
         {:confirms #{Expression},
          :zen/desc "Boolean-valued expression"},
         :kind
         {:confirms #{code},
          :type zen/string,
          :zen/desc "applicability | start | stop"}}}},
      :timing
      {:type zen/map,
       :zen/desc "When the action should take place",
       :keys
       {:dateTime {:confirms #{dateTime}, :type zen/datetime},
        :Age {:confirms #{Age}},
        :Period {:confirms #{Period}},
        :Duration {:confirms #{Duration}},
        :Range {:confirms #{Range}},
        :Timing {:confirms #{Timing}}},
       :exclusive-keys
       #{#{:dateTime :Range :Period :Timing :Duration :Age}}},
      :groupingBehavior
      {:confirms #{code},
       :type zen/string,
       :zen/desc "visual-group | logical-group | sentence-group"},
      :dynamicValue
      {:type zen/vector,
       :every
       {:confirms #{BackboneElement},
        :type zen/map,
        :zen/desc "Dynamic aspects of the definition",
        :keys
        {:expression
         {:confirms #{Expression},
          :zen/desc
          "An expression that provides the dynamic value for the customization"},
         :path
         {:confirms #{string},
          :type zen/string,
          :zen/desc
          "The path to the element to be set dynamically"}}}},
      :code
      {:type zen/vector,
       :every
       {:confirms #{CodeableConcept},
        :zen/desc
        "Code representing the meaning of the action or sub-actions"}},
      :action {:type zen/vector, :every #:zen{:desc "A sub-action"}},
      :precheckBehavior
      {:confirms #{code}, :type zen/string, :zen/desc "yes | no"},
      :input
      {:type zen/vector,
       :every
       {:confirms #{DataRequirement},
        :zen/desc "Input data requirements"}},
      :trigger
      {:type zen/vector,
       :every
       {:confirms #{TriggerDefinition},
        :zen/desc "When the action should be triggered"}},
      :subject
      {:type zen/map,
       :zen/desc "Type of individual the action is focused on",
       :keys
       {:CodeableConcept {:confirms #{CodeableConcept}},
        :Reference {:confirms #{Reference}}},
       :exclusive-keys #{#{:CodeableConcept :Reference}}},
      :cardinalityBehavior
      {:confirms #{code},
       :type zen/string,
       :zen/desc "single | multiple"}}}},
   :reviewer
   {:type zen/vector,
    :every
    {:confirms #{ContactDetail},
     :zen/desc "Who reviewed the content"}},
   :version
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Business version of the plan definition"},
   :relatedArtifact
   {:type zen/vector,
    :every
    {:confirms #{RelatedArtifact},
     :zen/desc "Additional documentation, citations"}},
   :contact
   {:type zen/vector,
    :every
    {:confirms #{ContactDetail},
     :zen/desc "Contact details for the publisher"}},
   :subject
   {:type zen/map,
    :zen/desc "Type of individual the plan definition is focused on",
    :keys
    {:CodeableConcept {:confirms #{CodeableConcept}},
     :Reference {:confirms #{Reference}}},
    :exclusive-keys #{#{:CodeableConcept :Reference}}},
   :effectivePeriod
   {:confirms #{Period},
    :zen/desc "When the plan definition is expected to be used"}}},
 Practitioner
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "Practitioner",
  :type zen/map,
  :zen/desc
  "A person who is directly or indirectly involved in the provisioning of healthcare.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/Practitioner",
  :keys
  {:address
   {:type zen/vector,
    :every
    {:confirms #{Address},
     :zen/desc
     "Address(es) of the practitioner that are not role specific (typically home address)"}},
   :name
   {:type zen/vector,
    :every
    {:confirms #{HumanName},
     :zen/desc "The name(s) associated with the practitioner"}},
   :birthDate
   {:confirms #{date},
    :type zen/date,
    :zen/desc "The date  on which the practitioner was born"},
   :resourceType {:type zen/string, :const {:value "Practitioner"}},
   :photo
   {:type zen/vector,
    :every {:confirms #{Attachment}, :zen/desc "Image of the person"}},
   :active
   {:confirms #{boolean},
    :type zen/boolean,
    :zen/desc "Whether this practitioner's record is in active use"},
   :communication
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc
     "A language the practitioner can use in patient communication"}},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier},
     :zen/desc "An identifier for the person as this agent"}},
   :qualification
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:code},
     :type zen/map,
     :zen/desc
     "Certification, licenses, or training pertaining to the provision of care",
     :keys
     {:issuer
      {:confirms #{Reference},
       :zen/desc
       "Organization that regulates and issues the qualification"},
      :identifier
      {:type zen/vector,
       :every
       {:confirms #{Identifier},
        :zen/desc
        "An identifier for this qualification for the practitioner"}},
      :period
      {:confirms #{Period},
       :zen/desc "Period during which the qualification is valid"},
      :code
      {:confirms #{CodeableConcept},
       :zen/desc "Coded representation of the qualification"}}}},
   :telecom
   {:type zen/vector,
    :every
    {:confirms #{ContactPoint},
     :zen/desc
     "A contact detail for the practitioner (that apply to all roles)"}},
   :gender
   {:confirms #{code},
    :type zen/string,
    :zen/desc "male | female | other | unknown"}}},
 PractitionerRole
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "PractitionerRole",
  :type zen/map,
  :zen/desc
  "A specific set of Roles/Locations/specialties/services that a practitioner may perform at an organization for a period of time.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/PractitionerRole",
  :keys
  {:availableTime
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc "Times the Service Site is available",
     :keys
     {:availableStartTime
      {:confirms #{time},
       :type zen/string,
       :zen/desc "Opening time of day (ignored if allDay = true)"},
      :availableEndTime
      {:confirms #{time},
       :type zen/string,
       :zen/desc "Closing time of day (ignored if allDay = true)"},
      :daysOfWeek
      {:type zen/vector,
       :every
       {:confirms #{code},
        :type zen/string,
        :zen/desc "mon | tue | wed | thu | fri | sat | sun"}},
      :allDay
      {:confirms #{boolean},
       :type zen/boolean,
       :zen/desc "Always available? e.g. 24 hour service"}}}},
   :specialty
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "Specific specialty of the practitioner"}},
   :notAvailable
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:description},
     :type zen/map,
     :zen/desc "Not available during this time due to provided reason",
     :keys
     {:description
      {:confirms #{string},
       :type zen/string,
       :zen/desc
       "Reason presented to the user explaining why time not available"},
      :during
      {:confirms #{Period},
       :zen/desc "Service not available from this date"}}}},
   :organization
   {:confirms #{Reference},
    :zen/desc "Organization where the roles are available"},
   :resourceType
   {:type zen/string, :const {:value "PractitionerRole"}},
   :active
   {:confirms #{boolean},
    :type zen/boolean,
    :zen/desc
    "Whether this practitioner role record is in active use"},
   :code
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "Roles which this practitioner may perform"}},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier},
     :zen/desc
     "Business Identifiers that are specific to a role/location"}},
   :availabilityExceptions
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Description of availability exceptions"},
   :practitioner
   {:confirms #{Reference},
    :zen/desc
    "Practitioner that is able to provide the defined services for the organization"},
   :telecom
   {:type zen/vector,
    :every
    {:confirms #{ContactPoint},
     :zen/desc
     "Contact details that are specific to the role/location/service"}},
   :period
   {:confirms #{Period},
    :zen/desc
    "The period during which the practitioner is authorized to perform in these role(s)"},
   :location
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc
     "The location(s) at which this practitioner provides care"}},
   :endpoint
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc
     "Technical endpoints providing access to services operated for the practitioner with this role"}},
   :healthcareService
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc
     "The list of healthcare services that this worker provides for this role's Organization/Location(s)"}}}},
 Procedure
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "Procedure",
  :require #{:status :subject},
  :type zen/map,
  :zen/desc
  "An action that is or was performed on or for a patient. This can be a physical intervention like an operation, or less invasive like long term services, counseling, or hypnotherapy.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/Procedure",
  :keys
  {:category
   {:confirms #{CodeableConcept},
    :zen/desc "Classification of the procedure"},
   :report
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "Any report resulting from the procedure"}},
   :usedCode
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "Coded items used during the procedure"}},
   :usedReference
   {:type zen/vector,
    :every
    {:confirms #{Reference}, :zen/desc "Items used during procedure"}},
   :instantiatesCanonical
   {:type zen/vector,
    :every
    {:confirms #{canonical},
     :type zen/string,
     :zen/desc "Instantiates FHIR protocol or definition"}},
   :instantiatesUri
   {:type zen/vector,
    :every
    {:confirms #{uri},
     :type zen/string,
     :zen/desc "Instantiates external protocol or definition"}},
   :focalDevice
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:manipulated},
     :type zen/map,
     :zen/desc "Manipulated, implanted, or removed device",
     :keys
     {:action
      {:confirms #{CodeableConcept},
       :zen/desc "Kind of change to device"},
      :manipulated
      {:confirms #{Reference}, :zen/desc "Device that was changed"}}}},
   :encounter
   {:confirms #{Reference}, :zen/desc "Encounter created as part of"},
   :complicationDetail
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "A condition that is a result of the procedure"}},
   :reasonCode
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "Coded reason procedure performed"}},
   :statusReason
   {:confirms #{CodeableConcept},
    :zen/desc "Reason for current status"},
   :performed
   {:type zen/map,
    :zen/desc "When the procedure was performed",
    :keys
    {:dateTime {:confirms #{dateTime}, :type zen/datetime},
     :Period {:confirms #{Period}},
     :string {:confirms #{string}, :type zen/string},
     :Age {:confirms #{Age}},
     :Range {:confirms #{Range}}},
    :exclusive-keys #{#{:string :dateTime :Range :Period :Age}}},
   :outcome
   {:confirms #{CodeableConcept}, :zen/desc "The result of procedure"},
   :resourceType {:type zen/string, :const {:value "Procedure"}},
   :asserter
   {:confirms #{Reference},
    :zen/desc "Person who asserts this procedure"},
   :note
   {:type zen/vector,
    :every
    {:confirms #{Annotation},
     :zen/desc "Additional information about the procedure"}},
   :complication
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "Complication following the procedure"}},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc
    "preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown"},
   :recorder
   {:confirms #{Reference}, :zen/desc "Who recorded the procedure"},
   :code
   {:confirms #{CodeableConcept},
    :zen/desc "Identification of the procedure"},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier},
     :zen/desc "External Identifiers for this procedure"}},
   :bodySite
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept}, :zen/desc "Target body sites"}},
   :basedOn
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "A request for this procedure"}},
   :partOf
   {:type zen/vector,
    :every
    {:confirms #{Reference}, :zen/desc "Part of referenced event"}},
   :location
   {:confirms #{Reference}, :zen/desc "Where the procedure happened"},
   :followUp
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "Instructions for follow up"}},
   :subject
   {:confirms #{Reference},
    :zen/desc "Who the procedure was performed on"},
   :performer
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:actor},
     :type zen/map,
     :zen/desc "The people who performed the procedure",
     :keys
     {:onBehalfOf
      {:confirms #{Reference},
       :zen/desc
       "Organization the device or practitioner was acting for"},
      :function
      {:confirms #{CodeableConcept}, :zen/desc "Type of performance"},
      :actor
      {:confirms #{Reference},
       :zen/desc "The reference to the practitioner"}}}},
   :reasonReference
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc
     "The justification that the procedure was performed"}}}},
 Provenance
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "Provenance",
  :require #{:recorded :agent :target},
  :type zen/map,
  :zen/desc
  "Provenance of a resource is a record that describes entities and processes involved in producing and delivering or otherwise influencing that resource. Provenance provides a critical foundation for assessing authenticity, enabling trust, and allowing reproducibility. Provenance assertions are a form of contextual metadata and can themselves become important records with their own provenance. Provenance statement indicates clinical significance in terms of confidence in authenticity, reliability, and trustworthiness, integrity, and stage in lifecycle (e.g. Document Completion - has the artifact been legally authenticated), all of which may impact security, privacy, and trust policies.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/Provenance",
  :keys
  {:occurred
   {:type zen/map,
    :zen/desc "When the activity occurred",
    :keys
    {:Period {:confirms #{Period}},
     :dateTime {:confirms #{dateTime}, :type zen/datetime}},
    :exclusive-keys #{#{:dateTime :Period}}},
   :signature
   {:type zen/vector,
    :every {:confirms #{Signature}, :zen/desc "Signature on target"}},
   :resourceType {:type zen/string, :const {:value "Provenance"}},
   :recorded
   {:confirms #{instant},
    :type zen/string,
    :zen/desc "When the activity was recorded / updated"},
   :agent
   {:minItems 1,
    :type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:who},
     :type zen/map,
     :zen/desc "Actor involved",
     :keys
     {:who {:confirms #{Reference}, :zen/desc "Who participated"},
      :type
      {:confirms #{CodeableConcept},
       :zen/desc "How the agent participated"},
      :onBehalfOf
      {:confirms #{Reference},
       :zen/desc "Who the agent is representing"},
      :role
      {:type zen/vector,
       :every
       {:confirms #{CodeableConcept},
        :zen/desc "What the agents role was"}}}}},
   :policy
   {:type zen/vector,
    :every
    {:confirms #{uri},
     :type zen/string,
     :zen/desc "Policy or plan the activity was defined by"}},
   :reason
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "Reason the activity is occurring"}},
   :activity
   {:confirms #{CodeableConcept}, :zen/desc "Activity that occurred"},
   :target
   {:minItems 1,
    :type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "Target Reference(s) (usually version specific)"}},
   :location
   {:confirms #{Reference},
    :zen/desc "Where the activity occurred, if relevant"},
   :entity
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:role :what},
     :type zen/map,
     :zen/desc "An entity used in this activity",
     :keys
     {:what {:confirms #{Reference}, :zen/desc "Identity of entity"},
      :agent
      {:type zen/vector,
       :every #:zen{:desc "Entity is attributed to this agent"}},
      :role
      {:confirms #{code},
       :type zen/string,
       :zen/desc
       "derivation | revision | quotation | source | removal"}}}}}},
 Questionnaire
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "Questionnaire",
  :require #{:status},
  :type zen/map,
  :zen/desc
  "A structured set of questions intended to guide the collection of answers from end-users. Questionnaires provide detailed control over order, presentation, phraseology and grouping to allow coherent, consistent data collection.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/Questionnaire",
  :keys
  {:description
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc "Natural language description of the questionnaire"},
   :subjectType
   {:type zen/vector,
    :every
    {:confirms #{code},
     :type zen/string,
     :zen/desc
     "Resource that can be subject of QuestionnaireResponse"}},
   :date
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "Date last changed"},
   :publisher
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name of the publisher (organization or individual)"},
   :approvalDate
   {:confirms #{date},
    :type zen/date,
    :zen/desc "When the questionnaire was approved by publisher"},
   :jurisdiction
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc
     "Intended jurisdiction for questionnaire (if applicable)"}},
   :derivedFrom
   {:type zen/vector,
    :every
    {:confirms #{canonical},
     :type zen/string,
     :zen/desc "Instantiates protocol or definition"}},
   :purpose
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc "Why this questionnaire is defined"},
   :name
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name for this questionnaire (computer friendly)"},
   :item
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:linkId :type},
     :type zen/map,
     :zen/desc "Questions and sections within the Questionnaire",
     :keys
     {:enableBehavior
      {:confirms #{code}, :type zen/string, :zen/desc "all | any"},
      :definition
      {:confirms #{uri},
       :type zen/string,
       :zen/desc "ElementDefinition - details for the item"},
      :linkId
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Unique id for item in questionnaire"},
      :repeats
      {:confirms #{boolean},
       :type zen/boolean,
       :zen/desc "Whether the item may repeat"},
      :item
      {:type zen/vector,
       :every #:zen{:desc "Nested questionnaire items"}},
      :type
      {:confirms #{code},
       :type zen/string,
       :zen/desc
       "group | display | boolean | decimal | integer | date | dateTime +"},
      :enableWhen
      {:type zen/vector,
       :every
       {:confirms #{BackboneElement},
        :require #{:question :answer :operator},
        :type zen/map,
        :zen/desc "Only allow data when",
        :keys
        {:question
         {:confirms #{string},
          :type zen/string,
          :zen/desc
          "Question that determines whether item is enabled"},
         :answer
         {:type zen/map,
          :zen/desc "Value for question comparison based on operator",
          :keys
          {:date {:confirms #{date}, :type zen/date},
           :time {:confirms #{time}, :type zen/string},
           :string {:confirms #{string}, :type zen/string},
           :dateTime {:confirms #{dateTime}, :type zen/datetime},
           :integer {:confirms #{integer}, :type zen/integer},
           :decimal {:confirms #{decimal}, :type zen/number},
           :Coding {:confirms #{Coding}},
           :Quantity {:confirms #{Quantity}},
           :boolean {:confirms #{boolean}, :type zen/boolean},
           :Reference {:confirms #{Reference}}},
          :exclusive-keys
          #{#{:date
              :time
              :string
              :dateTime
              :integer
              :decimal
              :Coding
              :Quantity
              :boolean
              :Reference}}},
         :operator
         {:confirms #{code},
          :type zen/string,
          :zen/desc "exists | = | != | > | < | >= | <="}}}},
      :answerOption
      {:type zen/vector,
       :every
       {:confirms #{BackboneElement},
        :require #{:value},
        :type zen/map,
        :zen/desc "Permitted answer",
        :keys
        {:initialSelected
         {:confirms #{boolean},
          :type zen/boolean,
          :zen/desc "Whether option is selected by default"},
         :value
         {:type zen/map,
          :zen/desc "Answer value",
          :keys
          {:integer {:confirms #{integer}, :type zen/integer},
           :date {:confirms #{date}, :type zen/date},
           :time {:confirms #{time}, :type zen/string},
           :string {:confirms #{string}, :type zen/string},
           :Coding {:confirms #{Coding}},
           :Reference {:confirms #{Reference}}},
          :exclusive-keys
          #{#{:date :time :string :integer :Coding :Reference}}}}}},
      :prefix
      {:confirms #{string},
       :type zen/string,
       :zen/desc "E.g. \"1(a)\", \"2.5.3\""},
      :readOnly
      {:confirms #{boolean},
       :type zen/boolean,
       :zen/desc "Don't allow human editing"},
      :answerValueSet
      {:confirms #{canonical},
       :type zen/string,
       :zen/desc "Valueset containing permitted answers"},
      :code
      {:type zen/vector,
       :every
       {:confirms #{Coding},
        :zen/desc
        "Corresponding concept for this item in a terminology"}},
      :initial
      {:type zen/vector,
       :every
       {:confirms #{BackboneElement},
        :require #{:value},
        :type zen/map,
        :zen/desc "Initial value(s) when item is first rendered",
        :keys
        {:value
         {:type zen/map,
          :zen/desc "Actual value for initializing the question",
          :keys
          {:date {:confirms #{date}, :type zen/date},
           :time {:confirms #{time}, :type zen/string},
           :string {:confirms #{string}, :type zen/string},
           :dateTime {:confirms #{dateTime}, :type zen/datetime},
           :integer {:confirms #{integer}, :type zen/integer},
           :decimal {:confirms #{decimal}, :type zen/number},
           :Attachment {:confirms #{Attachment}},
           :Coding {:confirms #{Coding}},
           :uri {:confirms #{uri}, :type zen/string},
           :Quantity {:confirms #{Quantity}},
           :boolean {:confirms #{boolean}, :type zen/boolean},
           :Reference {:confirms #{Reference}}},
          :exclusive-keys
          #{#{:date
              :time
              :string
              :dateTime
              :integer
              :decimal
              :Attachment
              :Coding
              :uri
              :Quantity
              :boolean
              :Reference}}}}}},
      :maxLength
      {:confirms #{integer},
       :type zen/integer,
       :zen/desc "No more than this many characters"},
      :required
      {:confirms #{boolean},
       :type zen/boolean,
       :zen/desc "Whether the item must be included in data results"},
      :text
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Primary text for the item"}}}},
   :useContext
   {:type zen/vector,
    :every
    {:confirms #{UsageContext},
     :zen/desc "The context that the content is intended to support"}},
   :copyright
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc "Use and/or publishing restrictions"},
   :experimental
   {:confirms #{boolean},
    :type zen/boolean,
    :zen/desc "For testing purposes, not real usage"},
   :resourceType {:type zen/string, :const {:value "Questionnaire"}},
   :title
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name for this questionnaire (human friendly)"},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc "draft | active | retired | unknown"},
   :url
   {:confirms #{uri},
    :type zen/string,
    :zen/desc
    "Canonical identifier for this questionnaire, represented as a URI (globally unique)"},
   :code
   {:type zen/vector,
    :every
    {:confirms #{Coding},
     :zen/desc "Concept that represents the overall questionnaire"}},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier},
     :zen/desc "Additional identifier for the questionnaire"}},
   :lastReviewDate
   {:confirms #{date},
    :type zen/date,
    :zen/desc "When the questionnaire was last reviewed"},
   :version
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Business version of the questionnaire"},
   :contact
   {:type zen/vector,
    :every
    {:confirms #{ContactDetail},
     :zen/desc "Contact details for the publisher"}},
   :effectivePeriod
   {:confirms #{Period},
    :zen/desc "When the questionnaire is expected to be used"}}},
 QuestionnaireResponse
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "QuestionnaireResponse",
  :require #{:status},
  :type zen/map,
  :zen/desc
  "A structured set of questions and their answers. The questions are ordered and grouped into coherent subsets, corresponding to the structure of the grouping of the questionnaire being responded to.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/QuestionnaireResponse",
  :keys
  {:questionnaire
   {:confirms #{canonical},
    :type zen/string,
    :zen/desc "Form being answered"},
   :encounter
   {:confirms #{Reference}, :zen/desc "Encounter created as part of"},
   :item
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:linkId},
     :type zen/map,
     :zen/desc "Groups and questions",
     :keys
     {:text
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Name for group or question text"},
      :linkId
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Pointer to specific item from Questionnaire"},
      :item
      {:type zen/vector,
       :every #:zen{:desc "Nested questionnaire response items"}},
      :answer
      {:type zen/vector,
       :every
       {:confirms #{BackboneElement},
        :type zen/map,
        :zen/desc "The response(s) to the question",
        :keys
        {:value
         {:type zen/map,
          :zen/desc "Single-valued answer to the question",
          :keys
          {:date {:confirms #{date}, :type zen/date},
           :time {:confirms #{time}, :type zen/string},
           :string {:confirms #{string}, :type zen/string},
           :dateTime {:confirms #{dateTime}, :type zen/datetime},
           :integer {:confirms #{integer}, :type zen/integer},
           :decimal {:confirms #{decimal}, :type zen/number},
           :Attachment {:confirms #{Attachment}},
           :Coding {:confirms #{Coding}},
           :uri {:confirms #{uri}, :type zen/string},
           :Quantity {:confirms #{Quantity}},
           :boolean {:confirms #{boolean}, :type zen/boolean},
           :Reference {:confirms #{Reference}}},
          :exclusive-keys
          #{#{:date
              :time
              :string
              :dateTime
              :integer
              :decimal
              :Attachment
              :Coding
              :uri
              :Quantity
              :boolean
              :Reference}}},
         :item
         {:type zen/vector,
          :every #:zen{:desc "Nested groups and questions"}}}}},
      :definition
      {:confirms #{uri},
       :type zen/string,
       :zen/desc "ElementDefinition - details for the item"}}}},
   :resourceType
   {:type zen/string, :const {:value "QuestionnaireResponse"}},
   :source
   {:confirms #{Reference},
    :zen/desc "The person who answered the questions"},
   :author
   {:confirms #{Reference},
    :zen/desc "Person who received and recorded the answers"},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc
    "in-progress | completed | amended | entered-in-error | stopped"},
   :identifier
   {:confirms #{Identifier},
    :zen/desc "Unique id for this set of answers"},
   :basedOn
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "Request fulfilled by this QuestionnaireResponse"}},
   :authored
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "Date the answers were gathered"},
   :partOf
   {:type zen/vector,
    :every {:confirms #{Reference}, :zen/desc "Part of this action"}},
   :subject
   {:confirms #{Reference},
    :zen/desc "The subject of the questions"}}},
 RelatedPerson
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "RelatedPerson",
  :require #{:patient},
  :type zen/map,
  :zen/desc
  "Information about a person that is involved in the care for a patient, but who is not the target of healthcare, nor has a formal responsibility in the care process.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/RelatedPerson",
  :keys
  {:patient
   {:confirms #{Reference},
    :zen/desc "The patient this person is related to"},
   :address
   {:type zen/vector,
    :every
    {:confirms #{Address},
     :zen/desc
     "Address where the related person can be contacted or visited"}},
   :name
   {:type zen/vector,
    :every
    {:confirms #{HumanName},
     :zen/desc "A name associated with the person"}},
   :birthDate
   {:confirms #{date},
    :type zen/date,
    :zen/desc "The date on which the related person was born"},
   :relationship
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "The nature of the relationship"}},
   :resourceType {:type zen/string, :const {:value "RelatedPerson"}},
   :photo
   {:type zen/vector,
    :every {:confirms #{Attachment}, :zen/desc "Image of the person"}},
   :active
   {:confirms #{boolean},
    :type zen/boolean,
    :zen/desc "Whether this related person's record is in active use"},
   :communication
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:language},
     :type zen/map,
     :zen/desc
     "A language which may be used to communicate with about the patient's health",
     :keys
     {:language
      {:confirms #{CodeableConcept},
       :zen/desc
       "The language which can be used to communicate with the patient about his or her health"},
      :preferred
      {:confirms #{boolean},
       :type zen/boolean,
       :zen/desc "Language preference indicator"}}}},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier},
     :zen/desc "A human identifier for this person"}},
   :telecom
   {:type zen/vector,
    :every
    {:confirms #{ContactPoint},
     :zen/desc "A contact detail for the person"}},
   :gender
   {:confirms #{code},
    :type zen/string,
    :zen/desc "male | female | other | unknown"},
   :period
   {:confirms #{Period},
    :zen/desc
    "Period of time that this relationship is considered valid"}}},
 RequestGroup
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "RequestGroup",
  :require #{:status :intent},
  :type zen/map,
  :zen/desc
  "A group of related requests that can be used to capture intended activities that have inter-dependencies such as \"give this medication after that one\".",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/RequestGroup",
  :keys
  {:instantiatesCanonical
   {:type zen/vector,
    :every
    {:confirms #{canonical},
     :type zen/string,
     :zen/desc "Instantiates FHIR protocol or definition"}},
   :instantiatesUri
   {:type zen/vector,
    :every
    {:confirms #{uri},
     :type zen/string,
     :zen/desc "Instantiates external protocol or definition"}},
   :encounter {:confirms #{Reference}, :zen/desc "Created as part of"},
   :reasonCode
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "Why the request group is needed"}},
   :authoredOn
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "When the request group was authored"},
   :resourceType {:type zen/string, :const {:value "RequestGroup"}},
   :note
   {:type zen/vector,
    :every
    {:confirms #{Annotation},
     :zen/desc "Additional notes about the response"}},
   :author
   {:confirms #{Reference},
    :zen/desc
    "Device or practitioner that authored the request group"},
   :priority
   {:confirms #{code},
    :type zen/string,
    :zen/desc "routine | urgent | asap | stat"},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc
    "draft | active | on-hold | revoked | completed | entered-in-error | unknown"},
   :groupIdentifier
   {:confirms #{Identifier},
    :zen/desc "Composite request this is part of"},
   :code
   {:confirms #{CodeableConcept},
    :zen/desc "What's being requested/ordered"},
   :identifier
   {:type zen/vector,
    :every {:confirms #{Identifier}, :zen/desc "Business identifier"}},
   :intent
   {:confirms #{code},
    :type zen/string,
    :zen/desc
    "proposal | plan | directive | order | original-order | reflex-order | filler-order | instance-order | option"},
   :action
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc "Proposed actions, if any",
     :keys
     {:description
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Short description of the action"},
      :textEquivalent
      {:confirms #{string},
       :type zen/string,
       :zen/desc
       "Static text equivalent of the action, used if the dynamic aspects cannot be interpreted by the receiving system"},
      :relatedAction
      {:type zen/vector,
       :every
       {:confirms #{BackboneElement},
        :require #{:relationship :actionId},
        :type zen/map,
        :zen/desc "Relationship to another action",
        :keys
        {:actionId
         {:confirms #{id},
          :type zen/string,
          :zen/desc "What action this is related to"},
         :offset
         {:type zen/map,
          :zen/desc "Time offset for the relationship",
          :keys
          {:Duration {:confirms #{Duration}},
           :Range {:confirms #{Range}}},
          :exclusive-keys #{#{:Range :Duration}}},
         :relationship
         {:confirms #{code},
          :type zen/string,
          :zen/desc
          "before-start | before | before-end | concurrent-with-start | concurrent | concurrent-with-end | after-start | after | after-end"}}}},
      :type
      {:confirms #{CodeableConcept},
       :zen/desc "create | update | remove | fire-event"},
      :participant
      {:type zen/vector,
       :every
       {:confirms #{Reference},
        :zen/desc "Who should perform the action"}},
      :title
      {:confirms #{string},
       :type zen/string,
       :zen/desc "User-visible title"},
      :documentation
      {:type zen/vector,
       :every
       {:confirms #{RelatedArtifact},
        :zen/desc
        "Supporting documentation for the intended performer of the action"}},
      :prefix
      {:confirms #{string},
       :type zen/string,
       :zen/desc "User-visible prefix for the action (e.g. 1. or A.)"},
      :selectionBehavior
      {:confirms #{code},
       :type zen/string,
       :zen/desc
       "any | all | all-or-none | exactly-one | at-most-one | one-or-more"},
      :priority
      {:confirms #{code},
       :type zen/string,
       :zen/desc "routine | urgent | asap | stat"},
      :requiredBehavior
      {:confirms #{code},
       :type zen/string,
       :zen/desc "must | could | must-unless-documented"},
      :condition
      {:type zen/vector,
       :every
       {:confirms #{BackboneElement},
        :require #{:kind},
        :type zen/map,
        :zen/desc "Whether or not the action is applicable",
        :keys
        {:expression
         {:confirms #{Expression},
          :zen/desc "Boolean-valued expression"},
         :kind
         {:confirms #{code},
          :type zen/string,
          :zen/desc "applicability | start | stop"}}}},
      :resource
      {:confirms #{Reference}, :zen/desc "The target of the action"},
      :timing
      {:type zen/map,
       :zen/desc "When the action should take place",
       :keys
       {:dateTime {:confirms #{dateTime}, :type zen/datetime},
        :Age {:confirms #{Age}},
        :Period {:confirms #{Period}},
        :Duration {:confirms #{Duration}},
        :Range {:confirms #{Range}},
        :Timing {:confirms #{Timing}}},
       :exclusive-keys
       #{#{:dateTime :Range :Period :Timing :Duration :Age}}},
      :groupingBehavior
      {:confirms #{code},
       :type zen/string,
       :zen/desc "visual-group | logical-group | sentence-group"},
      :code
      {:type zen/vector,
       :every
       {:confirms #{CodeableConcept},
        :zen/desc
        "Code representing the meaning of the action or sub-actions"}},
      :action {:type zen/vector, :every #:zen{:desc "Sub action"}},
      :precheckBehavior
      {:confirms #{code}, :type zen/string, :zen/desc "yes | no"},
      :cardinalityBehavior
      {:confirms #{code},
       :type zen/string,
       :zen/desc "single | multiple"}}}},
   :replaces
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "Request(s) replaced by this request"}},
   :basedOn
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "Fulfills plan, proposal, or order"}},
   :subject
   {:confirms #{Reference},
    :zen/desc "Who the request group is about"},
   :reasonReference
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "Why the request group is needed"}}}},
 ResearchDefinition
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "ResearchDefinition",
  :require #{:status :population},
  :type zen/map,
  :zen/desc
  "The ResearchDefinition resource describes the conditional state (population and any exposures being compared within the population) and outcome (if specified) that the knowledge (evidence, assertion, recommendation) is about.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/ResearchDefinition",
  :keys
  {:description
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc
    "Natural language description of the research definition"},
   :exposureAlternative
   {:confirms #{Reference},
    :zen/desc "What alternative exposure state?"},
   :date
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "Date last changed"},
   :endorser
   {:type zen/vector,
    :every
    {:confirms #{ContactDetail},
     :zen/desc "Who endorsed the content"}},
   :publisher
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name of the publisher (organization or individual)"},
   :approvalDate
   {:confirms #{date},
    :type zen/date,
    :zen/desc
    "When the research definition was approved by publisher"},
   :jurisdiction
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc
     "Intended jurisdiction for research definition (if applicable)"}},
   :purpose
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc "Why this research definition is defined"},
   :name
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name for this research definition (computer friendly)"},
   :useContext
   {:type zen/vector,
    :every
    {:confirms #{UsageContext},
     :zen/desc "The context that the content is intended to support"}},
   :copyright
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc "Use and/or publishing restrictions"},
   :experimental
   {:confirms #{boolean},
    :type zen/boolean,
    :zen/desc "For testing purposes, not real usage"},
   :outcome {:confirms #{Reference}, :zen/desc "What outcome?"},
   :topic
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc
     "The category of the ResearchDefinition, such as Education, Treatment, Assessment, etc."}},
   :resourceType
   {:type zen/string, :const {:value "ResearchDefinition"}},
   :title
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name for this research definition (human friendly)"},
   :library
   {:type zen/vector,
    :every
    {:confirms #{canonical},
     :type zen/string,
     :zen/desc "Logic used by the ResearchDefinition"}},
   :author
   {:type zen/vector,
    :every
    {:confirms #{ContactDetail},
     :zen/desc "Who authored the content"}},
   :usage
   {:confirms #{string},
    :type zen/string,
    :zen/desc
    "Describes the clinical usage of the ResearchDefinition"},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc "draft | active | retired | unknown"},
   :subtitle
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Subordinate title of the ResearchDefinition"},
   :population {:confirms #{Reference}, :zen/desc "What population?"},
   :comment
   {:type zen/vector,
    :every
    {:confirms #{string},
     :type zen/string,
     :zen/desc "Used for footnotes or explanatory notes"}},
   :url
   {:confirms #{uri},
    :type zen/string,
    :zen/desc
    "Canonical identifier for this research definition, represented as a URI (globally unique)"},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier},
     :zen/desc "Additional identifier for the research definition"}},
   :lastReviewDate
   {:confirms #{date},
    :type zen/date,
    :zen/desc "When the research definition was last reviewed"},
   :editor
   {:type zen/vector,
    :every
    {:confirms #{ContactDetail}, :zen/desc "Who edited the content"}},
   :reviewer
   {:type zen/vector,
    :every
    {:confirms #{ContactDetail},
     :zen/desc "Who reviewed the content"}},
   :shortTitle
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Title for use in informal contexts"},
   :exposure {:confirms #{Reference}, :zen/desc "What exposure?"},
   :version
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Business version of the research definition"},
   :relatedArtifact
   {:type zen/vector,
    :every
    {:confirms #{RelatedArtifact},
     :zen/desc "Additional documentation, citations, etc."}},
   :contact
   {:type zen/vector,
    :every
    {:confirms #{ContactDetail},
     :zen/desc "Contact details for the publisher"}},
   :subject
   {:type zen/map,
    :zen/desc
    "E.g. Patient, Practitioner, RelatedPerson, Organization, Location, Device",
    :keys
    {:CodeableConcept {:confirms #{CodeableConcept}},
     :Reference {:confirms #{Reference}}},
    :exclusive-keys #{#{:CodeableConcept :Reference}}},
   :effectivePeriod
   {:confirms #{Period},
    :zen/desc "When the research definition is expected to be used"}}},
 ResearchElementDefinition
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "ResearchElementDefinition",
  :require #{:type :characteristic :status},
  :type zen/map,
  :zen/desc
  "The ResearchElementDefinition resource describes a \"PICO\" element that knowledge (evidence, assertion, recommendation) is about.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/ResearchElementDefinition",
  :keys
  {:description
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc
    "Natural language description of the research element definition"},
   :date
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "Date last changed"},
   :endorser
   {:type zen/vector,
    :every
    {:confirms #{ContactDetail},
     :zen/desc "Who endorsed the content"}},
   :publisher
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name of the publisher (organization or individual)"},
   :approvalDate
   {:confirms #{date},
    :type zen/date,
    :zen/desc
    "When the research element definition was approved by publisher"},
   :variableType
   {:confirms #{code},
    :type zen/string,
    :zen/desc "dichotomous | continuous | descriptive"},
   :jurisdiction
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc
     "Intended jurisdiction for research element definition (if applicable)"}},
   :purpose
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc "Why this research element definition is defined"},
   :name
   {:confirms #{string},
    :type zen/string,
    :zen/desc
    "Name for this research element definition (computer friendly)"},
   :useContext
   {:type zen/vector,
    :every
    {:confirms #{UsageContext},
     :zen/desc "The context that the content is intended to support"}},
   :copyright
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc "Use and/or publishing restrictions"},
   :type
   {:confirms #{code},
    :type zen/string,
    :zen/desc "population | exposure | outcome"},
   :experimental
   {:confirms #{boolean},
    :type zen/boolean,
    :zen/desc "For testing purposes, not real usage"},
   :topic
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc
     "The category of the ResearchElementDefinition, such as Education, Treatment, Assessment, etc."}},
   :resourceType
   {:type zen/string, :const {:value "ResearchElementDefinition"}},
   :title
   {:confirms #{string},
    :type zen/string,
    :zen/desc
    "Name for this research element definition (human friendly)"},
   :library
   {:type zen/vector,
    :every
    {:confirms #{canonical},
     :type zen/string,
     :zen/desc "Logic used by the ResearchElementDefinition"}},
   :author
   {:type zen/vector,
    :every
    {:confirms #{ContactDetail},
     :zen/desc "Who authored the content"}},
   :characteristic
   {:minItems 1,
    :type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:definition},
     :type zen/map,
     :zen/desc "What defines the members of the research element",
     :keys
     {:definition
      {:type zen/map,
       :zen/desc "What code or expression defines members?",
       :keys
       {:CodeableConcept {:confirms #{CodeableConcept}},
        :canonical {:confirms #{canonical}, :type zen/string},
        :Expression {:confirms #{Expression}},
        :DataRequirement {:confirms #{DataRequirement}}},
       :exclusive-keys
       #{#{:DataRequirement :Expression :canonical :CodeableConcept}}},
      :exclude
      {:confirms #{boolean},
       :type zen/boolean,
       :zen/desc
       "Whether the characteristic includes or excludes members"},
      :studyEffectiveGroupMeasure
      {:confirms #{code},
       :type zen/string,
       :zen/desc
       "mean | median | mean-of-mean | mean-of-median | median-of-mean | median-of-median"},
      :participantEffectiveGroupMeasure
      {:confirms #{code},
       :type zen/string,
       :zen/desc
       "mean | median | mean-of-mean | mean-of-median | median-of-mean | median-of-median"},
      :studyEffectiveDescription
      {:confirms #{string},
       :type zen/string,
       :zen/desc "What time period does the study cover"},
      :studyEffectiveTimeFromStart
      {:confirms #{Duration},
       :zen/desc "Observation time from study start"},
      :unitOfMeasure
      {:confirms #{CodeableConcept},
       :zen/desc "What unit is the outcome described in?"},
      :studyEffective
      {:type zen/map,
       :zen/desc "What time period does the study cover",
       :keys
       {:dateTime {:confirms #{dateTime}, :type zen/datetime},
        :Period {:confirms #{Period}},
        :Duration {:confirms #{Duration}},
        :Timing {:confirms #{Timing}}},
       :exclusive-keys #{#{:dateTime :Period :Timing :Duration}}},
      :participantEffectiveDescription
      {:confirms #{string},
       :type zen/string,
       :zen/desc "What time period do participants cover"},
      :participantEffective
      {:type zen/map,
       :zen/desc "What time period do participants cover",
       :keys
       {:dateTime {:confirms #{dateTime}, :type zen/datetime},
        :Period {:confirms #{Period}},
        :Duration {:confirms #{Duration}},
        :Timing {:confirms #{Timing}}},
       :exclusive-keys #{#{:dateTime :Period :Timing :Duration}}},
      :usageContext
      {:type zen/vector,
       :every
       {:confirms #{UsageContext},
        :zen/desc "What code/value pairs define members?"}},
      :participantEffectiveTimeFromStart
      {:confirms #{Duration},
       :zen/desc "Observation time from study start"}}}},
   :usage
   {:confirms #{string},
    :type zen/string,
    :zen/desc
    "Describes the clinical usage of the ResearchElementDefinition"},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc "draft | active | retired | unknown"},
   :subtitle
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Subordinate title of the ResearchElementDefinition"},
   :comment
   {:type zen/vector,
    :every
    {:confirms #{string},
     :type zen/string,
     :zen/desc "Used for footnotes or explanatory notes"}},
   :url
   {:confirms #{uri},
    :type zen/string,
    :zen/desc
    "Canonical identifier for this research element definition, represented as a URI (globally unique)"},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier},
     :zen/desc
     "Additional identifier for the research element definition"}},
   :lastReviewDate
   {:confirms #{date},
    :type zen/date,
    :zen/desc
    "When the research element definition was last reviewed"},
   :editor
   {:type zen/vector,
    :every
    {:confirms #{ContactDetail}, :zen/desc "Who edited the content"}},
   :reviewer
   {:type zen/vector,
    :every
    {:confirms #{ContactDetail},
     :zen/desc "Who reviewed the content"}},
   :shortTitle
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Title for use in informal contexts"},
   :version
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Business version of the research element definition"},
   :relatedArtifact
   {:type zen/vector,
    :every
    {:confirms #{RelatedArtifact},
     :zen/desc "Additional documentation, citations, etc."}},
   :contact
   {:type zen/vector,
    :every
    {:confirms #{ContactDetail},
     :zen/desc "Contact details for the publisher"}},
   :subject
   {:type zen/map,
    :zen/desc
    "E.g. Patient, Practitioner, RelatedPerson, Organization, Location, Device",
    :keys
    {:CodeableConcept {:confirms #{CodeableConcept}},
     :Reference {:confirms #{Reference}}},
    :exclusive-keys #{#{:CodeableConcept :Reference}}},
   :effectivePeriod
   {:confirms #{Period},
    :zen/desc
    "When the research element definition is expected to be used"}}},
 ResearchStudy
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "ResearchStudy",
  :require #{:status},
  :type zen/map,
  :zen/desc
  "A process where a researcher or organization plans and then executes a series of steps intended to increase the field of healthcare-related knowledge.  This includes studies of safety, efficacy, comparative effectiveness and other information about medications, devices, therapies and other interventional and investigative techniques.  A ResearchStudy involves the gathering of information about human or animal subjects.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/ResearchStudy",
  :keys
  {:description
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc "What this is study doing"},
   :category
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "Classifications for the study"}},
   :enrollment
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "Inclusion & exclusion criteria"}},
   :arm
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:name},
     :type zen/map,
     :zen/desc "Defined path through the study for a subject",
     :keys
     {:type
      {:confirms #{CodeableConcept},
       :zen/desc "Categorization of study arm"},
      :description
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Short explanation of study path"},
      :name
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Label for study arm"}}}},
   :site
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "Facility where study activities are conducted"}},
   :protocol
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "Steps followed in executing study"}},
   :principalInvestigator
   {:confirms #{Reference},
    :zen/desc "Researcher who oversees multiple aspects of the study"},
   :phase
   {:confirms #{CodeableConcept},
    :zen/desc
    "n-a | early-phase-1 | phase-1 | phase-1-phase-2 | phase-2 | phase-2-phase-3 | phase-3 | phase-4"},
   :reasonStopped
   {:confirms #{CodeableConcept},
    :zen/desc
    "accrual-goal-met | closed-due-to-toxicity | closed-due-to-lack-of-study-progress | temporarily-closed-per-study-design"},
   :resourceType {:type zen/string, :const {:value "ResearchStudy"}},
   :title
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name for this study"},
   :note
   {:type zen/vector,
    :every
    {:confirms #{Annotation},
     :zen/desc "Comments made about the study"}},
   :keyword
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "Used to search for the study"}},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc
    "active | administratively-completed | approved | closed-to-accrual | closed-to-accrual-and-intervention | completed | disapproved | in-review | temporarily-closed-to-accrual | temporarily-closed-to-accrual-and-intervention | withdrawn"},
   :condition
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "Condition being studied"}},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier},
     :zen/desc "Business Identifier for study"}},
   :primaryPurposeType
   {:confirms #{CodeableConcept},
    :zen/desc
    "treatment | prevention | diagnostic | supportive-care | screening | health-services-research | basic-science | device-feasibility"},
   :focus
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "Drugs, devices, etc. under study"}},
   :objective
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc "A goal for the study",
     :keys
     {:name
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Label for the objective"},
      :type
      {:confirms #{CodeableConcept},
       :zen/desc "primary | secondary | exploratory"}}}},
   :period
   {:confirms #{Period}, :zen/desc "When the study began and ended"},
   :partOf
   {:type zen/vector,
    :every {:confirms #{Reference}, :zen/desc "Part of larger study"}},
   :relatedArtifact
   {:type zen/vector,
    :every
    {:confirms #{RelatedArtifact},
     :zen/desc "References and dependencies"}},
   :location
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "Geographic region(s) for study"}},
   :contact
   {:type zen/vector,
    :every
    {:confirms #{ContactDetail},
     :zen/desc "Contact details for the study"}},
   :sponsor
   {:confirms #{Reference},
    :zen/desc
    "Organization that initiates and is legally responsible for the study"}}},
 ResearchSubject
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "ResearchSubject",
  :require #{:study :status :individual},
  :type zen/map,
  :zen/desc
  "A physical entity which is the primary unit of operational and/or administrative interest in a study.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/ResearchSubject",
  :keys
  {:study
   {:confirms #{Reference}, :zen/desc "Study subject is part of"},
   :resourceType {:type zen/string, :const {:value "ResearchSubject"}},
   :consent
   {:confirms #{Reference},
    :zen/desc "Agreement to participate in study"},
   :assignedArm
   {:confirms #{string},
    :type zen/string,
    :zen/desc "What path should be followed"},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc
    "candidate | eligible | follow-up | ineligible | not-registered | off-study | on-study | on-study-intervention | on-study-observation | pending-on-study | potential-candidate | screening | withdrawn"},
   :actualArm
   {:confirms #{string},
    :type zen/string,
    :zen/desc "What path was followed"},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier},
     :zen/desc "Business Identifier for research subject in a study"}},
   :individual
   {:confirms #{Reference}, :zen/desc "Who is part of study"},
   :period
   {:confirms #{Period}, :zen/desc "Start and end of participation"}}},
 RiskAssessment
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "RiskAssessment",
  :require #{:status :subject},
  :type zen/map,
  :zen/desc
  "An assessment of the likely outcome(s) for a patient or other subject as well as the likelihood of each outcome.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/RiskAssessment",
  :keys
  {:parent
   {:confirms #{Reference}, :zen/desc "Part of this occurrence"},
   :encounter
   {:confirms #{Reference},
    :zen/desc "Where was assessment performed?"},
   :prediction
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc "Outcome predicted",
     :keys
     {:probability
      {:type zen/map,
       :zen/desc "Likelihood of specified outcome",
       :keys
       {:decimal {:confirms #{decimal}, :type zen/number},
        :Range {:confirms #{Range}}},
       :exclusive-keys #{#{:Range :decimal}}},
      :relativeRisk
      {:confirms #{decimal},
       :type zen/number,
       :zen/desc "Relative likelihood"},
      :rationale
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Explanation of prediction"},
      :qualitativeRisk
      {:confirms #{CodeableConcept},
       :zen/desc
       "Likelihood of specified outcome as a qualitative value"},
      :outcome
      {:confirms #{CodeableConcept},
       :zen/desc "Possible outcome for the subject"},
      :when
      {:type zen/map,
       :zen/desc "Timeframe or age range",
       :keys
       {:Period {:confirms #{Period}}, :Range {:confirms #{Range}}},
       :exclusive-keys #{#{:Range :Period}}}}}},
   :method
   {:confirms #{CodeableConcept}, :zen/desc "Evaluation mechanism"},
   :basis
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "Information used in assessment"}},
   :reasonCode
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "Why the assessment was necessary?"}},
   :resourceType {:type zen/string, :const {:value "RiskAssessment"}},
   :mitigation
   {:confirms #{string},
    :type zen/string,
    :zen/desc "How to reduce risk"},
   :note
   {:type zen/vector,
    :every
    {:confirms #{Annotation},
     :zen/desc "Comments on the risk assessment"}},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc "registered | preliminary | final | amended +"},
   :condition {:confirms #{Reference}, :zen/desc "Condition assessed"},
   :code
   {:confirms #{CodeableConcept}, :zen/desc "Type of assessment"},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier},
     :zen/desc "Unique identifier for the assessment"}},
   :basedOn
   {:confirms #{Reference},
    :zen/desc "Request fulfilled by this assessment"},
   :subject
   {:confirms #{Reference},
    :zen/desc "Who/what does assessment apply to?"},
   :occurrence
   {:type zen/map,
    :zen/desc "When was assessment made?",
    :keys
    {:dateTime {:confirms #{dateTime}, :type zen/datetime},
     :Period {:confirms #{Period}}},
    :exclusive-keys #{#{:dateTime :Period}}},
   :performer
   {:confirms #{Reference}, :zen/desc "Who did assessment?"},
   :reasonReference
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "Why the assessment was necessary?"}}}},
 RiskEvidenceSynthesis
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "RiskEvidenceSynthesis",
  :require #{:outcome :status :population},
  :type zen/map,
  :zen/desc
  "The RiskEvidenceSynthesis resource describes the likelihood of an outcome in a population plus exposure state where the risk estimate is derived from a combination of research studies.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/RiskEvidenceSynthesis",
  :keys
  {:description
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc
    "Natural language description of the risk evidence synthesis"},
   :date
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "Date last changed"},
   :endorser
   {:type zen/vector,
    :every
    {:confirms #{ContactDetail},
     :zen/desc "Who endorsed the content"}},
   :publisher
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name of the publisher (organization or individual)"},
   :approvalDate
   {:confirms #{date},
    :type zen/date,
    :zen/desc
    "When the risk evidence synthesis was approved by publisher"},
   :jurisdiction
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc
     "Intended jurisdiction for risk evidence synthesis (if applicable)"}},
   :sampleSize
   {:confirms #{BackboneElement},
    :type zen/map,
    :zen/desc "What sample size was involved?",
    :keys
    {:numberOfParticipants
     {:confirms #{integer},
      :type zen/integer,
      :zen/desc "How many participants?"},
     :description
     {:confirms #{string},
      :type zen/string,
      :zen/desc "Description of sample size"},
     :numberOfStudies
     {:confirms #{integer},
      :type zen/integer,
      :zen/desc "How many studies?"}}},
   :name
   {:confirms #{string},
    :type zen/string,
    :zen/desc
    "Name for this risk evidence synthesis (computer friendly)"},
   :useContext
   {:type zen/vector,
    :every
    {:confirms #{UsageContext},
     :zen/desc "The context that the content is intended to support"}},
   :copyright
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc "Use and/or publishing restrictions"},
   :studyType
   {:confirms #{CodeableConcept}, :zen/desc "Type of study"},
   :outcome {:confirms #{Reference}, :zen/desc "What outcome?"},
   :topic
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc
     "The category of the EffectEvidenceSynthesis, such as Education, Treatment, Assessment, etc."}},
   :resourceType
   {:type zen/string, :const {:value "RiskEvidenceSynthesis"}},
   :title
   {:confirms #{string},
    :type zen/string,
    :zen/desc
    "Name for this risk evidence synthesis (human friendly)"},
   :note
   {:type zen/vector,
    :every
    {:confirms #{Annotation},
     :zen/desc "Used for footnotes or explanatory notes"}},
   :author
   {:type zen/vector,
    :every
    {:confirms #{ContactDetail},
     :zen/desc "Who authored the content"}},
   :synthesisType
   {:confirms #{CodeableConcept}, :zen/desc "Type of synthesis"},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc "draft | active | retired | unknown"},
   :population {:confirms #{Reference}, :zen/desc "What population?"},
   :url
   {:confirms #{uri},
    :type zen/string,
    :zen/desc
    "Canonical identifier for this risk evidence synthesis, represented as a URI (globally unique)"},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier},
     :zen/desc
     "Additional identifier for the risk evidence synthesis"}},
   :lastReviewDate
   {:confirms #{date},
    :type zen/date,
    :zen/desc "When the risk evidence synthesis was last reviewed"},
   :editor
   {:type zen/vector,
    :every
    {:confirms #{ContactDetail}, :zen/desc "Who edited the content"}},
   :certainty
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc "How certain is the risk",
     :keys
     {:note
      {:type zen/vector,
       :every
       {:confirms #{Annotation},
        :zen/desc "Used for footnotes or explanatory notes"}},
      :rating
      {:type zen/vector,
       :every
       {:confirms #{CodeableConcept}, :zen/desc "Certainty rating"}},
      :certaintySubcomponent
      {:type zen/vector,
       :every
       {:confirms #{BackboneElement},
        :type zen/map,
        :zen/desc
        "A component that contributes to the overall certainty",
        :keys
        {:type
         {:confirms #{CodeableConcept},
          :zen/desc "Type of subcomponent of certainty rating"},
         :note
         {:type zen/vector,
          :every
          {:confirms #{Annotation},
           :zen/desc "Used for footnotes or explanatory notes"}},
         :rating
         {:type zen/vector,
          :every
          {:confirms #{CodeableConcept},
           :zen/desc "Subcomponent certainty rating"}}}}}}}},
   :reviewer
   {:type zen/vector,
    :every
    {:confirms #{ContactDetail},
     :zen/desc "Who reviewed the content"}},
   :exposure {:confirms #{Reference}, :zen/desc "What exposure?"},
   :version
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Business version of the risk evidence synthesis"},
   :relatedArtifact
   {:type zen/vector,
    :every
    {:confirms #{RelatedArtifact},
     :zen/desc "Additional documentation, citations, etc."}},
   :contact
   {:type zen/vector,
    :every
    {:confirms #{ContactDetail},
     :zen/desc "Contact details for the publisher"}},
   :riskEstimate
   {:confirms #{BackboneElement},
    :type zen/map,
    :zen/desc "What was the estimated risk",
    :keys
    {:value
     {:confirms #{decimal},
      :type zen/number,
      :zen/desc "Point estimate"},
     :description
     {:confirms #{string},
      :type zen/string,
      :zen/desc "Description of risk estimate"},
     :type
     {:confirms #{CodeableConcept}, :zen/desc "Type of risk estimate"},
     :precisionEstimate
     {:type zen/vector,
      :every
      {:confirms #{BackboneElement},
       :type zen/map,
       :zen/desc "How precise the estimate is",
       :keys
       {:from
        {:confirms #{decimal},
         :type zen/number,
         :zen/desc "Lower bound"},
        :to
        {:confirms #{decimal},
         :type zen/number,
         :zen/desc "Upper bound"},
        :type
        {:confirms #{CodeableConcept},
         :zen/desc "Type of precision estimate"},
        :level
        {:confirms #{decimal},
         :type zen/number,
         :zen/desc "Level of confidence interval"}}}},
     :unitOfMeasure
     {:confirms #{CodeableConcept},
      :zen/desc "What unit is the outcome described in?"},
     :denominatorCount
     {:confirms #{integer},
      :type zen/integer,
      :zen/desc "Sample size for group measured"},
     :numeratorCount
     {:confirms #{integer},
      :type zen/integer,
      :zen/desc "Number with the outcome"}}},
   :effectivePeriod
   {:confirms #{Period},
    :zen/desc
    "When the risk evidence synthesis is expected to be used"}}},
 Schedule
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "Schedule",
  :require #{:actor},
  :type zen/map,
  :zen/desc
  "A container for slots of time that may be available for booking appointments.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/Schedule",
  :keys
  {:serviceCategory
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept}, :zen/desc "High-level category"}},
   :specialty
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "Type of specialty needed"}},
   :resourceType {:type zen/string, :const {:value "Schedule"}},
   :serviceType
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept}, :zen/desc "Specific service"}},
   :planningHorizon
   {:confirms #{Period},
    :zen/desc "Period of time covered by schedule"},
   :active
   {:confirms #{boolean},
    :type zen/boolean,
    :zen/desc "Whether this schedule is in active use"},
   :comment
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Comments on availability"},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier}, :zen/desc "External Ids for this item"}},
   :actor
   {:minItems 1,
    :type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc
     "Resource(s) that availability information is being provided for"}}}},
 SearchParameter
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "SearchParameter",
  :require #{:description :name :type :status :url :code :base},
  :type zen/map,
  :zen/desc
  "A search parameter that defines a named search item that can be used to search/filter on a resource.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/SearchParameter",
  :keys
  {:description
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc "Natural language description of the search parameter"},
   :date
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "Date last changed"},
   :expression
   {:confirms #{string},
    :type zen/string,
    :zen/desc "FHIRPath expression that extracts the values"},
   :modifier
   {:type zen/vector,
    :every
    {:confirms #{code},
     :type zen/string,
     :zen/desc
     "missing | exact | contains | not | text | in | not-in | below | above | type | identifier | ofType"}},
   :publisher
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name of the publisher (organization or individual)"},
   :multipleAnd
   {:confirms #{boolean},
    :type zen/boolean,
    :zen/desc "Allow multiple parameters (and)"},
   :jurisdiction
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc
     "Intended jurisdiction for search parameter (if applicable)"}},
   :derivedFrom
   {:confirms #{canonical},
    :type zen/string,
    :zen/desc "Original definition for the search parameter"},
   :purpose
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc "Why this search parameter is defined"},
   :multipleOr
   {:confirms #{boolean},
    :type zen/boolean,
    :zen/desc "Allow multiple values per parameter (or)"},
   :name
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name for this search parameter (computer friendly)"},
   :useContext
   {:type zen/vector,
    :every
    {:confirms #{UsageContext},
     :zen/desc "The context that the content is intended to support"}},
   :xpath
   {:confirms #{string},
    :type zen/string,
    :zen/desc "XPath that extracts the values"},
   :xpathUsage
   {:confirms #{code},
    :type zen/string,
    :zen/desc "normal | phonetic | nearby | distance | other"},
   :type
   {:confirms #{code},
    :type zen/string,
    :zen/desc
    "number | date | string | token | reference | composite | quantity | uri | special"},
   :experimental
   {:confirms #{boolean},
    :type zen/boolean,
    :zen/desc "For testing purposes, not real usage"},
   :resourceType {:type zen/string, :const {:value "SearchParameter"}},
   :component
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:definition :expression},
     :type zen/map,
     :zen/desc "For Composite resources to define the parts",
     :keys
     {:definition
      {:confirms #{canonical},
       :type zen/string,
       :zen/desc "Defines how the part works"},
      :expression
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Subexpression relative to main expression"}}}},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc "draft | active | retired | unknown"},
   :chain
   {:type zen/vector,
    :every
    {:confirms #{string},
     :type zen/string,
     :zen/desc "Chained names supported"}},
   :url
   {:confirms #{uri},
    :type zen/string,
    :zen/desc
    "Canonical identifier for this search parameter, represented as a URI (globally unique)"},
   :code
   {:confirms #{code}, :type zen/string, :zen/desc "Code used in URL"},
   :comparator
   {:type zen/vector,
    :every
    {:confirms #{code},
     :type zen/string,
     :zen/desc "eq | ne | gt | lt | ge | le | sa | eb | ap"}},
   :target
   {:type zen/vector,
    :every
    {:confirms #{code},
     :type zen/string,
     :zen/desc "Types of resource (if a resource reference)"}},
   :base
   {:minItems 1,
    :type zen/vector,
    :every
    {:confirms #{code},
     :type zen/string,
     :zen/desc
     "The resource type(s) this search parameter applies to"}},
   :version
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Business version of the search parameter"},
   :contact
   {:type zen/vector,
    :every
    {:confirms #{ContactDetail},
     :zen/desc "Contact details for the publisher"}}}},
 ServiceRequest
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "ServiceRequest",
  :require #{:status :intent :subject},
  :type zen/map,
  :zen/desc
  "A record of a request for service such as diagnostic investigations, treatments, or operations to be performed.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/ServiceRequest",
  :keys
  {:performerType
   {:confirms #{CodeableConcept}, :zen/desc "Performer role"},
   :category
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "Classification of service"}},
   :insurance
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "Associated insurance coverage"}},
   :instantiatesCanonical
   {:type zen/vector,
    :every
    {:confirms #{canonical},
     :type zen/string,
     :zen/desc "Instantiates FHIR protocol or definition"}},
   :instantiatesUri
   {:type zen/vector,
    :every
    {:confirms #{uri},
     :type zen/string,
     :zen/desc "Instantiates external protocol or definition"}},
   :relevantHistory
   {:type zen/vector,
    :every {:confirms #{Reference}, :zen/desc "Request provenance"}},
   :asNeeded
   {:type zen/map,
    :zen/desc "Preconditions for service",
    :keys
    {:boolean {:confirms #{boolean}, :type zen/boolean},
     :CodeableConcept {:confirms #{CodeableConcept}}},
    :exclusive-keys #{#{:CodeableConcept :boolean}}},
   :supportingInfo
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "Additional clinical information"}},
   :encounter
   {:confirms #{Reference},
    :zen/desc "Encounter in which the request was created"},
   :patientInstruction
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Patient or consumer-oriented instructions"},
   :specimen
   {:type zen/vector,
    :every {:confirms #{Reference}, :zen/desc "Procedure Samples"}},
   :reasonCode
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "Explanation/Justification for procedure or service"}},
   :authoredOn
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "Date request signed"},
   :resourceType {:type zen/string, :const {:value "ServiceRequest"}},
   :note
   {:type zen/vector,
    :every {:confirms #{Annotation}, :zen/desc "Comments"}},
   :requisition
   {:confirms #{Identifier}, :zen/desc "Composite Request ID"},
   :locationReference
   {:type zen/vector,
    :every {:confirms #{Reference}, :zen/desc "Requested location"}},
   :requester
   {:confirms #{Reference},
    :zen/desc "Who/what is requesting service"},
   :priority
   {:confirms #{code},
    :type zen/string,
    :zen/desc "routine | urgent | asap | stat"},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc
    "draft | active | on-hold | revoked | completed | entered-in-error | unknown"},
   :code
   {:confirms #{CodeableConcept},
    :zen/desc "What is being requested/ordered"},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier},
     :zen/desc "Identifiers assigned to this order"}},
   :doNotPerform
   {:confirms #{boolean},
    :type zen/boolean,
    :zen/desc "True if service/procedure should not be performed"},
   :bodySite
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept}, :zen/desc "Location on Body"}},
   :intent
   {:confirms #{code},
    :type zen/string,
    :zen/desc
    "proposal | plan | directive | order | original-order | reflex-order | filler-order | instance-order | option"},
   :replaces
   {:type zen/vector,
    :every
    {:confirms #{Reference}, :zen/desc "What request replaces"}},
   :orderDetail
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "Additional order information"}},
   :basedOn
   {:type zen/vector,
    :every
    {:confirms #{Reference}, :zen/desc "What request fulfills"}},
   :quantity
   {:type zen/map,
    :zen/desc "Service amount",
    :keys
    {:Quantity {:confirms #{Quantity}},
     :Ratio {:confirms #{Ratio}},
     :Range {:confirms #{Range}}},
    :exclusive-keys #{#{:Range :Ratio :Quantity}}},
   :locationCode
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept}, :zen/desc "Requested location"}},
   :subject
   {:confirms #{Reference},
    :zen/desc "Individual or Entity the service is ordered for"},
   :occurrence
   {:type zen/map,
    :zen/desc "When service should occur",
    :keys
    {:dateTime {:confirms #{dateTime}, :type zen/datetime},
     :Period {:confirms #{Period}},
     :Timing {:confirms #{Timing}}},
    :exclusive-keys #{#{:dateTime :Period :Timing}}},
   :performer
   {:type zen/vector,
    :every {:confirms #{Reference}, :zen/desc "Requested performer"}},
   :reasonReference
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "Explanation/Justification for service or service"}}}},
 Slot
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "Slot",
  :require #{:schedule :start :status :end},
  :type zen/map,
  :zen/desc
  "A slot of time on a schedule that may be available for booking appointments.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url "http://hl7.org/fhir/StructureDefinition/Slot",
  :keys
  {:schedule
   {:confirms #{Reference},
    :zen/desc
    "The schedule resource that this slot defines an interval of status information"},
   :serviceCategory
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc
     "A broad categorization of the service that is to be performed during this appointment"}},
   :specialty
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc
     "The specialty of a practitioner that would be required to perform the service requested in this appointment"}},
   :start
   {:confirms #{instant},
    :type zen/string,
    :zen/desc "Date/Time that the slot is to begin"},
   :resourceType {:type zen/string, :const {:value "Slot"}},
   :serviceType
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc
     "The type of appointments that can be booked into this slot (ideally this would be an identifiable service - which is at a location, rather than the location itself). If provided then this overrides the value provided on the availability resource"}},
   :appointmentType
   {:confirms #{CodeableConcept},
    :zen/desc
    "The style of appointment or patient that may be booked in the slot (not service type)"},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc
    "busy | free | busy-unavailable | busy-tentative | entered-in-error"},
   :comment
   {:confirms #{string},
    :type zen/string,
    :zen/desc
    "Comments on the slot to describe any extended information. Such as custom constraints on the slot"},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier}, :zen/desc "External Ids for this item"}},
   :end
   {:confirms #{instant},
    :type zen/string,
    :zen/desc "Date/Time that the slot is to conclude"},
   :overbooked
   {:confirms #{boolean},
    :type zen/boolean,
    :zen/desc
    "This slot has already been overbooked, appointments are unlikely to be accepted for this time"}}},
 Specimen
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "Specimen",
  :type zen/map,
  :zen/desc "A sample to be used for analysis.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/Specimen",
  :keys
  {:request
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "Why the specimen was collected"}},
   :receivedTime
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "The time when specimen was received for processing"},
   :processing
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc "Processing and processing step details",
     :keys
     {:procedure
      {:confirms #{CodeableConcept},
       :zen/desc
       "Indicates the treatment step  applied to the specimen"},
      :time
      {:type zen/map,
       :zen/desc "Date and time of specimen processing",
       :keys
       {:dateTime {:confirms #{dateTime}, :type zen/datetime},
        :Period {:confirms #{Period}}},
       :exclusive-keys #{#{:dateTime :Period}}},
      :additive
      {:type zen/vector,
       :every
       {:confirms #{Reference},
        :zen/desc "Material used in the processing step"}},
      :description
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Textual description of procedure"}}}},
   :parent
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "Specimen from which this specimen originated"}},
   :type
   {:confirms #{CodeableConcept},
    :zen/desc "Kind of material that forms the specimen"},
   :resourceType {:type zen/string, :const {:value "Specimen"}},
   :note
   {:type zen/vector,
    :every {:confirms #{Annotation}, :zen/desc "Comments"}},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc
    "available | unavailable | unsatisfactory | entered-in-error"},
   :condition
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept}, :zen/desc "State of the specimen"}},
   :container
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc "Direct container of specimen (tube/slide, etc.)",
     :keys
     {:type
      {:confirms #{CodeableConcept},
       :zen/desc
       "Kind of container directly associated with specimen"},
      :capacity
      {:confirms #{Quantity SimpleQuantity},
       :zen/desc "Container volume or size"},
      :description
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Textual description of the container"},
      :identifier
      {:type zen/vector,
       :every
       {:confirms #{Identifier}, :zen/desc "Id for the container"}},
      :specimenQuantity
      {:confirms #{Quantity SimpleQuantity},
       :zen/desc "Quantity of specimen within container"},
      :additive
      {:type zen/map,
       :zen/desc "Additive associated with container",
       :keys
       {:CodeableConcept {:confirms #{CodeableConcept}},
        :Reference {:confirms #{Reference}}},
       :exclusive-keys #{#{:CodeableConcept :Reference}}}}}},
   :identifier
   {:type zen/vector,
    :every {:confirms #{Identifier}, :zen/desc "External Identifier"}},
   :accessionIdentifier
   {:confirms #{Identifier},
    :zen/desc "Identifier assigned by the lab"},
   :collection
   {:confirms #{BackboneElement},
    :type zen/map,
    :zen/desc "Collection details",
    :keys
    {:collector
     {:confirms #{Reference}, :zen/desc "Who collected the specimen"},
     :method
     {:confirms #{CodeableConcept},
      :zen/desc "Technique used to perform collection"},
     :duration
     {:confirms #{Duration},
      :zen/desc "How long it took to collect specimen"},
     :fastingStatus
     {:type zen/map,
      :zen/desc
      "Whether or how long patient abstained from food and/or drink",
      :keys
      {:CodeableConcept {:confirms #{CodeableConcept}},
       :Duration {:confirms #{Duration}}},
      :exclusive-keys #{#{:Duration :CodeableConcept}}},
     :bodySite
     {:confirms #{CodeableConcept},
      :zen/desc "Anatomical collection site"},
     :collected
     {:type zen/map,
      :zen/desc "Collection time",
      :keys
      {:dateTime {:confirms #{dateTime}, :type zen/datetime},
       :Period {:confirms #{Period}}},
      :exclusive-keys #{#{:dateTime :Period}}},
     :quantity
     {:confirms #{Quantity SimpleQuantity},
      :zen/desc "The quantity of specimen collected"}}},
   :subject
   {:confirms #{Reference},
    :zen/desc
    "Where the specimen came from. This may be from patient(s), from a location (e.g., the source of an environmental sample), or a sampling of a substance or a device"}}},
 SpecimenDefinition
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "SpecimenDefinition",
  :type zen/map,
  :zen/desc "A kind of specimen with associated set of requirements.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/SpecimenDefinition",
  :keys
  {:identifier
   {:confirms #{Identifier},
    :zen/desc "Business identifier of a kind of specimen"},
   :typeTested
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:preference},
     :type zen/map,
     :zen/desc "Specimen in container intended for testing by lab",
     :keys
     {:retentionTime
      {:confirms #{Duration}, :zen/desc "Specimen retention time"},
      :container
      {:confirms #{BackboneElement},
       :type zen/map,
       :zen/desc "The specimen's container",
       :keys
       {:additive
        {:type zen/vector,
         :every
         {:confirms #{BackboneElement},
          :require #{:additive},
          :type zen/map,
          :zen/desc "Additive associated with container",
          :keys
          {:additive
           {:type zen/map,
            :zen/desc "Additive associated with container",
            :keys
            {:CodeableConcept {:confirms #{CodeableConcept}},
             :Reference {:confirms #{Reference}}},
            :exclusive-keys #{#{:CodeableConcept :Reference}}}}}},
        :cap
        {:confirms #{CodeableConcept},
         :zen/desc "Color of container cap"},
        :preparation
        {:confirms #{string},
         :type zen/string,
         :zen/desc "Specimen container preparation"},
        :type
        {:confirms #{CodeableConcept},
         :zen/desc
         "Kind of container associated with the kind of specimen"},
        :material
        {:confirms #{CodeableConcept}, :zen/desc "Container material"},
        :description
        {:confirms #{string},
         :type zen/string,
         :zen/desc "Container description"},
        :capacity
        {:confirms #{Quantity SimpleQuantity},
         :zen/desc "Container capacity"},
        :minimumVolume
        {:confirms #{SimpleQuantity},
         :type zen/map,
         :zen/desc "Minimum volume",
         :keys
         {:Quantity {:confirms #{Quantity}},
          :string {:confirms #{string}, :type zen/string}},
         :exclusive-keys #{#{:string :Quantity}}}}},
      :rejectionCriterion
      {:type zen/vector,
       :every
       {:confirms #{CodeableConcept},
        :zen/desc "Rejection criterion"}},
      :requirement
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Specimen requirements"},
      :type
      {:confirms #{CodeableConcept},
       :zen/desc "Type of intended specimen"},
      :handling
      {:type zen/vector,
       :every
       {:confirms #{BackboneElement},
        :type zen/map,
        :zen/desc "Specimen handling before testing",
        :keys
        {:maxDuration
         {:confirms #{Duration},
          :zen/desc "Maximum preservation time"},
         :temperatureQualifier
         {:confirms #{CodeableConcept},
          :zen/desc "Temperature qualifier"},
         :temperatureRange
         {:confirms #{Range}, :zen/desc "Temperature range"},
         :instruction
         {:confirms #{string},
          :type zen/string,
          :zen/desc "Preservation instruction"}}}},
      :preference
      {:confirms #{code},
       :type zen/string,
       :zen/desc "preferred | alternate"},
      :isDerived
      {:confirms #{boolean},
       :type zen/boolean,
       :zen/desc "Primary or secondary specimen"}}}},
   :typeCollected
   {:confirms #{CodeableConcept},
    :zen/desc "Kind of material to collect"},
   :collection
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "Specimen collection procedure"}},
   :patientPreparation
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "Patient preparation for collection"}},
   :timeAspect
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Time aspect for collection"},
   :resourceType
   {:type zen/string, :const {:value "SpecimenDefinition"}}}},
 StructureDefinition
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "StructureDefinition",
  :require #{:name :abstract :type :status :kind :url},
  :type zen/map,
  :zen/desc
  "A definition of a FHIR structure. This resource is used to describe the underlying resources, data types defined in FHIR, and also for describing extensions and constraints on resources and data types.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/StructureDefinition",
  :keys
  {:description
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc
    "Natural language description of the structure definition"},
   :date
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "Date last changed"},
   :derivation
   {:confirms #{code},
    :type zen/string,
    :zen/desc
    "specialization | constraint - How relates to base definition"},
   :publisher
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name of the publisher (organization or individual)"},
   :contextInvariant
   {:type zen/vector,
    :every
    {:confirms #{string},
     :type zen/string,
     :zen/desc
     "FHIRPath invariants - when the extension can be used"}},
   :fhirVersion
   {:confirms #{code},
    :type zen/string,
    :zen/desc "FHIR Version this StructureDefinition targets"},
   :jurisdiction
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc
     "Intended jurisdiction for structure definition (if applicable)"}},
   :purpose
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc "Why this structure definition is defined"},
   :name
   {:confirms #{string},
    :type zen/string,
    :zen/desc
    "Name for this structure definition (computer friendly)"},
   :mapping
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:identity},
     :type zen/map,
     :zen/desc "External specification that the content is mapped to",
     :keys
     {:comment
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Versions, Issues, Scope limitations etc."},
      :uri
      {:confirms #{uri},
       :type zen/string,
       :zen/desc "Identifies what this mapping refers to"},
      :identity
      {:confirms #{id},
       :type zen/string,
       :zen/desc "Internal id when this mapping is used"},
      :name
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Names what this mapping refers to"}}}},
   :useContext
   {:type zen/vector,
    :every
    {:confirms #{UsageContext},
     :zen/desc "The context that the content is intended to support"}},
   :abstract
   {:confirms #{boolean},
    :type zen/boolean,
    :zen/desc "Whether the structure is abstract"},
   :copyright
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc "Use and/or publishing restrictions"},
   :type
   {:confirms #{uri},
    :type zen/string,
    :zen/desc "Type defined or constrained by this structure"},
   :experimental
   {:confirms #{boolean},
    :type zen/boolean,
    :zen/desc "For testing purposes, not real usage"},
   :resourceType
   {:type zen/string, :const {:value "StructureDefinition"}},
   :title
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name for this structure definition (human friendly)"},
   :snapshot
   {:confirms #{BackboneElement},
    :require #{:element},
    :type zen/map,
    :zen/desc "Snapshot view of the structure",
    :keys
    {:element
     {:minItems 1,
      :type zen/vector,
      :every
      {:confirms #{ElementDefinition},
       :zen/desc
       "Definition of elements in the resource (if no StructureDefinition)"}}}},
   :keyword
   {:type zen/vector,
    :every
    {:confirms #{Coding},
     :zen/desc "Assist with indexing and finding"}},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc "draft | active | retired | unknown"},
   :kind
   {:confirms #{code},
    :type zen/string,
    :zen/desc "primitive-type | complex-type | resource | logical"},
   :url
   {:confirms #{uri},
    :type zen/string,
    :zen/desc
    "Canonical identifier for this structure definition, represented as a URI (globally unique)"},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier},
     :zen/desc "Additional identifier for the structure definition"}},
   :context
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:expression :type},
     :type zen/map,
     :zen/desc "If an extension, where it can be used in instances",
     :keys
     {:type
      {:confirms #{code},
       :type zen/string,
       :zen/desc "fhirpath | element | extension"},
      :expression
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Where the extension can be used in instances"}}}},
   :version
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Business version of the structure definition"},
   :differential
   {:confirms #{BackboneElement},
    :require #{:element},
    :type zen/map,
    :zen/desc "Differential view of the structure",
    :keys
    {:element
     {:minItems 1,
      :type zen/vector,
      :every
      {:confirms #{ElementDefinition},
       :zen/desc
       "Definition of elements in the resource (if no StructureDefinition)"}}}},
   :contact
   {:type zen/vector,
    :every
    {:confirms #{ContactDetail},
     :zen/desc "Contact details for the publisher"}},
   :baseDefinition
   {:confirms #{canonical},
    :type zen/string,
    :zen/desc
    "Definition that this type is constrained/specialized from"}}},
 StructureMap
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "StructureMap",
  :require #{:group :name :status :url},
  :type zen/map,
  :zen/desc
  "A Map of relationships between 2 structures that can be used to transform data.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/StructureMap",
  :keys
  {:description
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc "Natural language description of the structure map"},
   :date
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "Date last changed"},
   :group
   {:minItems 1,
    :type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:typeMode :name :rule :input},
     :type zen/map,
     :zen/desc "Named sections for reader convenience",
     :keys
     {:documentation
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Additional description/explanation for group"},
      :input
      {:minItems 1,
       :type zen/vector,
       :every
       {:confirms #{BackboneElement},
        :require #{:name :mode},
        :type zen/map,
        :zen/desc "Named instance provided when invoking the map",
        :keys
        {:documentation
         {:confirms #{string},
          :type zen/string,
          :zen/desc "Documentation for this instance of data"},
         :type
         {:confirms #{string},
          :type zen/string,
          :zen/desc "Type for this instance of data"},
         :name
         {:confirms #{id},
          :type zen/string,
          :zen/desc "Name for this instance of data"},
         :mode
         {:confirms #{code},
          :type zen/string,
          :zen/desc "source | target"}}}},
      :typeMode
      {:confirms #{code},
       :type zen/string,
       :zen/desc "none | types | type-and-types"},
      :rule
      {:minItems 1,
       :type zen/vector,
       :every
       {:confirms #{BackboneElement},
        :require #{:name :source},
        :type zen/map,
        :zen/desc "Transform Rule from source to target",
        :keys
        {:name
         {:confirms #{id},
          :type zen/string,
          :zen/desc "Name of the rule for internal references"},
         :source
         {:minItems 1,
          :type zen/vector,
          :every
          {:confirms #{BackboneElement},
           :require #{:context},
           :type zen/map,
           :zen/desc "Source inputs to the mapping",
           :keys
           {:min
            {:confirms #{integer},
             :type zen/integer,
             :zen/desc "Specified minimum cardinality"},
            :variable
            {:confirms #{id},
             :type zen/string,
             :zen/desc
             "Named context for field, if a field is specified"},
            :element
            {:confirms #{string},
             :type zen/string,
             :zen/desc "Optional field for this source"},
            :check
            {:confirms #{string},
             :type zen/string,
             :zen/desc
             "FHIRPath expression  - must be true or the mapping engine throws an error instead of completing"},
            :type
            {:confirms #{string},
             :type zen/string,
             :zen/desc "Rule only applies if source has this type"},
            :logMessage
            {:confirms #{string},
             :type zen/string,
             :zen/desc
             "Message to put in log if source exists (FHIRPath)"},
            :max
            {:confirms #{string},
             :type zen/string,
             :zen/desc "Specified maximum cardinality (number or *)"},
            :condition
            {:confirms #{string},
             :type zen/string,
             :zen/desc
             "FHIRPath expression  - must be true or the rule does not apply"},
            :context
            {:confirms #{id},
             :type zen/string,
             :zen/desc "Type or variable this rule applies to"},
            :listMode
            {:confirms #{code},
             :type zen/string,
             :zen/desc
             "first | not_first | last | not_last | only_one"},
            :defaultValue
            {:type zen/map,
             :zen/desc "Default value if no value exists",
             :keys
             {:unsignedInt
              {:confirms #{unsignedInt}, :type zen/integer},
              :Signature {:confirms #{Signature}},
              :markdown {:confirms #{markdown}, :type zen/string},
              :date {:confirms #{date}, :type zen/date},
              :Dosage {:confirms #{Dosage}},
              :ContactDetail {:confirms #{ContactDetail}},
              :RelatedArtifact {:confirms #{RelatedArtifact}},
              :instant {:confirms #{instant}, :type zen/string},
              :UsageContext {:confirms #{UsageContext}},
              :time {:confirms #{time}, :type zen/string},
              :DataRequirement {:confirms #{DataRequirement}},
              :base64Binary
              {:confirms #{base64Binary}, :type zen/string},
              :Meta {:confirms #{Meta}},
              :Distance {:confirms #{Distance}},
              :SampledData {:confirms #{SampledData}},
              :TriggerDefinition {:confirms #{TriggerDefinition}},
              :Identifier {:confirms #{Identifier}},
              :string {:confirms #{string}, :type zen/string},
              :Address {:confirms #{Address}},
              :Expression {:confirms #{Expression}},
              :dateTime {:confirms #{dateTime}, :type zen/datetime},
              :Range {:confirms #{Range}},
              :integer {:confirms #{integer}, :type zen/integer},
              :Ratio {:confirms #{Ratio}},
              :oid {:confirms #{oid}, :type zen/string},
              :ContactPoint {:confirms #{ContactPoint}},
              :Money {:confirms #{Money}},
              :decimal {:confirms #{decimal}, :type zen/number},
              :id {:confirms #{id}, :type zen/string},
              :Attachment {:confirms #{Attachment}},
              :Contributor {:confirms #{Contributor}},
              :Period {:confirms #{Period}},
              :canonical {:confirms #{canonical}, :type zen/string},
              :url {:confirms #{url}, :type zen/string},
              :code {:confirms #{code}, :type zen/string},
              :HumanName {:confirms #{HumanName}},
              :positiveInt
              {:confirms #{positiveInt}, :type zen/integer},
              :ParameterDefinition {:confirms #{ParameterDefinition}},
              :Coding {:confirms #{Coding}},
              :Timing {:confirms #{Timing}},
              :Duration {:confirms #{Duration}},
              :uri {:confirms #{uri}, :type zen/string},
              :CodeableConcept {:confirms #{CodeableConcept}},
              :uuid {:confirms #{uuid}, :type zen/string},
              :Count {:confirms #{Count}},
              :Quantity {:confirms #{Quantity}},
              :boolean {:confirms #{boolean}, :type zen/boolean},
              :Annotation {:confirms #{Annotation}},
              :Age {:confirms #{Age}},
              :Reference {:confirms #{Reference}}},
             :exclusive-keys
             #{#{:unsignedInt
                 :Signature
                 :markdown
                 :date
                 :Dosage
                 :ContactDetail
                 :RelatedArtifact
                 :instant
                 :UsageContext
                 :time
                 :DataRequirement
                 :base64Binary
                 :Meta
                 :Distance
                 :SampledData
                 :TriggerDefinition
                 :Identifier
                 :string
                 :Address
                 :Expression
                 :dateTime
                 :Range
                 :integer
                 :Ratio
                 :oid
                 :ContactPoint
                 :Money
                 :decimal
                 :id
                 :Attachment
                 :Contributor
                 :Period
                 :canonical
                 :url
                 :code
                 :HumanName
                 :positiveInt
                 :ParameterDefinition
                 :Coding
                 :Timing
                 :Duration
                 :uri
                 :CodeableConcept
                 :uuid
                 :Count
                 :Quantity
                 :boolean
                 :Annotation
                 :Age
                 :Reference}}}}}},
         :dependent
         {:type zen/vector,
          :every
          {:confirms #{BackboneElement},
           :require #{:variable :name},
           :type zen/map,
           :zen/desc
           "Which other rules to apply in the context of this rule",
           :keys
           {:name
            {:confirms #{id},
             :type zen/string,
             :zen/desc "Name of a rule or group to apply"},
            :variable
            {:minItems 1,
             :type zen/vector,
             :every
             {:confirms #{string},
              :type zen/string,
              :zen/desc "Variable to pass to the rule or group"}}}}},
         :documentation
         {:confirms #{string},
          :type zen/string,
          :zen/desc "Documentation for this instance of data"},
         :rule
         {:type zen/vector,
          :every #:zen{:desc "Rules contained in this rule"}},
         :target
         {:type zen/vector,
          :every
          {:confirms #{BackboneElement},
           :type zen/map,
           :zen/desc "Content to create because of this mapping rule",
           :keys
           {:listRuleId
            {:confirms #{id},
             :type zen/string,
             :zen/desc
             "Internal rule reference for shared list items"},
            :listMode
            {:type zen/vector,
             :every
             {:confirms #{code},
              :type zen/string,
              :zen/desc "first | share | last | collate"}},
            :context
            {:confirms #{id},
             :type zen/string,
             :zen/desc "Type or variable this rule applies to"},
            :contextType
            {:confirms #{code},
             :type zen/string,
             :zen/desc "type | variable"},
            :parameter
            {:type zen/vector,
             :every
             {:confirms #{BackboneElement},
              :require #{:value},
              :type zen/map,
              :zen/desc "Parameters to the transform",
              :keys
              {:value
               {:type zen/map,
                :zen/desc "Parameter value - variable or literal",
                :keys
                {:id {:confirms #{id}, :type zen/string},
                 :string {:confirms #{string}, :type zen/string},
                 :boolean {:confirms #{boolean}, :type zen/boolean},
                 :integer {:confirms #{integer}, :type zen/integer},
                 :decimal {:confirms #{decimal}, :type zen/number}},
                :exclusive-keys
                #{#{:string :integer :decimal :id :boolean}}}}}},
            :variable
            {:confirms #{id},
             :type zen/string,
             :zen/desc
             "Named context for field, if desired, and a field is specified"},
            :element
            {:confirms #{string},
             :type zen/string,
             :zen/desc "Field to create in the context"},
            :transform
            {:confirms #{code},
             :type zen/string,
             :zen/desc "create | copy +"}}}}}}},
      :name
      {:confirms #{id},
       :type zen/string,
       :zen/desc "Human-readable label"},
      :extends
      {:confirms #{id},
       :type zen/string,
       :zen/desc "Another group that this group adds rules to"}}}},
   :publisher
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name of the publisher (organization or individual)"},
   :jurisdiction
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc
     "Intended jurisdiction for structure map (if applicable)"}},
   :purpose
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc "Why this structure map is defined"},
   :name
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name for this structure map (computer friendly)"},
   :useContext
   {:type zen/vector,
    :every
    {:confirms #{UsageContext},
     :zen/desc "The context that the content is intended to support"}},
   :copyright
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc "Use and/or publishing restrictions"},
   :experimental
   {:confirms #{boolean},
    :type zen/boolean,
    :zen/desc "For testing purposes, not real usage"},
   :resourceType {:type zen/string, :const {:value "StructureMap"}},
   :title
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name for this structure map (human friendly)"},
   :structure
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:mode :url},
     :type zen/map,
     :zen/desc "Structure Definition used by this map",
     :keys
     {:alias
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Name for type in this map"},
      :mode
      {:confirms #{code},
       :type zen/string,
       :zen/desc "source | queried | target | produced"},
      :url
      {:confirms #{canonical},
       :type zen/string,
       :zen/desc "Canonical reference to structure definition"},
      :documentation
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Documentation on use of structure"}}}},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc "draft | active | retired | unknown"},
   :url
   {:confirms #{uri},
    :type zen/string,
    :zen/desc
    "Canonical identifier for this structure map, represented as a URI (globally unique)"},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier},
     :zen/desc "Additional identifier for the structure map"}},
   :version
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Business version of the structure map"},
   :import
   {:type zen/vector,
    :every
    {:confirms #{canonical},
     :type zen/string,
     :zen/desc "Other maps used by this map (canonical URLs)"}},
   :contact
   {:type zen/vector,
    :every
    {:confirms #{ContactDetail},
     :zen/desc "Contact details for the publisher"}}}},
 Subscription
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "Subscription",
  :require #{:criteria :channel :reason :status},
  :type zen/map,
  :zen/desc
  "The subscription resource is used to define a push-based subscription from a server to another system. Once a subscription is registered with the server, the server checks every resource that is created or updated, and if the resource matches the given criteria, it sends a message on the defined \"channel\" so that another system can take an appropriate action.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/Subscription",
  :keys
  {:contact
   {:type zen/vector,
    :every
    {:confirms #{ContactPoint},
     :zen/desc "Contact details for source (e.g. troubleshooting)"}},
   :channel
   {:confirms #{BackboneElement},
    :require #{:type},
    :type zen/map,
    :zen/desc "The channel on which to report matches to the criteria",
    :keys
    {:endpoint
     {:confirms #{url},
      :type zen/string,
      :zen/desc "Where the channel points to"},
     :type
     {:confirms #{code},
      :type zen/string,
      :zen/desc "rest-hook | websocket | email | sms | message"},
     :header
     {:type zen/vector,
      :every
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Usage depends on the channel type"}},
     :payload
     {:confirms #{code},
      :type zen/string,
      :zen/desc "MIME type to send, or omit for no payload"}}},
   :reason
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Description of why this subscription was created"},
   :error
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Latest error note"},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc "requested | active | error | off"},
   :criteria
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Rule for server push"},
   :end
   {:confirms #{instant},
    :type zen/string,
    :zen/desc "When to automatically delete the subscription"},
   :resourceType {:type zen/string, :const {:value "Subscription"}}}},
 Substance
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "Substance",
  :require #{:code},
  :type zen/map,
  :zen/desc "A homogeneous material with a definite composition.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/Substance",
  :keys
  {:description
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Textual description of the substance, comments"},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc "active | inactive | entered-in-error"},
   :ingredient
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:substance},
     :type zen/map,
     :zen/desc "Composition information about the substance",
     :keys
     {:substance
      {:type zen/map,
       :zen/desc "A component of the substance",
       :keys
       {:CodeableConcept {:confirms #{CodeableConcept}},
        :Reference {:confirms #{Reference}}},
       :exclusive-keys #{#{:CodeableConcept :Reference}}},
      :quantity
      {:confirms #{Ratio},
       :zen/desc "Optional amount (concentration)"}}}},
   :code
   {:confirms #{CodeableConcept}, :zen/desc "What substance this is"},
   :identifier
   {:type zen/vector,
    :every {:confirms #{Identifier}, :zen/desc "Unique identifier"}},
   :instance
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc
     "If this describes a specific package/container of the substance",
     :keys
     {:quantity
      {:confirms #{Quantity SimpleQuantity},
       :zen/desc "Amount of substance in the package"},
      :expiry
      {:confirms #{dateTime},
       :type zen/datetime,
       :zen/desc "When no longer valid to use"},
      :identifier
      {:confirms #{Identifier},
       :zen/desc "Identifier of the package/container"}}}},
   :category
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "What class/type of substance this is"}},
   :resourceType {:type zen/string, :const {:value "Substance"}}}},
 SubstanceNucleicAcid
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "SubstanceNucleicAcid",
  :type zen/map,
  :zen/desc
  "Nucleic acids are defined by three distinct elements: the base, sugar and linkage. Individual substance/moiety IDs will be created for each of these elements. The nucleotide sequence will be always entered in the 5’-3’ direction.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/SubstanceNucleicAcid",
  :keys
  {:sequenceType
   {:confirms #{CodeableConcept},
    :zen/desc
    "The type of the sequence shall be specified based on a controlled vocabulary"},
   :oligoNucleotideType
   {:confirms #{CodeableConcept}, :zen/desc "(TBC)"},
   :numberOfSubunits
   {:confirms #{integer},
    :type zen/integer,
    :zen/desc
    "The number of linear sequences of nucleotides linked through phosphodiester bonds shall be described. Subunits would be strands of nucleic acids that are tightly associated typically through Watson-Crick base pairing. NOTE: If not specified in the reference source, the assumption is that there is 1 subunit"},
   :subunit
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc
     "Subunits are listed in order of decreasing length; sequences of the same length will be ordered by molecular weight; subunits that have identical sequences will be repeated multiple times",
     :keys
     {:subunit
      {:confirms #{integer},
       :type zen/integer,
       :zen/desc
       "Index of linear sequences of nucleic acids in order of decreasing length. Sequences of the same length will be ordered by molecular weight. Subunits that have identical sequences will be repeated and have sequential subscripts"},
      :linkage
      {:type zen/vector,
       :every
       {:confirms #{BackboneElement},
        :type zen/map,
        :zen/desc
        "The linkages between sugar residues will also be captured",
        :keys
        {:identifier
         {:confirms #{Identifier},
          :zen/desc
          "Each linkage will be registered as a fragment and have an ID"},
         :connectivity
         {:confirms #{string},
          :type zen/string,
          :zen/desc
          "The entity that links the sugar residues together should also be captured for nearly all naturally occurring nucleic acid the linkage is a phosphate group. For many synthetic oligonucleotides phosphorothioate linkages are often seen. Linkage connectivity is assumed to be 3’-5’. If the linkage is either 3’-3’ or 5’-5’ this should be specified"},
         :residueSite
         {:confirms #{string},
          :type zen/string,
          :zen/desc
          "Residues shall be captured as described in 5.3.6.8.3"},
         :name
         {:confirms #{string},
          :type zen/string,
          :zen/desc
          "Each linkage will be registered as a fragment and have at least one name. A single name shall be assigned to each linkage"}}}},
      :fivePrime
      {:confirms #{CodeableConcept},
       :zen/desc
       "The nucleotide present at the 5’ terminal shall be specified based on a controlled vocabulary. Since the sequence is represented from the 5' to the 3' end, the 5’ prime nucleotide is the letter at the first position in the sequence. A separate representation would be redundant"},
      :sugar
      {:type zen/vector,
       :every
       {:confirms #{BackboneElement},
        :type zen/map,
        :zen/desc "5.3.6.8.1 Sugar ID (Mandatory)",
        :keys
        {:identifier
         {:confirms #{Identifier},
          :zen/desc
          "The Substance ID of the sugar or sugar-like component that make up the nucleotide"},
         :residueSite
         {:confirms #{string},
          :type zen/string,
          :zen/desc
          "The residues that contain a given sugar will be captured. The order of given residues will be captured in the 5‘-3‘direction consistent with the base sequences listed above"},
         :name
         {:confirms #{string},
          :type zen/string,
          :zen/desc
          "The name of the sugar or sugar-like component that make up the nucleotide"}}}},
      :sequenceAttachment {:confirms #{Attachment}, :zen/desc "(TBC)"},
      :length
      {:confirms #{integer},
       :type zen/integer,
       :zen/desc "The length of the sequence shall be captured"},
      :threePrime
      {:confirms #{CodeableConcept},
       :zen/desc
       "The nucleotide present at the 3’ terminal shall be specified based on a controlled vocabulary. Since the sequence is represented from the 5' to the 3' end, the 5’ prime nucleotide is the letter at the last position in the sequence. A separate representation would be redundant"},
      :sequence
      {:confirms #{string},
       :type zen/string,
       :zen/desc
       "Actual nucleotide sequence notation from 5' to 3' end using standard single letter codes. In addition to the base sequence, sugar and type of phosphate or non-phosphate linkage should also be captured"}}}},
   :areaOfHybridisation
   {:confirms #{string},
    :type zen/string,
    :zen/desc
    "The area of hybridisation shall be described if applicable for double stranded RNA or DNA. The number associated with the subunit followed by the number associated to the residue shall be specified in increasing order. The underscore “” shall be used as separator as follows: “Subunitnumber Residue”"},
   :resourceType
   {:type zen/string, :const {:value "SubstanceNucleicAcid"}}}},
 SubstancePolymer
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "SubstancePolymer",
  :type zen/map,
  :zen/desc "Todo.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/SubstancePolymer",
  :keys
  {:copolymerConnectivity
   {:type zen/vector,
    :every {:confirms #{CodeableConcept}, :zen/desc "Todo"}},
   :monomerSet
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc "Todo",
     :keys
     {:ratioType {:confirms #{CodeableConcept}, :zen/desc "Todo"},
      :startingMaterial
      {:type zen/vector,
       :every
       {:confirms #{BackboneElement},
        :type zen/map,
        :zen/desc "Todo",
        :keys
        {:amount {:confirms #{SubstanceAmount}, :zen/desc "Todo"},
         :material {:confirms #{CodeableConcept}, :zen/desc "Todo"},
         :isDefining
         {:confirms #{boolean}, :type zen/boolean, :zen/desc "Todo"},
         :type {:confirms #{CodeableConcept}, :zen/desc "Todo"}}}}}}},
   :modification
   {:type zen/vector,
    :every {:confirms #{string}, :type zen/string, :zen/desc "Todo"}},
   :repeat
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc "Todo",
     :keys
     {:repeatUnitAmountType
      {:confirms #{CodeableConcept}, :zen/desc "Todo"},
      :averageMolecularFormula
      {:confirms #{string}, :type zen/string, :zen/desc "Todo"},
      :numberOfUnits
      {:confirms #{integer}, :type zen/integer, :zen/desc "Todo"},
      :repeatUnit
      {:type zen/vector,
       :every
       {:confirms #{BackboneElement},
        :type zen/map,
        :zen/desc "Todo",
        :keys
        {:structuralRepresentation
         {:type zen/vector,
          :every
          {:confirms #{BackboneElement},
           :type zen/map,
           :zen/desc "Todo",
           :keys
           {:representation
            {:confirms #{string}, :type zen/string, :zen/desc "Todo"},
            :attachment {:confirms #{Attachment}, :zen/desc "Todo"},
            :type {:confirms #{CodeableConcept}, :zen/desc "Todo"}}}},
         :degreeOfPolymerisation
         {:type zen/vector,
          :every
          {:confirms #{BackboneElement},
           :type zen/map,
           :zen/desc "Todo",
           :keys
           {:amount {:confirms #{SubstanceAmount}, :zen/desc "Todo"},
            :degree
            {:confirms #{CodeableConcept}, :zen/desc "Todo"}}}},
         :amount {:confirms #{SubstanceAmount}, :zen/desc "Todo"},
         :orientationOfPolymerisation
         {:confirms #{CodeableConcept}, :zen/desc "Todo"},
         :repeatUnit
         {:confirms #{string},
          :type zen/string,
          :zen/desc "Todo"}}}}}}},
   :geometry {:confirms #{CodeableConcept}, :zen/desc "Todo"},
   :class {:confirms #{CodeableConcept}, :zen/desc "Todo"},
   :resourceType
   {:type zen/string, :const {:value "SubstancePolymer"}}}},
 SubstanceProtein
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "SubstanceProtein",
  :type zen/map,
  :zen/desc
  "A SubstanceProtein is defined as a single unit of a linear amino acid sequence, or a combination of subunits that are either covalently linked or have a defined invariant stoichiometric relationship. This includes all synthetic, recombinant and purified SubstanceProteins of defined sequence, whether the use is therapeutic or prophylactic. This set of elements will be used to describe albumins, coagulation factors, cytokines, growth factors, peptide/SubstanceProtein hormones, enzymes, toxins, toxoids, recombinant vaccines, and immunomodulators.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/SubstanceProtein",
  :keys
  {:subunit
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc
     "This subclause refers to the description of each subunit constituting the SubstanceProtein. A subunit is a linear sequence of amino acids linked through peptide bonds. The Subunit information shall be provided when the finished SubstanceProtein is a complex of multiple sequences; subunits are not used to delineate domains within a single sequence. Subunits are listed in order of decreasing length; sequences of the same length will be ordered by decreasing molecular weight; subunits that have identical sequences will be repeated multiple times",
     :keys
     {:subunit
      {:confirms #{integer},
       :type zen/integer,
       :zen/desc
       "Index of primary sequences of amino acids linked through peptide bonds in order of decreasing length. Sequences of the same length will be ordered by molecular weight. Subunits that have identical sequences will be repeated and have sequential subscripts"},
      :nTerminalModification
      {:confirms #{string},
       :type zen/string,
       :zen/desc
       "The name of the fragment modified at the N-terminal of the SubstanceProtein shall be specified"},
      :sequenceAttachment
      {:confirms #{Attachment},
       :zen/desc
       "The sequence information shall be provided enumerating the amino acids from N- to C-terminal end using standard single-letter amino acid codes. Uppercase shall be used for L-amino acids and lowercase for D-amino acids. Transcribed SubstanceProteins will always be described using the translated sequence; for synthetic peptide containing amino acids that are not represented with a single letter code an X should be used within the sequence. The modified amino acids will be distinguished by their position in the sequence"},
      :length
      {:confirms #{integer},
       :type zen/integer,
       :zen/desc
       "Length of linear sequences of amino acids contained in the subunit"},
      :nTerminalModificationId
      {:confirms #{Identifier},
       :zen/desc
       "Unique identifier for molecular fragment modification based on the ISO 11238 Substance ID"},
      :cTerminalModificationId
      {:confirms #{Identifier},
       :zen/desc
       "Unique identifier for molecular fragment modification based on the ISO 11238 Substance ID"},
      :cTerminalModification
      {:confirms #{string},
       :type zen/string,
       :zen/desc
       "The modification at the C-terminal shall be specified"},
      :sequence
      {:confirms #{string},
       :type zen/string,
       :zen/desc
       "The sequence information shall be provided enumerating the amino acids from N- to C-terminal end using standard single-letter amino acid codes. Uppercase shall be used for L-amino acids and lowercase for D-amino acids. Transcribed SubstanceProteins will always be described using the translated sequence; for synthetic peptide containing amino acids that are not represented with a single letter code an X should be used within the sequence. The modified amino acids will be distinguished by their position in the sequence"}}}},
   :numberOfSubunits
   {:confirms #{integer},
    :type zen/integer,
    :zen/desc
    "Number of linear sequences of amino acids linked through peptide bonds. The number of subunits constituting the SubstanceProtein shall be described. It is possible that the number of subunits can be variable"},
   :sequenceType
   {:confirms #{CodeableConcept},
    :zen/desc
    "The SubstanceProtein descriptive elements will only be used when a complete or partial amino acid sequence is available or derivable from a nucleic acid sequence"},
   :disulfideLinkage
   {:type zen/vector,
    :every
    {:confirms #{string},
     :type zen/string,
     :zen/desc
     "The disulphide bond between two cysteine residues either on the same subunit or on two different subunits shall be described. The position of the disulfide bonds in the SubstanceProtein shall be listed in increasing order of subunit number and position within subunit followed by the abbreviation of the amino acids involved. The disulfide linkage positions shall actually contain the amino acid Cysteine at the respective positions"}},
   :resourceType
   {:type zen/string, :const {:value "SubstanceProtein"}}}},
 SubstanceReferenceInformation
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "SubstanceReferenceInformation",
  :type zen/map,
  :zen/desc "Todo.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/SubstanceReferenceInformation",
  :keys
  {:gene
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc "Todo",
     :keys
     {:source
      {:type zen/vector,
       :every {:confirms #{Reference}, :zen/desc "Todo"}},
      :geneSequenceOrigin
      {:confirms #{CodeableConcept}, :zen/desc "Todo"},
      :gene {:confirms #{CodeableConcept}, :zen/desc "Todo"}}}},
   :classification
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc "Todo",
     :keys
     {:classification {:confirms #{CodeableConcept}, :zen/desc "Todo"},
      :domain {:confirms #{CodeableConcept}, :zen/desc "Todo"},
      :source
      {:type zen/vector,
       :every {:confirms #{Reference}, :zen/desc "Todo"}},
      :subtype
      {:type zen/vector,
       :every {:confirms #{CodeableConcept}, :zen/desc "Todo"}}}}},
   :comment {:confirms #{string}, :type zen/string, :zen/desc "Todo"},
   :target
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc "Todo",
     :keys
     {:target {:confirms #{Identifier}, :zen/desc "Todo"},
      :type {:confirms #{CodeableConcept}, :zen/desc "Todo"},
      :source
      {:type zen/vector,
       :every {:confirms #{Reference}, :zen/desc "Todo"}},
      :amount
      {:type zen/map,
       :zen/desc "Todo",
       :keys
       {:Quantity {:confirms #{Quantity}},
        :Range {:confirms #{Range}},
        :string {:confirms #{string}, :type zen/string}},
       :exclusive-keys #{#{:string :Range :Quantity}}},
      :organism {:confirms #{CodeableConcept}, :zen/desc "Todo"},
      :organismType {:confirms #{CodeableConcept}, :zen/desc "Todo"},
      :amountType {:confirms #{CodeableConcept}, :zen/desc "Todo"},
      :interaction {:confirms #{CodeableConcept}, :zen/desc "Todo"}}}},
   :geneElement
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc "Todo",
     :keys
     {:type {:confirms #{CodeableConcept}, :zen/desc "Todo"},
      :element {:confirms #{Identifier}, :zen/desc "Todo"},
      :source
      {:type zen/vector,
       :every {:confirms #{Reference}, :zen/desc "Todo"}}}}},
   :resourceType
   {:type zen/string,
    :const {:value "SubstanceReferenceInformation"}}}},
 SubstanceSourceMaterial
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "SubstanceSourceMaterial",
  :type zen/map,
  :zen/desc
  "Source material shall capture information on the taxonomic and anatomical origins as well as the fraction of a material that can result in or can be modified to form a substance. This set of data elements shall be used to define polymer substances isolated from biological matrices. Taxonomic and anatomical origins shall be described using a controlled vocabulary as required. This information is captured for naturally derived polymers ( . starch) and structurally diverse substances. For Organisms belonging to the Kingdom Plantae the Substance level defines the fresh material of a single species or infraspecies, the Herbal Drug and the Herbal preparation. For Herbal preparations, the fraction information will be captured at the Substance information level and additional information for herbal extracts will be captured at the Specified Substance Group 1 information level. See for further explanation the Substance Class: Structurally Diverse and the herbal annex.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/SubstanceSourceMaterial",
  :keys
  {:parentSubstanceName
   {:type zen/vector,
    :every
    {:confirms #{string},
     :type zen/string,
     :zen/desc
     "The parent substance of the Herbal Drug, or Herbal preparation"}},
   :organism
   {:confirms #{BackboneElement},
    :type zen/map,
    :zen/desc
    "This subclause describes the organism which the substance is derived from. For vaccines, the parent organism shall be specified based on these subclause elements. As an example, full taxonomy will be described for the Substance Name: ., Leaf",
    :keys
    {:intraspecificDescription
     {:confirms #{string},
      :type zen/string,
      :zen/desc
      "The intraspecific description of an organism shall be specified based on a controlled vocabulary. For Influenza Vaccine, the intraspecific description shall contain the syntax of the antigen in line with the WHO convention"},
     :species
     {:confirms #{CodeableConcept},
      :zen/desc
      "The species of an organism shall be specified; refers to the Latin epithet of the species of the plant/animal; it is present in names for species and infraspecies"},
     :hybrid
     {:confirms #{BackboneElement},
      :type zen/map,
      :zen/desc
      "4.9.13.8.1 Hybrid species maternal organism ID (Optional)",
      :keys
      {:paternalOrganismId
       {:confirms #{string},
        :type zen/string,
        :zen/desc
        "The identifier of the paternal species constituting the hybrid organism shall be specified based on a controlled vocabulary"},
       :maternalOrganismId
       {:confirms #{string},
        :type zen/string,
        :zen/desc
        "The identifier of the maternal species constituting the hybrid organism shall be specified based on a controlled vocabulary. For plants, the parents aren’t always known, and it is unlikely that it will be known which is maternal and which is paternal"},
       :hybridType
       {:confirms #{CodeableConcept},
        :zen/desc "The hybrid type of an organism shall be specified"},
       :maternalOrganismName
       {:confirms #{string},
        :type zen/string,
        :zen/desc
        "The name of the maternal species constituting the hybrid organism shall be specified. For plants, the parents aren’t always known, and it is unlikely that it will be known which is maternal and which is paternal"},
       :paternalOrganismName
       {:confirms #{string},
        :type zen/string,
        :zen/desc
        "The name of the paternal species constituting the hybrid organism shall be specified"}}},
     :family
     {:confirms #{CodeableConcept},
      :zen/desc "The family of an organism shall be specified"},
     :organismGeneral
     {:confirms #{BackboneElement},
      :type zen/map,
      :zen/desc "4.9.13.7.1 Kingdom (Conditional)",
      :keys
      {:kingdom
       {:confirms #{CodeableConcept},
        :zen/desc "The kingdom of an organism shall be specified"},
       :phylum
       {:confirms #{CodeableConcept},
        :zen/desc "The phylum of an organism shall be specified"},
       :class
       {:confirms #{CodeableConcept},
        :zen/desc "The class of an organism shall be specified"},
       :order
       {:confirms #{CodeableConcept},
        :zen/desc "The order of an organism shall be specified,"}}},
     :author
     {:type zen/vector,
      :every
      {:confirms #{BackboneElement},
       :type zen/map,
       :zen/desc "4.9.13.6.1 Author type (Conditional)",
       :keys
       {:authorDescription
        {:confirms #{string},
         :type zen/string,
         :zen/desc
         "The author of an organism species shall be specified. The author year of an organism shall also be specified when applicable; refers to the year in which the first author(s) published the infraspecific plant/animal name (of any rank)"},
        :authorType
        {:confirms #{CodeableConcept},
         :zen/desc
         "The type of author of an organism species shall be specified. The parenthetical author of an organism species refers to the first author who published the plant/animal name (of any rank). The primary author of an organism species refers to the first author(s), who validly published the plant/animal name"}}}},
     :intraspecificType
     {:confirms #{CodeableConcept},
      :zen/desc
      "The Intraspecific type of an organism shall be specified"},
     :genus
     {:confirms #{CodeableConcept},
      :zen/desc
      "The genus of an organism shall be specified; refers to the Latin epithet of the genus element of the plant/animal scientific name; it is present in names for genera, species and infraspecies"}}},
   :partDescription
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc "To do",
     :keys
     {:part
      {:confirms #{CodeableConcept},
       :zen/desc
       "Entity of anatomical origin of source material within an organism"},
      :partLocation
      {:confirms #{CodeableConcept},
       :zen/desc
       "The detailed anatomic location when the part can be extracted from different anatomical locations of the organism. Multiple alternative locations may apply"}}}},
   :developmentStage
   {:confirms #{CodeableConcept},
    :zen/desc
    "Stage of life for animals, plants, insects and microorganisms. This information shall be provided only when the substance is significantly different in these stages (e.g. foetal bovine serum)"},
   :fractionDescription
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc
     "Many complex materials are fractions of parts of plants, animals, or minerals. Fraction elements are often necessary to define both Substances and Specified Group 1 Substances. For substances derived from Plants, fraction information will be captured at the Substance information level ( . Oils, Juices and Exudates). Additional information for Extracts, such as extraction solvent composition, will be captured at the Specified Substance Group 1 information level. For plasma-derived products fraction information will be captured at the Substance and the Specified Substance Group 1 levels",
     :keys
     {:fraction
      {:confirms #{string},
       :type zen/string,
       :zen/desc
       "This element is capturing information about the fraction of a plant part, or human plasma for fractionation"},
      :materialType
      {:confirms #{CodeableConcept},
       :zen/desc
       "The specific type of the material constituting the component. For Herbal preparations the particulars of the extracts (liquid/dry) is described in Specified Substance Group 1"}}}},
   :sourceMaterialState
   {:confirms #{CodeableConcept},
    :zen/desc "The state of the source material when extracted"},
   :resourceType
   {:type zen/string, :const {:value "SubstanceSourceMaterial"}},
   :countryOfOrigin
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc
     "The country where the plant material is harvested or the countries where the plasma is sourced from as laid down in accordance with the Plasma Master File. For “Plasma-derived substances” the attribute country of origin provides information about the countries used for the manufacturing of the Cryopoor plama or Crioprecipitate"}},
   :sourceMaterialType
   {:confirms #{CodeableConcept},
    :zen/desc
    "The type of the source material shall be specified based on a controlled vocabulary. For vaccines, this subclause refers to the class of infectious agent"},
   :organismId
   {:confirms #{Identifier},
    :zen/desc
    "The unique identifier associated with the source material parent organism shall be specified"},
   :organismName
   {:confirms #{string},
    :type zen/string,
    :zen/desc
    "The organism accepted Scientific name shall be provided based on the organism taxonomy"},
   :parentSubstanceId
   {:type zen/vector,
    :every
    {:confirms #{Identifier},
     :zen/desc
     "The parent of the herbal drug Ginkgo biloba, Leaf is the substance ID of the substance (fresh) of Ginkgo biloba L. or Ginkgo biloba L. (Whole plant)"}},
   :geographicalLocation
   {:type zen/vector,
    :every
    {:confirms #{string},
     :type zen/string,
     :zen/desc
     "The place/region where the plant is harvested or the places/regions where the animal source material has its habitat"}},
   :sourceMaterialClass
   {:confirms #{CodeableConcept},
    :zen/desc
    "General high level classification of the source material specific to the origin of the material"}}},
 SubstanceSpecification
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "SubstanceSpecification",
  :type zen/map,
  :zen/desc
  "The detailed description of a substance, typically at a level beyond what is used for prescribing.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/SubstanceSpecification",
  :keys
  {:description
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Textual description of the substance"},
   :property
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc
     "General specifications for this substance, including how it is related to other substances",
     :keys
     {:amount
      {:type zen/map,
       :zen/desc "Quantitative value for this property",
       :keys
       {:Quantity {:confirms #{Quantity}},
        :string {:confirms #{string}, :type zen/string}},
       :exclusive-keys #{#{:string :Quantity}}},
      :parameters
      {:confirms #{string},
       :type zen/string,
       :zen/desc
       "Parameters that were used in the measurement of a property (e.g. for viscosity: measured at 20C with a pH of 7.1)"},
      :category
      {:confirms #{CodeableConcept},
       :zen/desc
       "A category for this property, e.g. Physical, Chemical, Enzymatic"},
      :definingSubstance
      {:type zen/map,
       :zen/desc
       "A substance upon which a defining property depends (e.g. for solubility: in water, in alcohol)",
       :keys
       {:Reference {:confirms #{Reference}},
        :CodeableConcept {:confirms #{CodeableConcept}}},
       :exclusive-keys #{#{:CodeableConcept :Reference}}},
      :code
      {:confirms #{CodeableConcept},
       :zen/desc
       "Property type e.g. viscosity, pH, isoelectric point"}}}},
   :name
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:name},
     :type zen/map,
     :zen/desc "Names applicable to this substance",
     :keys
     {:official
      {:type zen/vector,
       :every
       {:confirms #{BackboneElement},
        :type zen/map,
        :zen/desc "Details of the official nature of this name",
        :keys
        {:date
         {:confirms #{dateTime},
          :type zen/datetime,
          :zen/desc "Date of official name change"},
         :authority
         {:confirms #{CodeableConcept},
          :zen/desc "Which authority uses this official name"},
         :status
         {:confirms #{CodeableConcept},
          :zen/desc "The status of the official name"}}}},
      :jurisdiction
      {:type zen/vector,
       :every
       {:confirms #{CodeableConcept},
        :zen/desc "The jurisdiction where this name applies"}},
      :name
      {:confirms #{string},
       :type zen/string,
       :zen/desc "The actual name"},
      :type {:confirms #{CodeableConcept}, :zen/desc "Name type"},
      :source
      {:type zen/vector,
       :every
       {:confirms #{Reference}, :zen/desc "Supporting literature"}},
      :status
      {:confirms #{CodeableConcept},
       :zen/desc "The status of the name"},
      :language
      {:type zen/vector,
       :every
       {:confirms #{CodeableConcept},
        :zen/desc "Language of the name"}},
      :synonym
      {:type zen/vector, :every #:zen{:desc "A synonym of this name"}},
      :translation
      {:type zen/vector,
       :every #:zen{:desc "A translation for this name"}},
      :preferred
      {:confirms #{boolean},
       :type zen/boolean,
       :zen/desc "If this is the preferred name for this substance"},
      :domain
      {:type zen/vector,
       :every
       {:confirms #{CodeableConcept},
        :zen/desc
        "The use context of this name for example if there is a different name a drug active ingredient as opposed to a food colour additive"}}}}},
   :referenceInformation
   {:confirms #{Reference},
    :zen/desc "General information detailing this substance"},
   :relationship
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc
     "A link between this substance and another, with details of the relationship",
     :keys
     {:amount
      {:type zen/map,
       :zen/desc
       "A numeric factor for the relationship, for instance to express that the salt of a substance has some percentage of the active substance in relation to some other",
       :keys
       {:Quantity {:confirms #{Quantity}},
        :Range {:confirms #{Range}},
        :Ratio {:confirms #{Ratio}},
        :string {:confirms #{string}, :type zen/string}},
       :exclusive-keys #{#{:string :Range :Ratio :Quantity}}},
      :substance
      {:type zen/map,
       :zen/desc
       "A pointer to another substance, as a resource or just a representational code",
       :keys
       {:Reference {:confirms #{Reference}},
        :CodeableConcept {:confirms #{CodeableConcept}}},
       :exclusive-keys #{#{:CodeableConcept :Reference}}},
      :relationship
      {:confirms #{CodeableConcept},
       :zen/desc
       "For example \"salt to parent\", \"active moiety\", \"starting material\""},
      :amountRatioLowLimit
      {:confirms #{Ratio}, :zen/desc "For use when the numeric"},
      :isDefining
      {:confirms #{boolean},
       :type zen/boolean,
       :zen/desc
       "For example where an enzyme strongly bonds with a particular substance, this is a defining relationship for that enzyme, out of several possible substance relationships"},
      :amountType
      {:confirms #{CodeableConcept},
       :zen/desc
       "An operator for the amount, for example \"average\", \"approximately\", \"less than\""},
      :source
      {:type zen/vector,
       :every
       {:confirms #{Reference}, :zen/desc "Supporting literature"}}}}},
   :type
   {:confirms #{CodeableConcept},
    :zen/desc
    "High level categorization, e.g. polymer or nucleic acid"},
   :moiety
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc "Moiety, for structural modifications",
     :keys
     {:stereochemistry
      {:confirms #{CodeableConcept}, :zen/desc "Stereochemistry type"},
      :identifier
      {:confirms #{Identifier},
       :zen/desc "Identifier by which this moiety substance is known"},
      :amount
      {:type zen/map,
       :zen/desc "Quantitative value for this moiety",
       :keys
       {:Quantity {:confirms #{Quantity}},
        :string {:confirms #{string}, :type zen/string}},
       :exclusive-keys #{#{:string :Quantity}}},
      :opticalActivity
      {:confirms #{CodeableConcept},
       :zen/desc "Optical activity type"},
      :role
      {:confirms #{CodeableConcept},
       :zen/desc "Role that the moiety is playing"},
      :name
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Textual name for this moiety substance"},
      :molecularFormula
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Molecular formula"}}}},
   :resourceType
   {:type zen/string, :const {:value "SubstanceSpecification"}},
   :source
   {:type zen/vector,
    :every
    {:confirms #{Reference}, :zen/desc "Supporting literature"}},
   :nucleicAcid
   {:confirms #{Reference},
    :zen/desc "Data items specific to nucleic acids"},
   :structure
   {:confirms #{BackboneElement},
    :type zen/map,
    :zen/desc "Structural information",
    :keys
    {:opticalActivity
     {:confirms #{CodeableConcept}, :zen/desc "Optical activity type"},
     :stereochemistry
     {:confirms #{CodeableConcept}, :zen/desc "Stereochemistry type"},
     :representation
     {:type zen/vector,
      :every
      {:confirms #{BackboneElement},
       :type zen/map,
       :zen/desc "Molecular structural representation",
       :keys
       {:attachment
        {:confirms #{Attachment},
         :zen/desc
         "An attached file with the structural representation"},
        :type
        {:confirms #{CodeableConcept},
         :zen/desc
         "The type of structure (e.g. Full, Partial, Representative)"},
        :representation
        {:confirms #{string},
         :type zen/string,
         :zen/desc
         "The structural representation as text string in a format e.g. InChI, SMILES, MOLFILE, CDX"}}}},
     :molecularFormulaByMoiety
     {:confirms #{string},
      :type zen/string,
      :zen/desc
      "Specified per moiety according to the Hill system, i.e. first C, then H, then alphabetical, each moiety separated by a dot"},
     :molecularFormula
     {:confirms #{string},
      :type zen/string,
      :zen/desc "Molecular formula"},
     :molecularWeight
     #:zen{:desc
           "The molecular weight or weight range (for proteins, polymers or nucleic acids)"},
     :isotope
     {:type zen/vector,
      :every
      {:confirms #{BackboneElement},
       :type zen/map,
       :zen/desc
       "Applicable for single substances that contain a radionuclide or a non-natural isotopic ratio",
       :keys
       {:halfLife
        {:confirms #{Quantity},
         :zen/desc "Half life - for a non-natural nuclide"},
        :substitution
        {:confirms #{CodeableConcept},
         :zen/desc
         "The type of isotopic substitution present in a single substance"},
        :name
        {:confirms #{CodeableConcept},
         :zen/desc
         "Substance name for each non-natural or radioisotope"},
        :identifier
        {:confirms #{Identifier},
         :zen/desc
         "Substance identifier for each non-natural or radioisotope"},
        :molecularWeight
        {:confirms #{BackboneElement},
         :type zen/map,
         :zen/desc
         "The molecular weight or weight range (for proteins, polymers or nucleic acids)",
         :keys
         {:method
          {:confirms #{CodeableConcept},
           :zen/desc
           "The method by which the molecular weight was determined"},
          :type
          {:confirms #{CodeableConcept},
           :zen/desc
           "Type of molecular weight such as exact, average (also known as. number average), weight average"},
          :amount
          {:confirms #{Quantity},
           :zen/desc
           "Used to capture quantitative values for a variety of elements. If only limits are given, the arithmetic mean would be the average. If only a single definite value for a given element is given, it would be captured in this field"}}}}}},
     :source
     {:type zen/vector,
      :every
      {:confirms #{Reference}, :zen/desc "Supporting literature"}}}},
   :status
   {:confirms #{CodeableConcept},
    :zen/desc
    "Status of substance within the catalogue e.g. approved"},
   :comment
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Textual comment about this record of a substance"},
   :code
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc "Codes associated with the substance",
     :keys
     {:status
      {:confirms #{CodeableConcept},
       :zen/desc "Status of the code assignment"},
      :comment
      {:confirms #{string},
       :type zen/string,
       :zen/desc
       "Any comment can be provided in this field, if necessary"},
      :statusDate
      {:confirms #{dateTime},
       :type zen/datetime,
       :zen/desc
       "The date at which the code status is changed as part of the terminology maintenance"},
      :source
      {:type zen/vector,
       :every
       {:confirms #{Reference}, :zen/desc "Supporting literature"}},
      :code
      {:confirms #{CodeableConcept}, :zen/desc "The specific code"}}}},
   :identifier
   {:confirms #{Identifier},
    :zen/desc "Identifier by which this substance is known"},
   :molecularWeight
   {:type zen/vector,
    :every
    #:zen{:desc
          "The molecular weight or weight range (for proteins, polymers or nucleic acids)"}},
   :polymer
   {:confirms #{Reference},
    :zen/desc "Data items specific to polymers"},
   :protein
   {:confirms #{Reference},
    :zen/desc "Data items specific to proteins"},
   :domain
   {:confirms #{CodeableConcept},
    :zen/desc
    "If the substance applies to only human or veterinary use"},
   :sourceMaterial
   {:confirms #{Reference},
    :zen/desc
    "Material or taxonomic/anatomical source for the substance"}}},
 SupplyDelivery
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "SupplyDelivery",
  :type zen/map,
  :zen/desc "Record of delivery of what is supplied.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/SupplyDelivery",
  :keys
  {:patient
   {:confirms #{Reference},
    :zen/desc "Patient for whom the item is supplied"},
   :supplier {:confirms #{Reference}, :zen/desc "Dispenser"},
   :suppliedItem
   {:confirms #{BackboneElement},
    :type zen/map,
    :zen/desc "The item that is delivered or supplied",
    :keys
    {:quantity
     {:confirms #{Quantity SimpleQuantity},
      :zen/desc "Amount dispensed"},
     :item
     {:type zen/map,
      :zen/desc "Medication, Substance, or Device supplied",
      :keys
      {:CodeableConcept {:confirms #{CodeableConcept}},
       :Reference {:confirms #{Reference}}},
      :exclusive-keys #{#{:CodeableConcept :Reference}}}}},
   :type
   {:confirms #{CodeableConcept},
    :zen/desc "Category of dispense event"},
   :resourceType {:type zen/string, :const {:value "SupplyDelivery"}},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc
    "in-progress | completed | abandoned | entered-in-error"},
   :identifier
   {:type zen/vector,
    :every {:confirms #{Identifier}, :zen/desc "External identifier"}},
   :basedOn
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "Fulfills plan, proposal or order"}},
   :partOf
   {:type zen/vector,
    :every
    {:confirms #{Reference}, :zen/desc "Part of referenced event"}},
   :receiver
   {:type zen/vector,
    :every
    {:confirms #{Reference}, :zen/desc "Who collected the Supply"}},
   :destination
   {:confirms #{Reference}, :zen/desc "Where the Supply was sent"},
   :occurrence
   {:type zen/map,
    :zen/desc "When event occurred",
    :keys
    {:dateTime {:confirms #{dateTime}, :type zen/datetime},
     :Period {:confirms #{Period}},
     :Timing {:confirms #{Timing}}},
    :exclusive-keys #{#{:dateTime :Period :Timing}}}}},
 SupplyRequest
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "SupplyRequest",
  :require #{:item :quantity},
  :type zen/map,
  :zen/desc
  "A record of a request for a medication, substance or device used in the healthcare setting.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/SupplyRequest",
  :keys
  {:category
   {:confirms #{CodeableConcept},
    :zen/desc "The kind of supply (central, non-stock, etc.)"},
   :supplier
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "Who is intended to fulfill the request"}},
   :deliverTo
   {:confirms #{Reference}, :zen/desc "The destination of the supply"},
   :item
   {:type zen/map,
    :zen/desc
    "Medication, Substance, or Device requested to be supplied",
    :keys
    {:CodeableConcept {:confirms #{CodeableConcept}},
     :Reference {:confirms #{Reference}}},
    :exclusive-keys #{#{:CodeableConcept :Reference}}},
   :reasonCode
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "The reason why the supply item was requested"}},
   :authoredOn
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "When the request was made"},
   :resourceType {:type zen/string, :const {:value "SupplyRequest"}},
   :deliverFrom
   {:confirms #{Reference}, :zen/desc "The origin of the supply"},
   :requester
   {:confirms #{Reference}, :zen/desc "Individual making the request"},
   :priority
   {:confirms #{code},
    :type zen/string,
    :zen/desc "routine | urgent | asap | stat"},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc "draft | active | suspended +"},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier},
     :zen/desc "Business Identifier for SupplyRequest"}},
   :quantity
   {:confirms #{Quantity},
    :zen/desc "The requested amount of the item indicated"},
   :parameter
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc "Ordered item details",
     :keys
     {:code {:confirms #{CodeableConcept}, :zen/desc "Item detail"},
      :value
      {:type zen/map,
       :zen/desc "Value of detail",
       :keys
       {:CodeableConcept {:confirms #{CodeableConcept}},
        :Quantity {:confirms #{Quantity}},
        :Range {:confirms #{Range}},
        :boolean {:confirms #{boolean}, :type zen/boolean}},
       :exclusive-keys
       #{#{:Range :CodeableConcept :Quantity :boolean}}}}}},
   :occurrence
   {:type zen/map,
    :zen/desc "When the request should be fulfilled",
    :keys
    {:dateTime {:confirms #{dateTime}, :type zen/datetime},
     :Period {:confirms #{Period}},
     :Timing {:confirms #{Timing}}},
    :exclusive-keys #{#{:dateTime :Period :Timing}}},
   :reasonReference
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "The reason why the supply item was requested"}}}},
 Task
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "Task",
  :require #{:status :intent},
  :type zen/map,
  :zen/desc "A task to be performed.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url "http://hl7.org/fhir/StructureDefinition/Task",
  :keys
  {:restriction
   {:confirms #{BackboneElement},
    :type zen/map,
    :zen/desc "Constraints on fulfillment tasks",
    :keys
    {:repetitions
     {:confirms #{positiveInt},
      :type zen/integer,
      :zen/desc "How many times to repeat"},
     :recipient
     {:type zen/vector,
      :every
      {:confirms #{Reference},
       :zen/desc "For whom is fulfillment sought?"}},
     :period
     {:confirms #{Period}, :zen/desc "When fulfillment sought"}}},
   :description
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Human-readable explanation of task"},
   :performerType
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept}, :zen/desc "Requested performer"}},
   :executionPeriod
   {:confirms #{Period}, :zen/desc "Start and end time of execution"},
   :insurance
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "Associated insurance coverage"}},
   :instantiatesCanonical
   {:confirms #{canonical},
    :type zen/string,
    :zen/desc "Formal definition of task"},
   :instantiatesUri
   {:confirms #{uri},
    :type zen/string,
    :zen/desc "Formal definition of task"},
   :relevantHistory
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "Key events in history of the Task"}},
   :encounter
   {:confirms #{Reference},
    :zen/desc "Healthcare event during which this task originated"},
   :reasonCode
   {:confirms #{CodeableConcept}, :zen/desc "Why task is needed"},
   :statusReason
   {:confirms #{CodeableConcept},
    :zen/desc "Reason for current status"},
   :authoredOn
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "Task Creation Date"},
   :resourceType {:type zen/string, :const {:value "Task"}},
   :output
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:value :type},
     :type zen/map,
     :zen/desc "Information produced as part of task",
     :keys
     {:value
      {:type zen/map,
       :zen/desc "Result of output",
       :keys
       {:unsignedInt {:confirms #{unsignedInt}, :type zen/integer},
        :Signature {:confirms #{Signature}},
        :markdown {:confirms #{markdown}, :type zen/string},
        :date {:confirms #{date}, :type zen/date},
        :Dosage {:confirms #{Dosage}},
        :ContactDetail {:confirms #{ContactDetail}},
        :RelatedArtifact {:confirms #{RelatedArtifact}},
        :instant {:confirms #{instant}, :type zen/string},
        :UsageContext {:confirms #{UsageContext}},
        :time {:confirms #{time}, :type zen/string},
        :DataRequirement {:confirms #{DataRequirement}},
        :base64Binary {:confirms #{base64Binary}, :type zen/string},
        :Meta {:confirms #{Meta}},
        :Distance {:confirms #{Distance}},
        :SampledData {:confirms #{SampledData}},
        :TriggerDefinition {:confirms #{TriggerDefinition}},
        :Identifier {:confirms #{Identifier}},
        :string {:confirms #{string}, :type zen/string},
        :Address {:confirms #{Address}},
        :Expression {:confirms #{Expression}},
        :dateTime {:confirms #{dateTime}, :type zen/datetime},
        :Range {:confirms #{Range}},
        :integer {:confirms #{integer}, :type zen/integer},
        :Ratio {:confirms #{Ratio}},
        :oid {:confirms #{oid}, :type zen/string},
        :ContactPoint {:confirms #{ContactPoint}},
        :Money {:confirms #{Money}},
        :decimal {:confirms #{decimal}, :type zen/number},
        :id {:confirms #{id}, :type zen/string},
        :Attachment {:confirms #{Attachment}},
        :Contributor {:confirms #{Contributor}},
        :Period {:confirms #{Period}},
        :canonical {:confirms #{canonical}, :type zen/string},
        :url {:confirms #{url}, :type zen/string},
        :code {:confirms #{code}, :type zen/string},
        :HumanName {:confirms #{HumanName}},
        :positiveInt {:confirms #{positiveInt}, :type zen/integer},
        :ParameterDefinition {:confirms #{ParameterDefinition}},
        :Coding {:confirms #{Coding}},
        :Timing {:confirms #{Timing}},
        :Duration {:confirms #{Duration}},
        :uri {:confirms #{uri}, :type zen/string},
        :CodeableConcept {:confirms #{CodeableConcept}},
        :uuid {:confirms #{uuid}, :type zen/string},
        :Count {:confirms #{Count}},
        :Quantity {:confirms #{Quantity}},
        :boolean {:confirms #{boolean}, :type zen/boolean},
        :Annotation {:confirms #{Annotation}},
        :Age {:confirms #{Age}},
        :Reference {:confirms #{Reference}}},
       :exclusive-keys
       #{#{:unsignedInt
           :Signature
           :markdown
           :date
           :Dosage
           :ContactDetail
           :RelatedArtifact
           :instant
           :UsageContext
           :time
           :DataRequirement
           :base64Binary
           :Meta
           :Distance
           :SampledData
           :TriggerDefinition
           :Identifier
           :string
           :Address
           :Expression
           :dateTime
           :Range
           :integer
           :Ratio
           :oid
           :ContactPoint
           :Money
           :decimal
           :id
           :Attachment
           :Contributor
           :Period
           :canonical
           :url
           :code
           :HumanName
           :positiveInt
           :ParameterDefinition
           :Coding
           :Timing
           :Duration
           :uri
           :CodeableConcept
           :uuid
           :Count
           :Quantity
           :boolean
           :Annotation
           :Age
           :Reference}}},
      :type
      {:confirms #{CodeableConcept}, :zen/desc "Label for output"}}}},
   :businessStatus
   {:confirms #{CodeableConcept},
    :zen/desc "E.g. \"Specimen collected\", \"IV prepped\""},
   :note
   {:type zen/vector,
    :every
    {:confirms #{Annotation},
     :zen/desc "Comments made about the task"}},
   :for {:confirms #{Reference}, :zen/desc "Beneficiary of the Task"},
   :requester
   {:confirms #{Reference},
    :zen/desc "Who is asking for task to be done"},
   :lastModified
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "Task Last Modified Date"},
   :priority
   {:confirms #{code},
    :type zen/string,
    :zen/desc "routine | urgent | asap | stat"},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc "draft | requested | received | accepted | +"},
   :groupIdentifier
   {:confirms #{Identifier}, :zen/desc "Requisition or grouper id"},
   :code {:confirms #{CodeableConcept}, :zen/desc "Task Type"},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier}, :zen/desc "Task Instance Identifier"}},
   :intent
   {:confirms #{code},
    :type zen/string,
    :zen/desc
    "unknown | proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option"},
   :focus {:confirms #{Reference}, :zen/desc "What task is acting on"},
   :input
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:value :type},
     :type zen/map,
     :zen/desc "Information used to perform task",
     :keys
     {:value
      {:type zen/map,
       :zen/desc "Content to use in performing the task",
       :keys
       {:unsignedInt {:confirms #{unsignedInt}, :type zen/integer},
        :Signature {:confirms #{Signature}},
        :markdown {:confirms #{markdown}, :type zen/string},
        :date {:confirms #{date}, :type zen/date},
        :Dosage {:confirms #{Dosage}},
        :ContactDetail {:confirms #{ContactDetail}},
        :RelatedArtifact {:confirms #{RelatedArtifact}},
        :instant {:confirms #{instant}, :type zen/string},
        :UsageContext {:confirms #{UsageContext}},
        :time {:confirms #{time}, :type zen/string},
        :DataRequirement {:confirms #{DataRequirement}},
        :base64Binary {:confirms #{base64Binary}, :type zen/string},
        :Meta {:confirms #{Meta}},
        :Distance {:confirms #{Distance}},
        :SampledData {:confirms #{SampledData}},
        :TriggerDefinition {:confirms #{TriggerDefinition}},
        :Identifier {:confirms #{Identifier}},
        :string {:confirms #{string}, :type zen/string},
        :Address {:confirms #{Address}},
        :Expression {:confirms #{Expression}},
        :dateTime {:confirms #{dateTime}, :type zen/datetime},
        :Range {:confirms #{Range}},
        :integer {:confirms #{integer}, :type zen/integer},
        :Ratio {:confirms #{Ratio}},
        :oid {:confirms #{oid}, :type zen/string},
        :ContactPoint {:confirms #{ContactPoint}},
        :Money {:confirms #{Money}},
        :decimal {:confirms #{decimal}, :type zen/number},
        :id {:confirms #{id}, :type zen/string},
        :Attachment {:confirms #{Attachment}},
        :Contributor {:confirms #{Contributor}},
        :Period {:confirms #{Period}},
        :canonical {:confirms #{canonical}, :type zen/string},
        :url {:confirms #{url}, :type zen/string},
        :code {:confirms #{code}, :type zen/string},
        :HumanName {:confirms #{HumanName}},
        :positiveInt {:confirms #{positiveInt}, :type zen/integer},
        :ParameterDefinition {:confirms #{ParameterDefinition}},
        :Coding {:confirms #{Coding}},
        :Timing {:confirms #{Timing}},
        :Duration {:confirms #{Duration}},
        :uri {:confirms #{uri}, :type zen/string},
        :CodeableConcept {:confirms #{CodeableConcept}},
        :uuid {:confirms #{uuid}, :type zen/string},
        :Count {:confirms #{Count}},
        :Quantity {:confirms #{Quantity}},
        :boolean {:confirms #{boolean}, :type zen/boolean},
        :Annotation {:confirms #{Annotation}},
        :Age {:confirms #{Age}},
        :Reference {:confirms #{Reference}}},
       :exclusive-keys
       #{#{:unsignedInt
           :Signature
           :markdown
           :date
           :Dosage
           :ContactDetail
           :RelatedArtifact
           :instant
           :UsageContext
           :time
           :DataRequirement
           :base64Binary
           :Meta
           :Distance
           :SampledData
           :TriggerDefinition
           :Identifier
           :string
           :Address
           :Expression
           :dateTime
           :Range
           :integer
           :Ratio
           :oid
           :ContactPoint
           :Money
           :decimal
           :id
           :Attachment
           :Contributor
           :Period
           :canonical
           :url
           :code
           :HumanName
           :positiveInt
           :ParameterDefinition
           :Coding
           :Timing
           :Duration
           :uri
           :CodeableConcept
           :uuid
           :Count
           :Quantity
           :boolean
           :Annotation
           :Age
           :Reference}}},
      :type
      {:confirms #{CodeableConcept},
       :zen/desc "Label for the input"}}}},
   :basedOn
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "Request fulfilled by this task"}},
   :partOf
   {:type zen/vector,
    :every {:confirms #{Reference}, :zen/desc "Composite task"}},
   :location {:confirms #{Reference}, :zen/desc "Where task occurs"},
   :owner {:confirms #{Reference}, :zen/desc "Responsible individual"},
   :reasonReference
   {:confirms #{Reference}, :zen/desc "Why task is needed"}}},
 TerminologyCapabilities
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "TerminologyCapabilities",
  :require #{:date :status :kind},
  :type zen/map,
  :zen/desc
  "A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR Terminology Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/TerminologyCapabilities",
  :keys
  {:description
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc
    "Natural language description of the terminology capabilities"},
   :date
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "Date last changed"},
   :publisher
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name of the publisher (organization or individual)"},
   :jurisdiction
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc
     "Intended jurisdiction for terminology capabilities (if applicable)"}},
   :purpose
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc "Why this terminology capabilities is defined"},
   :name
   {:confirms #{string},
    :type zen/string,
    :zen/desc
    "Name for this terminology capabilities (computer friendly)"},
   :useContext
   {:type zen/vector,
    :every
    {:confirms #{UsageContext},
     :zen/desc "The context that the content is intended to support"}},
   :copyright
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc "Use and/or publishing restrictions"},
   :experimental
   {:confirms #{boolean},
    :type zen/boolean,
    :zen/desc "For testing purposes, not real usage"},
   :resourceType
   {:type zen/string, :const {:value "TerminologyCapabilities"}},
   :expansion
   {:confirms #{BackboneElement},
    :type zen/map,
    :zen/desc
    "Information about the [ValueSet/$expand](valueset-operation-expand.html) operation",
    :keys
    {:hierarchical
     {:confirms #{boolean},
      :type zen/boolean,
      :zen/desc "Whether the server can return nested value sets"},
     :paging
     {:confirms #{boolean},
      :type zen/boolean,
      :zen/desc "Whether the server supports paging on expansion"},
     :parameter
     {:type zen/vector,
      :every
      {:confirms #{BackboneElement},
       :require #{:name},
       :type zen/map,
       :zen/desc "Supported expansion parameter",
       :keys
       {:name
        {:confirms #{code},
         :type zen/string,
         :zen/desc "Expansion Parameter name"},
        :documentation
        {:confirms #{string},
         :type zen/string,
         :zen/desc "Description of support for parameter"}}}},
     :textFilter
     {:confirms #{markdown},
      :type zen/string,
      :zen/desc "Documentation about text searching works"},
     :incomplete
     {:confirms #{boolean},
      :type zen/boolean,
      :zen/desc "Allow request for incomplete expansions?"}}},
   :title
   {:confirms #{string},
    :type zen/string,
    :zen/desc
    "Name for this terminology capabilities (human friendly)"},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc "draft | active | retired | unknown"},
   :validateCode
   {:confirms #{BackboneElement},
    :require #{:translations},
    :type zen/map,
    :zen/desc
    "Information about the [ValueSet/$validate-code](valueset-operation-validate-code.html) operation",
    :keys
    {:translations
     {:confirms #{boolean},
      :type zen/boolean,
      :zen/desc "Whether translations are validated"}}},
   :kind
   {:confirms #{code},
    :type zen/string,
    :zen/desc "instance | capability | requirements"},
   :translation
   {:confirms #{BackboneElement},
    :require #{:needsMap},
    :type zen/map,
    :zen/desc
    "Information about the [ConceptMap/$translate](conceptmap-operation-translate.html) operation",
    :keys
    {:needsMap
     {:confirms #{boolean},
      :type zen/boolean,
      :zen/desc "Whether the client must identify the map"}}},
   :url
   {:confirms #{uri},
    :type zen/string,
    :zen/desc
    "Canonical identifier for this terminology capabilities, represented as a URI (globally unique)"},
   :codeSystem
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc "A code system supported by the server",
     :keys
     {:subsumption
      {:confirms #{boolean},
       :type zen/boolean,
       :zen/desc "Whether subsumption is supported"},
      :uri
      {:confirms #{canonical},
       :type zen/string,
       :zen/desc "URI for the Code System"},
      :version
      {:type zen/vector,
       :every
       {:confirms #{BackboneElement},
        :type zen/map,
        :zen/desc "Version of Code System supported",
        :keys
        {:isDefault
         {:confirms #{boolean},
          :type zen/boolean,
          :zen/desc
          "If this is the default version for this code system"},
         :filter
         {:type zen/vector,
          :every
          {:confirms #{BackboneElement},
           :require #{:op :code},
           :type zen/map,
           :zen/desc "Filter Properties supported",
           :keys
           {:op
            {:minItems 1,
             :type zen/vector,
             :every
             {:confirms #{code},
              :type zen/string,
              :zen/desc "Operations supported for the property"}},
            :code
            {:confirms #{code},
             :type zen/string,
             :zen/desc "Code of the property supported"}}}},
         :code
         {:confirms #{string},
          :type zen/string,
          :zen/desc "Version identifier for this version"},
         :compositional
         {:confirms #{boolean},
          :type zen/boolean,
          :zen/desc "If compositional grammar is supported"},
         :property
         {:type zen/vector,
          :every
          {:confirms #{code},
           :type zen/string,
           :zen/desc "Properties supported for $lookup"}},
         :language
         {:type zen/vector,
          :every
          {:confirms #{code},
           :type zen/string,
           :zen/desc "Language Displays supported"}}}}}}}},
   :software
   {:confirms #{BackboneElement},
    :require #{:name},
    :type zen/map,
    :zen/desc
    "Software that is covered by this terminology capability statement",
    :keys
    {:name
     {:confirms #{string},
      :type zen/string,
      :zen/desc "A name the software is known by"},
     :version
     {:confirms #{string},
      :type zen/string,
      :zen/desc "Version covered by this statement"}}},
   :version
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Business version of the terminology capabilities"},
   :contact
   {:type zen/vector,
    :every
    {:confirms #{ContactDetail},
     :zen/desc "Contact details for the publisher"}},
   :implementation
   {:confirms #{BackboneElement},
    :require #{:description},
    :type zen/map,
    :zen/desc "If this describes a specific instance",
    :keys
    {:url
     {:confirms #{url},
      :type zen/string,
      :zen/desc "Base URL for the implementation"},
     :description
     {:confirms #{string},
      :type zen/string,
      :zen/desc "Describes this specific instance"}}},
   :codeSearch
   {:confirms #{code}, :type zen/string, :zen/desc "explicit | all"},
   :lockedDate
   {:confirms #{boolean},
    :type zen/boolean,
    :zen/desc "Whether lockedDate is supported"},
   :closure
   {:confirms #{BackboneElement},
    :type zen/map,
    :zen/desc
    "Information about the [ConceptMap/$closure](conceptmap-operation-closure.html) operation",
    :keys
    {:translation
     {:confirms #{boolean},
      :type zen/boolean,
      :zen/desc "If cross-system closure is supported"}}}}},
 TestReport
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "TestReport",
  :require #{:testScript :status :result},
  :type zen/map,
  :zen/desc
  "A summary of information based on the results of executing a TestScript.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/TestReport",
  :keys
  {:tester
   {:confirms #{string},
    :type zen/string,
    :zen/desc
    "Name of the tester producing this report (Organization or individual)"},
   :name
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Informal name of the executed TestScript"},
   :testScript
   {:confirms #{Reference},
    :zen/desc
    "Reference to the  version-specific TestScript that was executed to produce this TestReport"},
   :participant
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:type :uri},
     :type zen/map,
     :zen/desc
     "A participant in the test execution, either the execution engine, a client, or a server",
     :keys
     {:display
      {:confirms #{string},
       :type zen/string,
       :zen/desc "The display name of the participant"},
      :uri
      {:confirms #{uri},
       :type zen/string,
       :zen/desc
       "The uri of the participant. An absolute URL is preferred"},
      :type
      {:confirms #{code},
       :type zen/string,
       :zen/desc "test-engine | client | server"}}}},
   :resourceType {:type zen/string, :const {:value "TestReport"}},
   :setup
   {:confirms #{BackboneElement},
    :require #{:action},
    :type zen/map,
    :zen/desc
    "The results of the series of required setup operations before the tests were executed",
    :keys
    {:action
     {:minItems 1,
      :type zen/vector,
      :every
      {:confirms #{BackboneElement},
       :type zen/map,
       :zen/desc "A setup operation or assert that was executed",
       :keys
       {:assert
        {:confirms #{BackboneElement},
         :require #{:result},
         :type zen/map,
         :zen/desc "The assertion to perform",
         :keys
         {:detail
          {:confirms #{string},
           :type zen/string,
           :zen/desc "A link to further details on the result"},
          :result
          {:confirms #{code},
           :type zen/string,
           :zen/desc "pass | skip | fail | warning | error"},
          :message
          {:confirms #{markdown},
           :type zen/string,
           :zen/desc "A message associated with the result"}}},
        :operation
        {:confirms #{BackboneElement},
         :require #{:result},
         :type zen/map,
         :zen/desc "The operation to perform",
         :keys
         {:detail
          {:confirms #{uri},
           :type zen/string,
           :zen/desc "A link to further details on the result"},
          :result
          {:confirms #{code},
           :type zen/string,
           :zen/desc "pass | skip | fail | warning | error"},
          :message
          {:confirms #{markdown},
           :type zen/string,
           :zen/desc "A message associated with the result"}}}}}}}},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc
    "completed | in-progress | waiting | stopped | entered-in-error"},
   :result
   {:confirms #{code},
    :type zen/string,
    :zen/desc "pass | fail | pending"},
   :score
   {:confirms #{decimal},
    :type zen/number,
    :zen/desc
    "The final score (percentage of tests passed) resulting from the execution of the TestScript"},
   :identifier
   {:confirms #{Identifier}, :zen/desc "External identifier"},
   :issued
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc
    "When the TestScript was executed and this TestReport was generated"},
   :teardown
   {:confirms #{BackboneElement},
    :require #{:action},
    :type zen/map,
    :zen/desc
    "The results of running the series of required clean up steps",
    :keys
    {:action
     {:minItems 1,
      :type zen/vector,
      :every
      {:confirms #{BackboneElement},
       :require #{:operation},
       :type zen/map,
       :zen/desc "One or more teardown operations performed",
       :keys
       {:operation
        #:zen{:desc "The teardown operation performed"}}}}}},
   :test
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:action},
     :type zen/map,
     :zen/desc "A test executed from the test script",
     :keys
     {:action
      {:minItems 1,
       :type zen/vector,
       :every
       {:confirms #{BackboneElement},
        :type zen/map,
        :zen/desc "A test operation or assert that was performed",
        :keys
        {:operation #:zen{:desc "The operation performed"},
         :assert #:zen{:desc "The assertion performed"}}}},
      :name
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Tracking/logging name of this test"},
      :description
      {:confirms #{string},
       :type zen/string,
       :zen/desc
       "Tracking/reporting short description of the test"}}}}}},
 TestScript
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "TestScript",
  :require #{:name :status :url},
  :type zen/map,
  :zen/desc
  "A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/TestScript",
  :keys
  {:description
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc "Natural language description of the test script"},
   :date
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "Date last changed"},
   :variable
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:name},
     :type zen/map,
     :zen/desc "Placeholder for evaluated elements",
     :keys
     {:defaultValue
      {:confirms #{string},
       :type zen/string,
       :zen/desc
       "Default, hard-coded, or user-defined value for this variable"},
      :description
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Natural language description of the variable"},
      :sourceId
      {:confirms #{id},
       :type zen/string,
       :zen/desc
       "Fixture Id of source expression or headerField within this variable"},
      :name
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Descriptive name for this variable"},
      :expression
      {:confirms #{string},
       :type zen/string,
       :zen/desc "The FHIRPath expression against the fixture body"},
      :path
      {:confirms #{string},
       :type zen/string,
       :zen/desc "XPath or JSONPath against the fixture body"},
      :hint
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Hint help text for default value to enter"},
      :headerField
      {:confirms #{string},
       :type zen/string,
       :zen/desc "HTTP header field name for source"}}}},
   :publisher
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name of the publisher (organization or individual)"},
   :jurisdiction
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc
     "Intended jurisdiction for test script (if applicable)"}},
   :purpose
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc "Why this test script is defined"},
   :name
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name for this test script (computer friendly)"},
   :useContext
   {:type zen/vector,
    :every
    {:confirms #{UsageContext},
     :zen/desc "The context that the content is intended to support"}},
   :copyright
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc "Use and/or publishing restrictions"},
   :experimental
   {:confirms #{boolean},
    :type zen/boolean,
    :zen/desc "For testing purposes, not real usage"},
   :resourceType {:type zen/string, :const {:value "TestScript"}},
   :title
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name for this test script (human friendly)"},
   :setup
   {:confirms #{BackboneElement},
    :require #{:action},
    :type zen/map,
    :zen/desc
    "A series of required setup operations before tests are executed",
    :keys
    {:action
     {:minItems 1,
      :type zen/vector,
      :every
      {:confirms #{BackboneElement},
       :type zen/map,
       :zen/desc "A setup operation or assert to perform",
       :keys
       {:operation
        {:confirms #{BackboneElement},
         :require #{:encodeRequestUrl},
         :type zen/map,
         :zen/desc "The setup operation to perform",
         :keys
         {:description
          {:confirms #{string},
           :type zen/string,
           :zen/desc "Tracking/reporting operation description"},
          :method
          {:confirms #{code},
           :type zen/string,
           :zen/desc
           "delete | get | options | patch | post | put | head"},
          :targetId
          {:confirms #{id},
           :type zen/string,
           :zen/desc
           "Id of fixture used for extracting the [id],  [type], and [vid] for GET requests"},
          :requestHeader
          {:type zen/vector,
           :every
           {:confirms #{BackboneElement},
            :require #{:value :field},
            :type zen/map,
            :zen/desc
            "Each operation can have one or more header elements",
            :keys
            {:field
             {:confirms #{string},
              :type zen/string,
              :zen/desc "HTTP header field name"},
             :value
             {:confirms #{string},
              :type zen/string,
              :zen/desc "HTTP headerfield value"}}}},
          :params
          {:confirms #{string},
           :type zen/string,
           :zen/desc "Explicitly defined path parameters"},
          :type
          {:confirms #{Coding},
           :zen/desc "The operation code type that will be executed"},
          :requestId
          {:confirms #{id},
           :type zen/string,
           :zen/desc "Fixture Id of mapped request"},
          :encodeRequestUrl
          {:confirms #{boolean},
           :type zen/boolean,
           :zen/desc
           "Whether or not to send the request url in encoded format"},
          :label
          {:confirms #{string},
           :type zen/string,
           :zen/desc "Tracking/logging operation label"},
          :resource
          {:confirms #{code},
           :type zen/string,
           :zen/desc "Resource type"},
          :url
          {:confirms #{string},
           :type zen/string,
           :zen/desc "Request URL"},
          :origin
          {:confirms #{integer},
           :type zen/integer,
           :zen/desc "Server initiating the request"},
          :contentType
          {:confirms #{code},
           :type zen/string,
           :zen/desc
           "Mime type of the request payload contents, with charset etc."},
          :sourceId
          {:confirms #{id},
           :type zen/string,
           :zen/desc "Fixture Id of body for PUT and POST requests"},
          :responseId
          {:confirms #{id},
           :type zen/string,
           :zen/desc "Fixture Id of mapped response"},
          :destination
          {:confirms #{integer},
           :type zen/integer,
           :zen/desc "Server responding to the request"},
          :accept
          {:confirms #{code},
           :type zen/string,
           :zen/desc
           "Mime type to accept in the payload of the response, with charset etc."}}},
        :assert
        {:confirms #{BackboneElement},
         :require #{:warningOnly},
         :type zen/map,
         :zen/desc "The assertion to perform",
         :keys
         {:response
          {:confirms #{code},
           :type zen/string,
           :zen/desc
           "okay | created | noContent | notModified | bad | forbidden | notFound | methodNotAllowed | conflict | gone | preconditionFailed | unprocessable"},
          :description
          {:confirms #{string},
           :type zen/string,
           :zen/desc "Tracking/reporting assertion description"},
          :path
          {:confirms #{string},
           :type zen/string,
           :zen/desc "XPath or JSONPath expression"},
          :headerField
          {:confirms #{string},
           :type zen/string,
           :zen/desc "HTTP header field name"},
          :compareToSourceId
          {:confirms #{string},
           :type zen/string,
           :zen/desc "Id of the source fixture to be evaluated"},
          :expression
          {:confirms #{string},
           :type zen/string,
           :zen/desc "The FHIRPath expression to be evaluated"},
          :value
          {:confirms #{string},
           :type zen/string,
           :zen/desc "The value to compare to"},
          :warningOnly
          {:confirms #{boolean},
           :type zen/boolean,
           :zen/desc
           "Will this assert produce a warning only on error?"},
          :compareToSourceExpression
          {:confirms #{string},
           :type zen/string,
           :zen/desc
           "The FHIRPath expression to evaluate against the source fixture"},
          :label
          {:confirms #{string},
           :type zen/string,
           :zen/desc "Tracking/logging assertion label"},
          :resource
          {:confirms #{code},
           :type zen/string,
           :zen/desc "Resource type"},
          :responseCode
          {:confirms #{string},
           :type zen/string,
           :zen/desc "HTTP response code to test"},
          :minimumId
          {:confirms #{string},
           :type zen/string,
           :zen/desc "Fixture Id of minimum content resource"},
          :operator
          {:confirms #{code},
           :type zen/string,
           :zen/desc
           "equals | notEquals | in | notIn | greaterThan | lessThan | empty | notEmpty | contains | notContains | eval"},
          :contentType
          {:confirms #{code},
           :type zen/string,
           :zen/desc
           "Mime type to compare against the 'Content-Type' header"},
          :compareToSourcePath
          {:confirms #{string},
           :type zen/string,
           :zen/desc
           "XPath or JSONPath expression to evaluate against the source fixture"},
          :validateProfileId
          {:confirms #{id},
           :type zen/string,
           :zen/desc "Profile Id of validation profile reference"},
          :sourceId
          {:confirms #{id},
           :type zen/string,
           :zen/desc "Fixture Id of source expression or headerField"},
          :requestMethod
          {:confirms #{code},
           :type zen/string,
           :zen/desc
           "delete | get | options | patch | post | put | head"},
          :requestURL
          {:confirms #{string},
           :type zen/string,
           :zen/desc "Request URL comparison value"},
          :direction
          {:confirms #{code},
           :type zen/string,
           :zen/desc "response | request"},
          :navigationLinks
          {:confirms #{boolean},
           :type zen/boolean,
           :zen/desc "Perform validation on navigation links?"}}}}}}}},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc "draft | active | retired | unknown"},
   :url
   {:confirms #{uri},
    :type zen/string,
    :zen/desc
    "Canonical identifier for this test script, represented as a URI (globally unique)"},
   :identifier
   {:confirms #{Identifier},
    :zen/desc "Additional identifier for the test script"},
   :origin
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:index :profile},
     :type zen/map,
     :zen/desc
     "An abstract server representing a client or sender in a message exchange",
     :keys
     {:index
      {:confirms #{integer},
       :type zen/integer,
       :zen/desc
       "The index of the abstract origin server starting at 1"},
      :profile
      {:confirms #{Coding},
       :zen/desc "FHIR-Client | FHIR-SDC-FormFiller"}}}},
   :fixture
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:autodelete :autocreate},
     :type zen/map,
     :zen/desc "Fixture in the test script - by reference (uri)",
     :keys
     {:autocreate
      {:confirms #{boolean},
       :type zen/boolean,
       :zen/desc
       "Whether or not to implicitly create the fixture during setup"},
      :autodelete
      {:confirms #{boolean},
       :type zen/boolean,
       :zen/desc
       "Whether or not to implicitly delete the fixture during teardown"},
      :resource
      {:confirms #{Reference},
       :zen/desc "Reference of the resource"}}}},
   :version
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Business version of the test script"},
   :teardown
   {:confirms #{BackboneElement},
    :require #{:action},
    :type zen/map,
    :zen/desc "A series of required clean up steps",
    :keys
    {:action
     {:minItems 1,
      :type zen/vector,
      :every
      {:confirms #{BackboneElement},
       :require #{:operation},
       :type zen/map,
       :zen/desc "One or more teardown operations to perform",
       :keys
       {:operation
        #:zen{:desc "The teardown operation to perform"}}}}}},
   :contact
   {:type zen/vector,
    :every
    {:confirms #{ContactDetail},
     :zen/desc "Contact details for the publisher"}},
   :metadata
   {:confirms #{BackboneElement},
    :require #{:capability},
    :type zen/map,
    :zen/desc
    "Required capability that is assumed to function correctly on the FHIR server being tested",
    :keys
    {:capability
     {:minItems 1,
      :type zen/vector,
      :every
      {:confirms #{BackboneElement},
       :require #{:capabilities :validated :required},
       :type zen/map,
       :zen/desc
       "Capabilities  that are assumed to function correctly on the FHIR server being tested",
       :keys
       {:capabilities
        {:confirms #{canonical},
         :type zen/string,
         :zen/desc "Required Capability Statement"},
        :required
        {:confirms #{boolean},
         :type zen/boolean,
         :zen/desc "Are the capabilities required?"},
        :link
        {:type zen/vector,
         :every
         {:confirms #{uri},
          :type zen/string,
          :zen/desc "Links to the FHIR specification"}},
        :destination
        {:confirms #{integer},
         :type zen/integer,
         :zen/desc "Which server these requirements apply to"},
        :description
        {:confirms #{string},
         :type zen/string,
         :zen/desc "The expected capabilities of the server"},
        :origin
        {:type zen/vector,
         :every
         {:confirms #{integer},
          :type zen/integer,
          :zen/desc
          "Which origin server these requirements apply to"}},
        :validated
        {:confirms #{boolean},
         :type zen/boolean,
         :zen/desc "Are the capabilities validated?"}}}},
     :link
     {:type zen/vector,
      :every
      {:confirms #{BackboneElement},
       :require #{:url},
       :type zen/map,
       :zen/desc "Links to the FHIR specification",
       :keys
       {:url
        {:confirms #{uri},
         :type zen/string,
         :zen/desc "URL to the specification"},
        :description
        {:confirms #{string},
         :type zen/string,
         :zen/desc "Short description"}}}}}},
   :destination
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:index :profile},
     :type zen/map,
     :zen/desc
     "An abstract server representing a destination or receiver in a message exchange",
     :keys
     {:profile
      {:confirms #{Coding},
       :zen/desc
       "FHIR-Server | FHIR-SDC-FormManager | FHIR-SDC-FormReceiver | FHIR-SDC-FormProcessor"},
      :index
      {:confirms #{integer},
       :type zen/integer,
       :zen/desc
       "The index of the abstract destination server starting at 1"}}}},
   :test
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:action},
     :type zen/map,
     :zen/desc "A test in this script",
     :keys
     {:description
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Tracking/reporting short description of the test"},
      :name
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Tracking/logging name of this test"},
      :action
      {:minItems 1,
       :type zen/vector,
       :every
       {:confirms #{BackboneElement},
        :type zen/map,
        :zen/desc "A test operation or assert to perform",
        :keys
        {:assert #:zen{:desc "The setup assertion to perform"},
         :operation
         #:zen{:desc "The setup operation to perform"}}}}}}},
   :profile
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "Reference of the validation profile"}}}},
 ValueSet
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "ValueSet",
  :require #{:status},
  :type zen/map,
  :zen/desc
  "A ValueSet resource instance specifies a set of codes drawn from one or more code systems, intended for use in a particular context. Value sets link between [[[CodeSystem]]] definitions and their use in [coded elements](terminologies.html).",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/ValueSet",
  :keys
  {:description
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc "Natural language description of the value set"},
   :compose
   {:confirms #{BackboneElement},
    :require #{:include},
    :type zen/map,
    :zen/desc "Content logical definition of the value set (CLD)",
    :keys
    {:exclude
     {:type zen/vector,
      :every
      #:zen{:desc
            "Explicitly exclude codes from a code system or other value sets"}},
     :lockedDate
     {:confirms #{date},
      :type zen/date,
      :zen/desc
      "Fixed date for references with no specified version (transitive)"},
     :include
     {:minItems 1,
      :type zen/vector,
      :every
      {:confirms #{BackboneElement},
       :type zen/map,
       :zen/desc
       "Include one or more codes from a code system or other value set(s)",
       :keys
       {:concept
        {:type zen/vector,
         :every
         {:confirms #{BackboneElement},
          :require #{:code},
          :type zen/map,
          :zen/desc "A concept defined in the system",
          :keys
          {:code
           {:confirms #{code},
            :type zen/string,
            :zen/desc "Code or expression from system"},
           :designation
           {:type zen/vector,
            :every
            {:confirms #{BackboneElement},
             :require #{:value},
             :type zen/map,
             :zen/desc "Additional representations for this concept",
             :keys
             {:use
              {:confirms #{Coding},
               :zen/desc "Types of uses of designations"},
              :value
              {:confirms #{string},
               :type zen/string,
               :zen/desc "The text value for this designation"},
              :language
              {:confirms #{code},
               :type zen/string,
               :zen/desc "Human language of the designation"}}}},
           :display
           {:confirms #{string},
            :type zen/string,
            :zen/desc
            "Text to display for this code for this value set in this valueset"}}}},
        :system
        {:confirms #{uri},
         :type zen/string,
         :zen/desc "The system the codes come from"},
        :valueSet
        {:type zen/vector,
         :every
         {:confirms #{canonical},
          :type zen/string,
          :zen/desc "Select the contents included in this value set"}},
        :filter
        {:type zen/vector,
         :every
         {:confirms #{BackboneElement},
          :require #{:property :value :op},
          :type zen/map,
          :zen/desc
          "Select codes/concepts by their properties (including relationships)",
          :keys
          {:value
           {:confirms #{string},
            :type zen/string,
            :zen/desc
            "Code from the system, or regex criteria, or boolean value for exists"},
           :op
           {:confirms #{code},
            :type zen/string,
            :zen/desc
            "= | is-a | descendent-of | is-not-a | regex | in | not-in | generalizes | exists"},
           :property
           {:confirms #{code},
            :type zen/string,
            :zen/desc
            "A property/filter defined by the code system"}}}},
        :version
        {:confirms #{string},
         :type zen/string,
         :zen/desc
         "Specific version of the code system referred to"}}}},
     :inactive
     {:confirms #{boolean},
      :type zen/boolean,
      :zen/desc "Whether inactive codes are in the value set"}}},
   :date
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "Date last changed"},
   :publisher
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name of the publisher (organization or individual)"},
   :jurisdiction
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc "Intended jurisdiction for value set (if applicable)"}},
   :purpose
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc "Why this value set is defined"},
   :name
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name for this value set (computer friendly)"},
   :useContext
   {:type zen/vector,
    :every
    {:confirms #{UsageContext},
     :zen/desc "The context that the content is intended to support"}},
   :copyright
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc "Use and/or publishing restrictions"},
   :experimental
   {:confirms #{boolean},
    :type zen/boolean,
    :zen/desc "For testing purposes, not real usage"},
   :resourceType {:type zen/string, :const {:value "ValueSet"}},
   :expansion
   {:confirms #{BackboneElement},
    :require #{:timestamp},
    :type zen/map,
    :zen/desc "Used when the value set is \"expanded\"",
    :keys
    {:total
     {:confirms #{integer},
      :type zen/integer,
      :zen/desc "Total number of codes in the expansion"},
     :parameter
     {:type zen/vector,
      :every
      {:confirms #{BackboneElement},
       :require #{:name},
       :type zen/map,
       :zen/desc "Parameter that controlled the expansion process",
       :keys
       {:value
        {:type zen/map,
         :zen/desc "Value of the named parameter",
         :keys
         {:string {:confirms #{string}, :type zen/string},
          :boolean {:confirms #{boolean}, :type zen/boolean},
          :integer {:confirms #{integer}, :type zen/integer},
          :decimal {:confirms #{decimal}, :type zen/number},
          :uri {:confirms #{uri}, :type zen/string},
          :code {:confirms #{code}, :type zen/string},
          :dateTime {:confirms #{dateTime}, :type zen/datetime}},
         :exclusive-keys
         #{#{:string
             :dateTime
             :integer
             :decimal
             :code
             :uri
             :boolean}}},
        :name
        {:confirms #{string},
         :type zen/string,
         :zen/desc "Name as assigned by the client or server"}}}},
     :offset
     {:confirms #{integer},
      :type zen/integer,
      :zen/desc "Offset at which this resource starts"},
     :identifier
     {:confirms #{uri},
      :type zen/string,
      :zen/desc
      "Identifies the value set expansion (business identifier)"},
     :contains
     {:type zen/vector,
      :every
      {:confirms #{BackboneElement},
       :type zen/map,
       :zen/desc "Codes in the value set",
       :keys
       {:code
        {:confirms #{code},
         :type zen/string,
         :zen/desc "Code - if blank, this is not a selectable code"},
        :designation
        {:type zen/vector,
         :every
         #:zen{:desc "Additional representations for this item"}},
        :display
        {:confirms #{string},
         :type zen/string,
         :zen/desc "User display for the concept"},
        :inactive
        {:confirms #{boolean},
         :type zen/boolean,
         :zen/desc "If concept is inactive in the code system"},
        :abstract
        {:confirms #{boolean},
         :type zen/boolean,
         :zen/desc "If user cannot select this entry"},
        :version
        {:confirms #{string},
         :type zen/string,
         :zen/desc "Version in which this code/display is defined"},
        :contains
        {:type zen/vector,
         :every #:zen{:desc "Codes contained under this entry"}},
        :system
        {:confirms #{uri},
         :type zen/string,
         :zen/desc "System value for the code"}}}},
     :timestamp
     {:confirms #{dateTime},
      :type zen/datetime,
      :zen/desc "Time ValueSet expansion happened"}}},
   :title
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name for this value set (human friendly)"},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc "draft | active | retired | unknown"},
   :url
   {:confirms #{uri},
    :type zen/string,
    :zen/desc
    "Canonical identifier for this value set, represented as a URI (globally unique)"},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier},
     :zen/desc
     "Additional identifier for the value set (business identifier)"}},
   :immutable
   {:confirms #{boolean},
    :type zen/boolean,
    :zen/desc
    "Indicates whether or not any change to the content logical definition may occur"},
   :version
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Business version of the value set"},
   :contact
   {:type zen/vector,
    :every
    {:confirms #{ContactDetail},
     :zen/desc "Contact details for the publisher"}}}},
 VerificationResult
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "VerificationResult",
  :require #{:status},
  :type zen/map,
  :zen/desc
  "Describes validation requirements, source(s), status and dates for one or more elements.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/VerificationResult",
  :keys
  {:failureAction
   {:confirms #{CodeableConcept},
    :zen/desc "fatal | warn | rec-only | none"},
   :validationType
   {:confirms #{CodeableConcept},
    :zen/desc "nothing | primary | multiple"},
   :targetLocation
   {:type zen/vector,
    :every
    {:confirms #{string},
     :type zen/string,
     :zen/desc
     "The fhirpath location(s) within the resource that was validated"}},
   :validator
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:organization},
     :type zen/map,
     :zen/desc "Information about the entity validating information",
     :keys
     {:organization
      {:confirms #{Reference},
       :zen/desc
       "Reference to the organization validating information"},
      :attestationSignature
      {:confirms #{Signature}, :zen/desc "Validator signature"},
      :identityCertificate
      {:confirms #{string},
       :type zen/string,
       :zen/desc
       "A digital identity certificate associated with the validator"}}}},
   :need
   {:confirms #{CodeableConcept},
    :zen/desc "none | initial | periodic"},
   :frequency
   {:confirms #{Timing}, :zen/desc "Frequency of revalidation"},
   :nextScheduled
   {:confirms #{date},
    :type zen/date,
    :zen/desc
    "The date when target is next validated, if appropriate"},
   :resourceType
   {:type zen/string, :const {:value "VerificationResult"}},
   :primarySource
   {:type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :type zen/map,
     :zen/desc
     "Information about the primary source(s) involved in validation",
     :keys
     {:validationStatus
      {:confirms #{CodeableConcept},
       :zen/desc "successful | failed | unknown"},
      :who
      {:confirms #{Reference},
       :zen/desc "Reference to the primary source"},
      :communicationMethod
      {:type zen/vector,
       :every
       {:confirms #{CodeableConcept},
        :zen/desc
        "Method for exchanging information with the primary source"}},
      :pushTypeAvailable
      {:type zen/vector,
       :every
       {:confirms #{CodeableConcept},
        :zen/desc "specific | any | source"}},
      :validationDate
      {:confirms #{dateTime},
       :type zen/datetime,
       :zen/desc
       "When the target was validated against the primary source"},
      :canPushUpdates
      {:confirms #{CodeableConcept},
       :zen/desc "yes | no | undetermined"},
      :type
      {:type zen/vector,
       :every
       {:confirms #{CodeableConcept},
        :zen/desc
        "Type of primary source (License Board; Primary Education; Continuing Education; Postal Service; Relationship owner; Registration Authority; legal source; issuing source; authoritative source)"}}}}},
   :attestation
   {:confirms #{BackboneElement},
    :type zen/map,
    :zen/desc "Information about the entity attesting to information",
    :keys
    {:who
     {:confirms #{Reference},
      :zen/desc
      "The individual or organization attesting to information"},
     :sourceSignature
     {:confirms #{Signature}, :zen/desc "Attester signature"},
     :proxySignature
     {:confirms #{Signature}, :zen/desc "Proxy signature"},
     :onBehalfOf
     {:confirms #{Reference},
      :zen/desc
      "When the who is asserting on behalf of another (organization or individual)"},
     :date
     {:confirms #{date},
      :type zen/date,
      :zen/desc "The date the information was attested to"},
     :communicationMethod
     {:confirms #{CodeableConcept},
      :zen/desc
      "The method by which attested information was submitted/retrieved"},
     :sourceIdentityCertificate
     {:confirms #{string},
      :type zen/string,
      :zen/desc
      "A digital identity certificate associated with the attestation source"},
     :proxyIdentityCertificate
     {:confirms #{string},
      :type zen/string,
      :zen/desc
      "A digital identity certificate associated with the proxy entity submitting attested information on behalf of the attestation source"}}},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc
    "attested | validated | in-process | req-revalid | val-fail | reval-fail"},
   :validationProcess
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc
     "The primary process by which the target is validated (edit check; value set; primary source; multiple sources; standalone; in context)"}},
   :statusDate
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "When the validation status was updated"},
   :target
   {:type zen/vector,
    :every
    {:confirms #{Reference},
     :zen/desc "A resource that was validated"}},
   :lastPerformed
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc
    "The date/time validation was last completed (including failed validations)"}}},
 VisionPrescription
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/resource
    zen-fhir/base},
  :fhir/type "VisionPrescription",
  :require
  #{:patient
    :created
    :status
    :prescriber
    :dateWritten
    :lensSpecification},
  :type zen/map,
  :zen/desc
  "An authorization for the provision of glasses and/or contact lenses to a patient.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/VisionPrescription",
  :keys
  {:patient
   {:confirms #{Reference}, :zen/desc "Who prescription is for"},
   :encounter
   {:confirms #{Reference},
    :zen/desc "Created during encounter / admission / stay"},
   :created
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "Response creation date"},
   :resourceType
   {:type zen/string, :const {:value "VisionPrescription"}},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc "active | cancelled | draft | entered-in-error"},
   :identifier
   {:type zen/vector,
    :every
    {:confirms #{Identifier},
     :zen/desc "Business Identifier for vision prescription"}},
   :prescriber
   {:confirms #{Reference},
    :zen/desc "Who authorized the vision prescription"},
   :dateWritten
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "When prescription was authorized"},
   :lensSpecification
   {:minItems 1,
    :type zen/vector,
    :every
    {:confirms #{BackboneElement},
     :require #{:eye :product},
     :type zen/map,
     :zen/desc "Vision lens authorization",
     :keys
     {:sphere
      {:confirms #{decimal},
       :type zen/number,
       :zen/desc "Power of the lens"},
      :color
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Color required"},
      :eye
      {:confirms #{code}, :type zen/string, :zen/desc "right | left"},
      :diameter
      {:confirms #{decimal},
       :type zen/number,
       :zen/desc "Contact lens diameter"},
      :duration
      {:confirms #{Quantity SimpleQuantity},
       :zen/desc "Lens wear duration"},
      :brand
      {:confirms #{string},
       :type zen/string,
       :zen/desc "Brand required"},
      :note
      {:type zen/vector,
       :every
       {:confirms #{Annotation}, :zen/desc "Notes for coatings"}},
      :power
      {:confirms #{decimal},
       :type zen/number,
       :zen/desc "Contact lens power"},
      :product
      {:confirms #{CodeableConcept},
       :zen/desc "Product to be supplied"},
      :cylinder
      {:confirms #{decimal},
       :type zen/number,
       :zen/desc "Lens power for astigmatism"},
      :prism
      {:type zen/vector,
       :every
       {:confirms #{BackboneElement},
        :require #{:amount :base},
        :type zen/map,
        :zen/desc "Eye alignment compensation",
        :keys
        {:amount
         {:confirms #{decimal},
          :type zen/number,
          :zen/desc "Amount of adjustment"},
         :base
         {:confirms #{code},
          :type zen/string,
          :zen/desc "up | down | in | out"}}}},
      :axis
      {:confirms #{integer},
       :type zen/integer,
       :zen/desc
       "Lens meridian which contain no power for astigmatism"},
      :add
      {:confirms #{decimal},
       :type zen/number,
       :zen/desc "Added power for multifocal levels"},
      :backCurve
      {:confirms #{decimal},
       :type zen/number,
       :zen/desc "Contact lens back curvature"}}}}}},
 MetadataResource
 {:confirms #{DomainResource},
  :zen/tags
  #{zen-fhir/structure-definition
    zen/schema
    zen-fhir/logical
    zen-fhir/base},
  :fhir/type "MetadataResource",
  :require #{:status},
  :type zen/map,
  :zen/desc
  "Common Ancestor declaration for conformance and knowledge artifact resources.",
  :aidbox/data-format :aidbox,
  :fhir/definition-url
  "http://hl7.org/fhir/StructureDefinition/MetadataResource",
  :keys
  {:description
   {:confirms #{markdown},
    :type zen/string,
    :zen/desc "Natural language description of the metadata resource"},
   :date
   {:confirms #{dateTime},
    :type zen/datetime,
    :zen/desc "Date last changed"},
   :publisher
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name of the publisher (organization or individual)"},
   :jurisdiction
   {:type zen/vector,
    :every
    {:confirms #{CodeableConcept},
     :zen/desc
     "Intended jurisdiction for metadata resource (if applicable)"}},
   :name
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name for this metadata resource (computer friendly)"},
   :useContext
   {:type zen/vector,
    :every
    {:confirms #{UsageContext},
     :zen/desc "The context that the content is intended to support"}},
   :experimental
   {:confirms #{boolean},
    :type zen/boolean,
    :zen/desc "For testing purposes, not real usage"},
   :title
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Name for this metadata resource (human friendly)"},
   :status
   {:confirms #{code},
    :type zen/string,
    :zen/desc "draft | active | retired | unknown"},
   :url
   {:confirms #{uri},
    :type zen/string,
    :zen/desc
    "Canonical identifier for this metadata resource, represented as a URI (globally unique)"},
   :version
   {:confirms #{string},
    :type zen/string,
    :zen/desc "Business version of the metadata resource"},
   :contact
   {:type zen/vector,
    :every
    {:confirms #{ContactDetail},
     :zen/desc "Contact details for the publisher"}}}}}