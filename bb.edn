{:deps {}
 :tasks {:requires ([clojure.string :as str]
                    [clojure.java.io :as io]
                    [clojure.java.shell]
                    [babashka.fs :as fs]
                    [cheshire.core :as json]
                    [clojure.pprint])
         :init (do
                 (def green "\u001B[32m")
                 (def purple "\u001B[35m")
                 (def clear-color "\u001B[0m")
                 (def bold "\033[0;1m")
                 (def bold-end "\033[22m")
                 (def green-underline "\033[32;4m")

                 (defn colored-printer [map & [ks]]
                   (doseq [[k v] (if ks (select-keys map ks) map)]
                     (println (str bold (str/capitalize (name k)) ": " bold-end (str v)))))

                 (defn sh
                   "clojure.java.shell/sh wrapper-simplifier
                    command - shell command represented as a single string"
                   [command & {:keys [dir]}]
                   (let [args       (str/split command (re-pattern "\\s"))
                         args-w-dir (concat args (when dir [:dir dir]))
                         cmd-str    (str "$ " command (when dir (str " :dir " dir)))]
                     (println cmd-str)
                     (:out (apply clojure.java.shell/sh args-w-dir))))

                 (defn pull-deps
                   "deps-maps - [{:url url, :dirname dirname} ...]
                    :url - FHIR NPM package url
                    :dirname - destination folder"
                   [deps-maps]
                   (doseq [{:keys [url dirname]} deps-maps]
                     (let [arch-name (format "%s_arch.tgz" (gensym))]
                       (shell (format "mkdir -p %s" dirname))
                       (shell (format "curl -o %s %s" (str dirname \/ arch-name) url))
                       (shell {:dir dirname} (format "tar -xzf %s" arch-name))
                       (shell {:dir dirname} (format "rm -rf %s" arch-name))
                       (shell {:dir dirname} (format "cp -a package/. ." arch-name))
                       (shell {:dir dirname} "rm -rf package")))))
         :enter (do
                  (println (str purple  "Executing: " clear-color bold (:name (current-task)) bold-end))
                  (def task-start-ts (System/currentTimeMillis)))
         :leave (println (str green "Task: " bold  (:name (current-task)) bold-end
                              " " green-underline "finished in "
                              (- (System/currentTimeMillis) task-start-ts) " ms" clear-color \newline))
         set-zen-fhir-version {:doc "Setup zen.fhir/version regex"
                               :task (let [current-git-repo-tag (or (first *command-line-args*) (-> "git describe --tag --abbrev=0" sh str/trim-newline))
                                           semantic-version-pattern (re-pattern "(\\d+)\\.(\\d+)\\.(\\d+)(-.+)?")
                                           [match major minor _patch _pre-release] (re-find semantic-version-pattern current-git-repo-tag)]
                                       (println (str "Version: " bold match bold-end))
                                       (spit "resources/zen-fhir-version" match))}

         set-zen-fhir-lib-version {:doc "Setup zen.fhir lib version"
                                   :task (let [current-git-repo-tag (or (first *command-line-args*)
                                                                        (str/trim-newline (sh "git describe --tag --abbrev=0"
                                                                                              :dir "zen.fhir")))]
                                           (println (str "Version: " bold current-git-repo-tag bold-end))
                                           (spit "resources/zen-fhir-lib-version" current-git-repo-tag))}

         clean-up-npm {:doc "Deletes node_module directory to prevent npm fail because of custom-populated node_modules directory."
                       :task (shell "rm -rf node_modules")}

         install-npm
         {:depends [clean-up-npm]
          :task (do
                  (shell "npm --registry=https://packages.simplifier.net install")
                  (shell "npm --registry=https://packages.simplifier.net install"))}

         pull-nz-igs
         {:task (do
                  (shell "mkdir -p node_modules")
                  (clojure "-X zen.fhir.igs-etl.nz/etl! :package-dir-dest '\"node_modules\"'"))}

         pull-r4b
         {:task (pull-deps [{:url "http://packages2.fhir.org/packages/hl7.fhir.r4b.core/4.3.0"
                             :dirname "r4b/hl7.fhir.r4b.core"}
                            {:url "http://packages2.fhir.org/packages/hl7.terminology.r4/5.0.0"
                             :dirname "r4b/hl7.terminology.r4"}
                            {:url "http://packages2.fhir.org/packages/hl7.fhir.uv.subscriptions-backport.r4b/1.1.0"
                             :dirname "r4b/hl7.fhir.uv.subscriptions-backport.r4b"}])}

         pull-r5
         {:task (pull-deps [{:url "http://packages2.fhir.org/packages/hl7.fhir.r5.core/5.0.0"
                             :dirname "r5/hl7.fhir.r5.core"}
                            {:url "http://packages2.fhir.org/packages/hl7.terminology.r5/4.0.0"
                             :dirname "r5/hl7.terminology.r5"}
                            {:url "http://packages2.fhir.org/packages/hl7.fhir.uv.extensions.r5/1.0.0"
                             :dirname "r5/hl7.fhir.uv.extensions.r5"}
                            #_{:url "http://packages2.fhir.org/packages/hl7.fhir.r5.search/5.0.0"
                               :dirname "r5/hl7.fhir.r5.search"}])}

         pull-au-igs
         {:task (pull-deps [{:url "http://hl7.org.au/fhir/4.1.0/package.tgz"
                             :dirname "node_modules/hl7.fhir.au.base"}
                            {:url "http://hl7.org.au/fhir/core/0.1.0-draft/package.tgz"
                             :dirname "node_modules/hl7.fhir.au.core"}
                            {:url "https://build.fhir.org/ig/hl7au/draft-diagnostic-orders/package.tgz"
                             :dirname "node_modules/hl7.fhir.au.draft.diagnostic-orders"}])}

         pull-chile-igs
         {:task (pull-deps [{:url "https://hl7chile.cl/fhir/ig/CoreCL/package.tgz"
                             :dirname "node_modules/hl7.fhir.cl.corecl"}
                            {:url "http://hl7.org/fhir/uv/ips/STU1/package.tgz"
                             :dirname "node_modules/hl7.fhir.uv.ips"}])}

         my-debug {:task (sh "cat node_modules/hl7.org.nz.fhir.ig.nhi/ValueSet-nhi-address-type.json || echo \"FAIL. but it's ok\"")}

         kbv-basis-patch
         {:task (shell "cp resources/KBV_PR_Base_Patient.json node_modules/kbv.basis/KBV_PR_Base_Patient.json")}

         init {:depends [set-zen-fhir-version set-zen-fhir-lib-version install-npm kbv-basis-patch pull-nz-igs pull-r4b pull-r5 #_pull-au-igs pull-chile-igs build-us-core-601]}

         repl {:depends [set-zen-fhir-version set-zen-fhir-lib-version]
               :task (clojure "-M:test:nrepl -m nrepl.cmdline --middleware [cider.nrepl/cider-middleware]")}

         test {:depends [set-zen-fhir-version set-zen-fhir-lib-version pull-au-igs]
               :task (clojure "-M:test:kaocha")}

         ci-test {:depends [set-zen-fhir-version set-zen-fhir-lib-version init test]}

         init-r3 {:depends [set-zen-fhir-version set-zen-fhir-lib-version]
                  :task (do
                          (shell {:dir "r3"} "npm --registry=https://packages.simplifier.net install")
                          (shell {:dir "r3"} "npm --registry=https://packages.simplifier.net install"))}

         init-r3-nictiz-hack {:depends [set-zen-fhir-version set-zen-fhir-lib-version]
                              :task (do
                                      (shell {:dir "r3-tmp-nictiz-hack"} "npm --registry=https://packages.simplifier.net install")
                                      (shell {:dir "r3-tmp-nictiz-hack"} "npm --registry=https://packages.simplifier.net install"))}

         build-r3-nictiz-hack (binding [*command-line-args* (list "r3-tmp-nictiz-hack/"
                                                                  "zrc/standalone_projects/"
                                                                  nil
                                                                  nil
                                                                  true)]
                                (run 'build-stanadlone-projects))

         build-us-core-601 {:task (do
                                    (shell {:dir "us-core-610"} "npm --registry=https://packages.simplifier.net install")
                                    (shell {:dir "us-core-610"} "npm --registry=https://packages.simplifier.net install")
                                    (let [root-manifest-file (io/file "us-core-610/package.json")
                                          root-manifest-deps (:dependencies (json/parse-string (slurp root-manifest-file) keyword))
                                          us-core-manifest-file (io/file "us-core-610/node_modules/hl7.fhir.us.core/package.json")
                                          updated-manifest (assoc (json/parse-string (slurp us-core-manifest-file) keyword)
                                                                  :name "hl7.fhir.us.core610"
                                                                  :dependencies (dissoc root-manifest-deps :hl7.fhir.us.core))
                                          _ (spit us-core-manifest-file (json/generate-string updated-manifest))
                                          _  (.renameTo
                                               ^File (io/file "us-core-610/node_modules/hl7.fhir.us.core")
                                               (io/file "us-core-610/node_modules/hl7.fhir.us.core610"))]))}

         build (clojure "-X:build all")

         zen-profiles (let [[node-modules zrc ver package] *command-line-args*]
                        (clojure (str "-M -m zen.fhir.tooling " node-modules " " zrc " " ver " " package)))

         zen-profiles-packages (clojure (str "-J-Xmx16g -M -m zen.fhir.tooling-packages " (str/join " " *command-line-args*)))

         build-stanadlone-projects (let [[node-modules zrc preserve-package alt-package-name rename-package] *command-line-args*
                                         opts (cond-> {}
                                                preserve-package
                                                (assoc "preserve-package" preserve-package)
                                                alt-package-name
                                                (assoc "alt-package-name" alt-package-name)
                                                rename-package
                                                (assoc "rename-package" rename-package))]

                                     (clojure (str "-M -m zen.fhir.tooling.aidbox-standalone-v2 " node-modules " " zrc " " (str/join " " (flatten (seq opts))))))

         build-standalone-zen-profiles-all-versions
         (let [get-dependency-meta (fn [dependency] (-> (sh (str "npm --registry https://packages.simplifier.net --json view " dependency))
                                                        (json/parse-string keyword)))
               {:as top-level-deps, :keys [dependencies]} (read-string (slurp "resources/package.edn"))]
           (doseq [dependency dependencies
                   :let [{:as npm-view-obj, versions :versions dependency-name :name {latest-dep-version :latest} :dist-tags}
                         (get-dependency-meta dependency)]]
             (doseq [v versions
                     :let [dependency-meta (get-dependency-meta (str dependency "@" v))
                           dep-folder (str dependency "-" v "/")]
                     :when (= "R4" (:fhirVersion dependency-meta))]
               (try
                 (println "\nProcessing dependency...")
                 (colored-printer dependency-meta [:fhirVersion :name :version])
                 (sh (str "npm --prefix " dep-folder " --registry https://packages.simplifier.net install " (:url dependency-meta)))
                 (let [package-json-path (str/join "/" [dep-folder "node_modules" dependency-name "package.json"])
                       package-json      (slurp package-json-path)
                       package-info      (json/parse-string package-json keyword)
                       fhir-dep          (get-in package-info [:dependencies :hl7.fhir.r4.core])
                       fhir-4.0.1-core-iself?  (and (= (:name package-info) "hl7.fhir.r4.core")
                                                    (= (:version package-info) "4.0.1"))]
                   (cond
                     (and (nil? fhir-dep) (not fhir-4.0.1-core-iself?))
                     (println (str purple "WARNING:" clear-color " package doesn't contain FHIR core dependency"))

                     #_(str/starts-with? (str fhir-dep) "4")
                     (or fhir-4.0.1-core-iself? (= "4.0.1" fhir-dep)) #_"NOTE: simplifier hosts onle 4.0.1 currently"
                     (binding [*command-line-args* (list (str dep-folder "node_modules/")
                                                         "zrc/standalone_projects/"
                                                         dependency-name
                                                         (if (= v latest-dep-version)
                                                           dependency
                                                           (str dependency "-" v)))]
                       (run 'build-stanadlone-projects)
                       #_"NOTE: this is latest IG version zip name hotfix"
                       (when (= v latest-dep-version)
                         (let [zip-location "zrc/standalone_projects/"
                               zip-name (str dependency ".zip")
                               zip-fixed-name (str (str/replace dependency \. \-) ".zip")
                               zip-version-name (str dependency "-" v ".zip")]
                           (sh (str "cp " zip-name " " zip-fixed-name) :dir zip-location)
                           (sh (str "cp " zip-name " " zip-version-name) :dir zip-location))))

                     :else
                     (println (str purple "WARNING:" clear-color " package FHIR core version is not r4"))))
                 (catch Exception e
                   (println (str purple "ERROR:" clear-color " " (.getMessage e))))
                 (finally
                   (try (sh (str "rm -rf " dep-folder))
                        (catch Exception _)))))))

         build-terminology-bundles (clojure "-M:terminology-build -m zen.fhir.tooling.terminology")
         outdated             {:doc  "Check outdated libraries"
                               :task (clojure " -Sdeps '{:deps {com.github.liquidz/antq {:mvn/version \"RELEASE\"}}} '-M -m antq.core ")}

         lint                 {:doc  "Lint source code"
                               :task (clojure "-Sdeps '{:deps {clj-kondo/clj-kondo {:mvn/version \"RELEASE\"}}} '-m clj-kondo.main --lint src:test --parallel --fail-level error")}}}
